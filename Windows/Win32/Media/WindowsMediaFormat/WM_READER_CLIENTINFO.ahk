#Requires AutoHotkey v2.0.0 64-bit
#Include ..\..\..\..\Win32Struct.ahk

/**
 * The WM_READER_CLIENTINFO structure describes the client reader (player) accessing the media stream.
 * @remarks
 * In earlier versions of this SDK, the <b>pReserved</b> member was named <b>wszHostUniquePID</b>. The application used this member to specify an ID to send to the server. In the current version, the reader object automatically generates a GUID for the ID, so this structure member is obsolete. It is present only to provide binary compatibility with earlier versions of the SDK.
  * 
  * The GUID generated by the reader object represents a unique user on a particular computer. The reader object stores this value in the registry. If the registry entry does not exist, the SDK dynamically creates it. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/wmsdkidl/nf-wmsdkidl-iwmreaderadvanced2-setlogclientid">IWMReaderAdvanced2::SetLogClientID</a>.
 * @see https://learn.microsoft.com/windows/win32/api/wmsdkidl/ns-wmsdkidl-wm_reader_clientinfo
 * @namespace Windows.Win32.Media.WindowsMediaFormat
 * @version v4.0.30319
 */
class WM_READER_CLIENTINFO extends Win32Struct
{
    static sizeof => 72

    static packingSize => 8

    /**
     * Size of the structure in bytes.
     * @type {Integer}
     */
    cbSize {
        get => NumGet(this, 0, "uint")
        set => NumPut("uint", value, this, 0)
    }

    /**
     * Two-letter or three-letter language code.
     * @type {Pointer<PWSTR>}
     */
    wszLang {
        get => NumGet(this, 8, "ptr")
        set => NumPut("ptr", value, this, 8)
    }

    /**
     * The browser's user-agent string.
     * @type {Pointer<PWSTR>}
     */
    wszBrowserUserAgent {
        get => NumGet(this, 16, "ptr")
        set => NumPut("ptr", value, this, 16)
    }

    /**
     * Web page that contains the <a href="https://docs.microsoft.com/windows/desktop/wmformat/wmformat-glossary">plug-in</a>.
     * @type {Pointer<PWSTR>}
     */
    wszBrowserWebPage {
        get => NumGet(this, 24, "ptr")
        set => NumPut("ptr", value, this, 24)
    }

    /**
     * Reserved.
     * @type {Integer}
     */
    qwReserved {
        get => NumGet(this, 32, "uint")
        set => NumPut("uint", value, this, 32)
    }

    /**
     * Unused. See Remarks.
     * @type {Pointer<IntPtr>}
     */
    pReserved {
        get => NumGet(this, 40, "ptr")
        set => NumPut("ptr", value, this, 40)
    }

    /**
     * Host application's .exe file; for example, Iexplore.exe.
     * @type {Pointer<PWSTR>}
     */
    wszHostExe {
        get => NumGet(this, 48, "ptr")
        set => NumPut("ptr", value, this, 48)
    }

    /**
     * Version number of the host application. The value is four unsigned <b>WORD</b> values packed into a 64-bit integer. When the client information is logged, each <b>WORD</b> value is unpacked and translated into its decimal equivalent. For example, if the value is 0x0001000200030004, the version number is logged as "1.2.3.4".
     * @type {Integer}
     */
    qwHostVersion {
        get => NumGet(this, 56, "uint")
        set => NumPut("uint", value, this, 56)
    }

    /**
     * String identifying the player application. For example, "WMPlayer/9.0.0.0" identifies version 9 of the Windows Media Player.
     * @type {Pointer<PWSTR>}
     */
    wszPlayerUserAgent {
        get => NumGet(this, 64, "ptr")
        set => NumPut("ptr", value, this, 64)
    }

    /**
     * Initializes the struct. `cbSize` must always contain the size of the struct.
     * @param {Integer} ptr The location at which to create the struct, or 0 to create a new `Buffer`
     */
    __New(ptr := 0){
        super.__New(ptr)
        this.cbSize := 72
    }
}
