#Requires AutoHotkey v2.0.0 64-bit
#Include ..\..\..\..\Win32ComInterface.ahk
#Include ..\..\..\..\Guid.ahk
#Include .\IVssDifferentialSoftwareSnapshotMgmt.ahk

/**
 * Defines additional methods that allow applications to query and manage shadow copy storage areas generated by the system shadow copy provider.
 * @see https://docs.microsoft.com/windows/win32/api//vsmgmt/nn-vsmgmt-ivssdifferentialsoftwaresnapshotmgmt2
 * @namespace Windows.Win32.Storage.Vss
 * @version v4.0.30319
 */
class IVssDifferentialSoftwareSnapshotMgmt2 extends IVssDifferentialSoftwareSnapshotMgmt{

    static sizeof => A_PtrSize
    /**
     * The interface identifier for IVssDifferentialSoftwareSnapshotMgmt2
     * @type {Guid}
     */
    static IID => Guid("{949d7353-675f-4275-8969-f044c6277815}")

    /**
     * The offset into the COM object's virtual function table at which this interface's methods begin.
     * @type {Integer}
     */
    static vTableOffset => 9

    /**
     * @readonly used when implementing interfaces to order function pointers
     * @type {Array<String>}
     */
    static VTableNames => ["ChangeDiffAreaMaximumSizeEx", "MigrateDiffAreas", "QueryMigrationStatus", "SetSnapshotPriority"]

    /**
     * 
     * @param {Pointer<Integer>} pwszVolumeName 
     * @param {Pointer<Integer>} pwszDiffAreaVolumeName 
     * @param {Integer} llMaximumDiffSpace 
     * @param {BOOL} bVolatile 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/vsmgmt/nf-vsmgmt-ivssdifferentialsoftwaresnapshotmgmt2-changediffareamaximumsizeex
     */
    ChangeDiffAreaMaximumSizeEx(pwszVolumeName, pwszDiffAreaVolumeName, llMaximumDiffSpace, bVolatile) {
        pwszVolumeNameMarshal := pwszVolumeName is VarRef ? "ushort*" : "ptr"
        pwszDiffAreaVolumeNameMarshal := pwszDiffAreaVolumeName is VarRef ? "ushort*" : "ptr"

        result := ComCall(9, this, pwszVolumeNameMarshal, pwszVolumeName, pwszDiffAreaVolumeNameMarshal, pwszDiffAreaVolumeName, "int64", llMaximumDiffSpace, "int", bVolatile, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<Integer>} pwszVolumeName 
     * @param {Pointer<Integer>} pwszDiffAreaVolumeName 
     * @param {Pointer<Integer>} pwszNewDiffAreaVolumeName 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/vsmgmt/nf-vsmgmt-ivssdifferentialsoftwaresnapshotmgmt2-migratediffareas
     */
    MigrateDiffAreas(pwszVolumeName, pwszDiffAreaVolumeName, pwszNewDiffAreaVolumeName) {
        pwszVolumeNameMarshal := pwszVolumeName is VarRef ? "ushort*" : "ptr"
        pwszDiffAreaVolumeNameMarshal := pwszDiffAreaVolumeName is VarRef ? "ushort*" : "ptr"
        pwszNewDiffAreaVolumeNameMarshal := pwszNewDiffAreaVolumeName is VarRef ? "ushort*" : "ptr"

        result := ComCall(10, this, pwszVolumeNameMarshal, pwszVolumeName, pwszDiffAreaVolumeNameMarshal, pwszDiffAreaVolumeName, pwszNewDiffAreaVolumeNameMarshal, pwszNewDiffAreaVolumeName, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<Integer>} pwszVolumeName 
     * @param {Pointer<Integer>} pwszDiffAreaVolumeName 
     * @param {Pointer<IVssAsync>} ppAsync 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/vsmgmt/nf-vsmgmt-ivssdifferentialsoftwaresnapshotmgmt2-querymigrationstatus
     */
    QueryMigrationStatus(pwszVolumeName, pwszDiffAreaVolumeName, ppAsync) {
        pwszVolumeNameMarshal := pwszVolumeName is VarRef ? "ushort*" : "ptr"
        pwszDiffAreaVolumeNameMarshal := pwszDiffAreaVolumeName is VarRef ? "ushort*" : "ptr"

        result := ComCall(11, this, pwszVolumeNameMarshal, pwszVolumeName, pwszDiffAreaVolumeNameMarshal, pwszDiffAreaVolumeName, "ptr*", ppAsync, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Guid} idSnapshot 
     * @param {Integer} priority 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/vsmgmt/nf-vsmgmt-ivssdifferentialsoftwaresnapshotmgmt2-setsnapshotpriority
     */
    SetSnapshotPriority(idSnapshot, priority) {
        result := ComCall(12, this, "ptr", idSnapshot, "char", priority, "HRESULT")
        return result
    }
}
