#Requires AutoHotkey v2.0.0 64-bit
#Include ..\..\..\..\Win32Struct.ahk

/**
 * Describes a keyboard input event in a console INPUT\_RECORD structure.
 * @remarks
 * Enhanced keys for the IBMÂ® 101- and 102-key keyboards are the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and direction keys in the clusters to the left of the keypad; and the divide (/) and ENTER keys in the keypad.
  * 
  * Keyboard input events are generated when any key, including control keys, is pressed or released. However, the ALT key when pressed and released without combining with another character, has special meaning to the system and is not passed through to the application. Also, the CTRL+C key combination is not passed through if the input handle is in processed mode (**ENABLE\_PROCESSED\_INPUT**).
 * @see https://learn.microsoft.com/windows/console/key-event-record-str
 * @namespace Windows.Win32.System.Console
 * @version v4.0.30319
 */
class KEY_EVENT_RECORD extends Win32Struct
{
    static sizeof => 20

    static packingSize => 4

    /**
     * If the key is pressed, this member is **TRUE**. Otherwise, this member is **FALSE** (the key is released).
     * @type {Integer}
     */
    bKeyDown {
        get => NumGet(this, 0, "int")
        set => NumPut("int", value, this, 0)
    }

    /**
     * The repeat count, which indicates that a key is being held down. For example, when a key is held down, you might get five events with this member equal to 1, one event with this member equal to 5, or multiple events with this member greater than or equal to 1.
     * @type {Integer}
     */
    wRepeatCount {
        get => NumGet(this, 4, "ushort")
        set => NumPut("ushort", value, this, 4)
    }

    /**
     * A [virtual-key code](/windows/win32/inputdev/virtual-key-codes) that identifies the given key in a device-independent manner.
     * @type {Integer}
     */
    wVirtualKeyCode {
        get => NumGet(this, 6, "ushort")
        set => NumPut("ushort", value, this, 6)
    }

    /**
     * The virtual scan code of the given key that represents the device-dependent value generated by the keyboard hardware.
     * @type {Integer}
     */
    wVirtualScanCode {
        get => NumGet(this, 8, "ushort")
        set => NumPut("ushort", value, this, 8)
    }

    /**
     * @type {Integer}
     */
    UnicodeChar {
        get => NumGet(this, 12, "char")
        set => NumPut("char", value, this, 12)
    }

    /**
     * @type {Integer}
     */
    AsciiChar {
        get => NumGet(this, 12, "char")
        set => NumPut("char", value, this, 12)
    }

    /**
     * The state of the control keys. This member can be one or more of the following values.
     * 
     * | Value | Meaning |
     * |-|-|
     * | **CAPSLOCK_ON** 0x0080 | The CAPS LOCK light is on. |
     * | **ENHANCED_KEY** 0x0100 | The key is enhanced. See [remarks](key-event-record-str.md#remarks). |
     * | **LEFT_ALT_PRESSED** 0x0002 | The left ALT key is pressed. |
     * | **LEFT_CTRL_PRESSED** 0x0008 | The left CTRL key is pressed. |
     * | **NUMLOCK_ON** 0x0020 | The NUM LOCK light is on. |
     * | **RIGHT_ALT_PRESSED** 0x0001 | The right ALT key is pressed. |
     * | **RIGHT_CTRL_PRESSED** 0x0004 | The right CTRL key is pressed. |
     * | **SCROLLLOCK_ON** 0x0040 | The SCROLL LOCK light is on. |
     * | **SHIFT_PRESSED** 0x0010 | The SHIFT key is pressed. |
     * @type {Integer}
     */
    dwControlKeyState {
        get => NumGet(this, 16, "uint")
        set => NumPut("uint", value, this, 16)
    }
}
