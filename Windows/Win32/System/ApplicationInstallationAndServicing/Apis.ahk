#Requires AutoHotkey v2.0.0 64-bit
#Include ..\..\..\..\Win32Handle.ahk
#Include .\MSIHANDLE.ahk
#Include ..\..\Foundation\HANDLE.ahk

/**
 * @namespace Windows.Win32.System.ApplicationInstallationAndServicing
 * @version v4.0.30319
 */
class ApplicationInstallationAndServicing {

;@region Constants

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_READONLY => 0

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_TRANSACT => 1

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_DIRECT => 2

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_CREATE => 3

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_CREATEDIRECT => 4

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_PATCHFILE => 16

    /**
     * @type {Integer (UInt32)}
     */
    static UIALL => 32768

    /**
     * @type {Integer (UInt32)}
     */
    static LOGTOKEN_TYPE_MASK => 3

    /**
     * @type {Integer (UInt32)}
     */
    static LOGTOKEN_UNSPECIFIED => 0

    /**
     * @type {Integer (UInt32)}
     */
    static LOGTOKEN_NO_LOG => 1

    /**
     * @type {Integer (UInt32)}
     */
    static LOGTOKEN_SETUPAPI_APPLOG => 2

    /**
     * @type {Integer (UInt32)}
     */
    static LOGTOKEN_SETUPAPI_DEVLOG => 3

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SETUPAPI_DEVLOG => 1

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SETUPAPI_CMDLINE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SETUPAPI_BITS => 3

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_ERROR => 1

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_WARNING => 2

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SYSTEM_STATE_CHANGE => 3

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SUMMARY => 4

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DETAILS => 5

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_VERBOSE => 6

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_VERY_VERBOSE => 7

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_RESERVED_FLAGS => 65520

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_TIMESTAMP => 65536

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DEPTH_INCR => 131072

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DEPTH_DECR => 262144

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_TAB_1 => 524288

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_FLUSH_FILE => 1048576

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DEVINST => 1

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_INF => 2

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_FILEQ => 4

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_COPYFILES => 8

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SIGVERIF => 32

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_BACKUP => 128

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_UI => 256

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_UTIL => 512

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_INFDB => 1024

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DRVSETUP => 4194304

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_POLICY => 8388608

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_NEWDEV => 16777216

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_UMPNPMGR => 33554432

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DRIVER_STORE => 67108864

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SETUP => 134217728

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_CMI => 268435456

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DEVMGR => 536870912

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_INSTALLER => 1073741824

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_VENDOR => 2147483648

    /**
     * @type {String}
     */
    static CLSID_EvalCom2 => "{6e5e1910-8053-4660-b795-6b612e29bc58}"

    /**
     * @type {Integer (UInt32)}
     */
    static _WIN32_MSM => 100

    /**
     * @type {String}
     */
    static LIBID_MsmMergeTypeLib => "{0adda82f-2c26-11d2-ad65-00a0c9af11a6}"

    /**
     * @type {String}
     */
    static CLSID_MsmMerge2 => "{f94985d5-29f9-4743-9805-99bc3f35b678}"

    /**
     * @type {Integer (UInt32)}
     */
    static _WIN32_MSI => 500

    /**
     * @type {Integer (UInt32)}
     */
    static MAX_GUID_CHARS => 38

    /**
     * @type {Integer (UInt32)}
     */
    static MAX_FEATURE_CHARS => 38

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PACKAGENAME => "PackageName"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_TRANSFORMS => "Transforms"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_LANGUAGE => "Language"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PRODUCTNAME => "ProductName"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_ASSIGNMENTTYPE => "AssignmentType"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTANCETYPE => "InstanceType"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_AUTHORIZED_LUA_APP => "AuthorizedLUAApp"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PACKAGECODE => "PackageCode"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_VERSION => "Version"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PRODUCTICON => "ProductIcon"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTALLEDPRODUCTNAME => "InstalledProductName"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_VERSIONSTRING => "VersionString"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_HELPLINK => "HelpLink"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_HELPTELEPHONE => "HelpTelephone"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTALLLOCATION => "InstallLocation"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTALLSOURCE => "InstallSource"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTALLDATE => "InstallDate"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PUBLISHER => "Publisher"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_LOCALPACKAGE => "LocalPackage"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_URLINFOABOUT => "URLInfoAbout"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_URLUPDATEINFO => "URLUpdateInfo"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_VERSIONMINOR => "VersionMinor"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_VERSIONMAJOR => "VersionMajor"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PRODUCTID => "ProductID"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_REGCOMPANY => "RegCompany"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_REGOWNER => "RegOwner"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTALLEDLANGUAGE => "InstalledLanguage"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_UNINSTALLABLE => "Uninstallable"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PRODUCTSTATE => "State"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PATCHSTATE => "State"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PATCHTYPE => "PatchType"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_LUAENABLED => "LUAEnabled"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_DISPLAYNAME => "DisplayName"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_MOREINFOURL => "MoreInfoURL"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_LASTUSEDSOURCE => "LastUsedSource"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_LASTUSEDTYPE => "LastUsedType"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_MEDIAPACKAGEPATH => "MediaPackagePath"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_DISKPROMPT => "DiskPrompt"

    /**
     * @type {Integer (UInt32)}
     */
    static MSI_INVALID_HASH_IS_FATAL => 1

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_ROLLBACK_DISABLED => 1653

    /**
     * @type {Integer (UInt32)}
     */
    static MSI_NULL_INTEGER => 2147483648

    /**
     * @type {Integer (Int32)}
     */
    static INSTALLMESSAGE_TYPEMASK => -16777216

    /**
     * @type {Integer (UInt32)}
     */
    static STREAM_FORMAT_COMPLIB_MODULE => 0

    /**
     * @type {Integer (UInt32)}
     */
    static STREAM_FORMAT_COMPLIB_MANIFEST => 1

    /**
     * @type {Integer (UInt32)}
     */
    static STREAM_FORMAT_WIN32_MODULE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static STREAM_FORMAT_WIN32_MANIFEST => 4

    /**
     * @type {Integer (UInt32)}
     */
    static IASSEMBLYCACHEITEM_COMMIT_FLAG_REFRESH => 1

    /**
     * @type {Integer (UInt32)}
     */
    static ASSEMBLYINFO_FLAG_INSTALLED => 1

    /**
     * @type {Integer (UInt32)}
     */
    static ASSEMBLYINFO_FLAG_PAYLOADRESIDENT => 2

    /**
     * @type {Integer (UInt32)}
     */
    static IASSEMBLYCACHEITEM_COMMIT_DISPOSITION_INSTALLED => 1

    /**
     * @type {Integer (UInt32)}
     */
    static IASSEMBLYCACHEITEM_COMMIT_DISPOSITION_REFRESHED => 2

    /**
     * @type {Integer (UInt32)}
     */
    static IASSEMBLYCACHEITEM_COMMIT_DISPOSITION_ALREADY_INSTALLED => 3

    /**
     * @type {String}
     */
    static FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID => "{8cedc215-ac4b-488b-93c0-a50a49cb2fb8}"

    /**
     * @type {String}
     */
    static FUSION_REFCOUNT_FILEPATH_GUID => "{b02f9d65-fb77-4f7a-afa5-b391309f11c9}"

    /**
     * @type {String}
     */
    static FUSION_REFCOUNT_OPAQUE_STRING_GUID => "{2ec93463-b0c3-45e1-8364-327e96aea856}"

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_DISABLE_NORMAL => 0

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_DISABLE_ASK => 1

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_DISABLE_ONCE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_DISABLE_SETUP => 3

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_DISABLE_NOPOPUPS => 4

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_SCAN_NORMAL => 0

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_SCAN_ALWAYS => 1

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_SCAN_ONCE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_SCAN_IMMEDIATE => 3

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_QUOTA_DEFAULT => 50

    /**
     * @type {String}
     */
    static SFC_IDLE_TRIGGER => "WFP_IDLE_TRIGGER"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTNAME => "ProductName"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTCODE => "ProductCode"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTVERSION => "ProductVersion"

    /**
     * @type {String}
     */
    static IPROPNAME_INSTALLLANGUAGE => "ProductLanguage"

    /**
     * @type {String}
     */
    static IPROPNAME_MANUFACTURER => "Manufacturer"

    /**
     * @type {String}
     */
    static IPROPNAME_UPGRADECODE => "UpgradeCode"

    /**
     * @type {String}
     */
    static IPROPNAME_PIDTEMPLATE => "PIDTemplate"

    /**
     * @type {String}
     */
    static IPROPNAME_DISKPROMPT => "DiskPrompt"

    /**
     * @type {String}
     */
    static IPROPNAME_LEFTUNIT => "LeftUnit"

    /**
     * @type {String}
     */
    static IPROPNAME_ADMIN_PROPERTIES => "AdminProperties"

    /**
     * @type {String}
     */
    static IPROPNAME_DEFAULTUIFONT => "DefaultUIFont"

    /**
     * @type {String}
     */
    static IPROPNAME_ALLOWEDPROPERTIES => "SecureCustomProperties"

    /**
     * @type {String}
     */
    static IPROPNAME_ENABLEUSERCONTROL => "EnableUserControl"

    /**
     * @type {String}
     */
    static IPROPNAME_HIDDEN_PROPERTIES => "MsiHiddenProperties"

    /**
     * @type {String}
     */
    static IPROPNAME_USERNAME => "USERNAME"

    /**
     * @type {String}
     */
    static IPROPNAME_COMPANYNAME => "COMPANYNAME"

    /**
     * @type {String}
     */
    static IPROPNAME_PIDKEY => "PIDKEY"

    /**
     * @type {String}
     */
    static IPROPNAME_PATCH => "PATCH"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIPATCHREMOVE => "MSIPATCHREMOVE"

    /**
     * @type {String}
     */
    static IPROPNAME_TARGETDIR => "TARGETDIR"

    /**
     * @type {String}
     */
    static IPROPNAME_ACTION => "ACTION"

    /**
     * @type {String}
     */
    static IPROPNAME_LIMITUI => "LIMITUI"

    /**
     * @type {String}
     */
    static IPROPNAME_LOGACTION => "LOGACTION"

    /**
     * @type {String}
     */
    static IPROPNAME_ALLUSERS => "ALLUSERS"

    /**
     * @type {String}
     */
    static IPROPNAME_INSTALLLEVEL => "INSTALLLEVEL"

    /**
     * @type {String}
     */
    static IPROPNAME_REBOOT => "REBOOT"

    /**
     * @type {String}
     */
    static IPROPNAME_REBOOTPROMPT => "REBOOTPROMPT"

    /**
     * @type {String}
     */
    static IPROPNAME_EXECUTEMODE => "EXECUTEMODE"

    /**
     * @type {String}
     */
    static IPROPVALUE_EXECUTEMODE_NONE => "NONE"

    /**
     * @type {String}
     */
    static IPROPVALUE_EXECUTEMODE_SCRIPT => "SCRIPT"

    /**
     * @type {String}
     */
    static IPROPNAME_EXECUTEACTION => "EXECUTEACTION"

    /**
     * @type {String}
     */
    static IPROPNAME_SOURCELIST => "SOURCELIST"

    /**
     * @type {String}
     */
    static IPROPNAME_ROOTDRIVE => "ROOTDRIVE"

    /**
     * @type {String}
     */
    static IPROPNAME_TRANSFORMS => "TRANSFORMS"

    /**
     * @type {String}
     */
    static IPROPNAME_TRANSFORMSATSOURCE => "TRANSFORMSATSOURCE"

    /**
     * @type {String}
     */
    static IPROPNAME_TRANSFORMSSECURE => "TRANSFORMSSECURE"

    /**
     * @type {String}
     */
    static IPROPNAME_SEQUENCE => "SEQUENCE"

    /**
     * @type {String}
     */
    static IPROPNAME_SHORTFILENAMES => "SHORTFILENAMES"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIMARYFOLDER => "PRIMARYFOLDER"

    /**
     * @type {String}
     */
    static IPROPNAME_AFTERREBOOT => "AFTERREBOOT"

    /**
     * @type {String}
     */
    static IPROPNAME_NOCOMPANYNAME => "NOCOMPANYNAME"

    /**
     * @type {String}
     */
    static IPROPNAME_NOUSERNAME => "NOUSERNAME"

    /**
     * @type {String}
     */
    static IPROPNAME_DISABLEROLLBACK => "DISABLEROLLBACK"

    /**
     * @type {String}
     */
    static IPROPNAME_AVAILABLEFREEREG => "AVAILABLEFREEREG"

    /**
     * @type {String}
     */
    static IPROPNAME_DISABLEADVTSHORTCUTS => "DISABLEADVTSHORTCUTS"

    /**
     * @type {String}
     */
    static IPROPNAME_PATCHNEWPACKAGECODE => "PATCHNEWPACKAGECODE"

    /**
     * @type {String}
     */
    static IPROPNAME_PATCHNEWSUMMARYSUBJECT => "PATCHNEWSUMMARYSUBJECT"

    /**
     * @type {String}
     */
    static IPROPNAME_PATCHNEWSUMMARYCOMMENTS => "PATCHNEWSUMMARYCOMMENTS"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTLANGUAGE => "PRODUCTLANGUAGE"

    /**
     * @type {String}
     */
    static IPROPNAME_CHECKCRCS => "MSICHECKCRCS"

    /**
     * @type {String}
     */
    static IPROPNAME_MSINODISABLEMEDIA => "MSINODISABLEMEDIA"

    /**
     * @type {String}
     */
    static IPROPNAME_CARRYINGNDP => "CARRYINGNDP"

    /**
     * @type {String}
     */
    static IPROPVALUE__CARRYINGNDP_URTREINSTALL => "URTREINSTALL"

    /**
     * @type {String}
     */
    static IPROPVALUE__CARRYINGNDP_URTUPGRADE => "URTUPGRADE"

    /**
     * @type {String}
     */
    static IPROPNAME_ENFORCE_UPGRADE_COMPONENT_RULES => "MSIENFORCEUPGRADECOMPONENTRULES"

    /**
     * @type {String}
     */
    static IPROPNAME_MSINEWINSTANCE => "MSINEWINSTANCE"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIINSTANCEGUID => "MSIINSTANCEGUID"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIPACKAGEDOWNLOADLOCALCOPY => "MSIPACKAGEDOWNLOADLOCALCOPY"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIPATCHDOWNLOADLOCALCOPY => "MSIPATCHDOWNLOADLOCALCOPY"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIDISABLELUAPATCHING => "MSIDISABLELUAPATCHING"

    /**
     * @type {String}
     */
    static IPROPNAME_MSILOGGINGMODE => "MsiLogging"

    /**
     * @type {String}
     */
    static IPROPNAME_MSILOGFILELOCATION => "MsiLogFileLocation"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_RM_CONTROL => "MSIRESTARTMANAGERCONTROL"

    /**
     * @type {String}
     */
    static IPROPVALUE_MSI_RM_CONTROL_DISABLE => "Disable"

    /**
     * @type {String}
     */
    static IPROPVALUE_MSI_RM_CONTROL_DISABLESHUTDOWN => "DisableShutdown"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_RM_SESSION_KEY => "MsiRestartManagerSessionKey"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_REBOOT_PENDING => "MsiSystemRebootPending"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_RM_SHUTDOWN => "MSIRMSHUTDOWN"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_RM_DISABLE_RESTART => "MSIDISABLERMRESTART"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_UAC_DEPLOYMENT_COMPLIANT => "MSIDEPLOYMENTCOMPLIANT"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_USE_REAL_ADMIN_DETECTION => "MSIUSEREALADMINDETECTION"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_UNINSTALL_SUPERSEDED_COMPONENTS => "MSIUNINSTALLSUPERSEDEDCOMPONENTS"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIDISABLEEEUI => "MSIDISABLEEEUI"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_FASTINSTALL => "MSIFASTINSTALL"

    /**
     * @type {String}
     */
    static IPROPNAME_INSTALLPERUSER => "MSIINSTALLPERUSER"

    /**
     * @type {String}
     */
    static IPROPNAME_INTERNALINSTALLEDPERUSER => "MSIINTERNALINSTALLEDPERUSER"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPAUTHORIZEDCDFPREFIX => "ARPAUTHORIZEDCDFPREFIX"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPCOMMENTS => "ARPCOMMENTS"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPCONTACT => "ARPCONTACT"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPHELPLINK => "ARPHELPLINK"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPHELPTELEPHONE => "ARPHELPTELEPHONE"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPINSTALLLOCATION => "ARPINSTALLLOCATION"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPNOMODIFY => "ARPNOMODIFY"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPNOREMOVE => "ARPNOREMOVE"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPNOREPAIR => "ARPNOREPAIR"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPREADME => "ARPREADME"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSIZE => "ARPSIZE"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSYSTEMCOMPONENT => "ARPSYSTEMCOMPONENT"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPURLINFOABOUT => "ARPURLINFOABOUT"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPURLUPDATEINFO => "ARPURLUPDATEINFO"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPPRODUCTICON => "ARPPRODUCTICON"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSETTINGSIDENTIFIER => "MSIARPSETTINGSIDENTIFIER"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSHIMFLAGS => "SHIMFLAGS"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSHIMVERSIONNT => "SHIMVERSIONNT"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSHIMSERVICEPACKLEVEL => "SHIMSERVICEPACKLEVEL"

    /**
     * @type {String}
     */
    static IPROPNAME_INSTALLED => "Installed"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTSTATE => "ProductState"

    /**
     * @type {String}
     */
    static IPROPNAME_PRESELECTED => "Preselected"

    /**
     * @type {String}
     */
    static IPROPNAME_RESUME => "RESUME"

    /**
     * @type {String}
     */
    static IPROPNAME_UPDATESTARTED => "UpdateStarted"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTID => "ProductID"

    /**
     * @type {String}
     */
    static IPROPNAME_OUTOFDISKSPACE => "OutOfDiskSpace"

    /**
     * @type {String}
     */
    static IPROPNAME_OUTOFNORBDISKSPACE => "OutOfNoRbDiskSpace"

    /**
     * @type {String}
     */
    static IPROPNAME_COSTINGCOMPLETE => "CostingComplete"

    /**
     * @type {String}
     */
    static IPROPNAME_SOURCEDIR => "SourceDir"

    /**
     * @type {String}
     */
    static IPROPNAME_REPLACEDINUSEFILES => "ReplacedInUseFiles"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIMARYFOLDER_PATH => "PrimaryVolumePath"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIMARYFOLDER_SPACEAVAILABLE => "PrimaryVolumeSpaceAvailable"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIMARYFOLDER_SPACEREQUIRED => "PrimaryVolumeSpaceRequired"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIMARYFOLDER_SPACEREMAINING => "PrimaryVolumeSpaceRemaining"

    /**
     * @type {String}
     */
    static IPROPNAME_ISADMINPACKAGE => "IsAdminPackage"

    /**
     * @type {String}
     */
    static IPROPNAME_ROLLBACKDISABLED => "RollbackDisabled"

    /**
     * @type {String}
     */
    static IPROPNAME_RESTRICTEDUSERCONTROL => "RestrictedUserControl"

    /**
     * @type {String}
     */
    static IPROPNAME_SOURCERESONLY => "MsiUISourceResOnly"

    /**
     * @type {String}
     */
    static IPROPNAME_HIDECANCEL => "MsiUIHideCancel"

    /**
     * @type {String}
     */
    static IPROPNAME_PROGRESSONLY => "MsiUIProgressOnly"

    /**
     * @type {String}
     */
    static IPROPNAME_UACONLY => "MsiUIUACOnly"

    /**
     * @type {String}
     */
    static IPROPNAME_TIME => "Time"

    /**
     * @type {String}
     */
    static IPROPNAME_DATE => "Date"

    /**
     * @type {String}
     */
    static IPROPNAME_DATETIME => "DateTime"

    /**
     * @type {String}
     */
    static IPROPNAME_ARM => "Arm"

    /**
     * @type {String}
     */
    static IPROPNAME_ARM64 => "Arm64"

    /**
     * @type {String}
     */
    static IPROPNAME_INTEL => "Intel"

    /**
     * @type {String}
     */
    static IPROPNAME_TEMPLATE_AMD64 => "AMD64"

    /**
     * @type {String}
     */
    static IPROPNAME_TEMPLATE_X64 => "x64"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIAMD64 => "MsiAMD64"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIX64 => "Msix64"

    /**
     * @type {String}
     */
    static IPROPNAME_INTEL64 => "Intel64"

    /**
     * @type {String}
     */
    static IPROPNAME_IA64 => "IA64"

    /**
     * @type {String}
     */
    static IPROPNAME_TEXTHEIGHT => "TextHeight"

    /**
     * @type {String}
     */
    static IPROPNAME_TEXTINTERNALLEADING => "TextInternalLeading"

    /**
     * @type {String}
     */
    static IPROPNAME_SCREENX => "ScreenX"

    /**
     * @type {String}
     */
    static IPROPNAME_SCREENY => "ScreenY"

    /**
     * @type {String}
     */
    static IPROPNAME_CAPTIONHEIGHT => "CaptionHeight"

    /**
     * @type {String}
     */
    static IPROPNAME_BORDERTOP => "BorderTop"

    /**
     * @type {String}
     */
    static IPROPNAME_BORDERSIDE => "BorderSide"

    /**
     * @type {String}
     */
    static IPROPNAME_COLORBITS => "ColorBits"

    /**
     * @type {String}
     */
    static IPROPNAME_PHYSICALMEMORY => "PhysicalMemory"

    /**
     * @type {String}
     */
    static IPROPNAME_VIRTUALMEMORY => "VirtualMemory"

    /**
     * @type {String}
     */
    static IPROPNAME_TEXTHEIGHT_CORRECTION => "TextHeightCorrection"

    /**
     * @type {String}
     */
    static IPROPNAME_MSITABLETPC => "MsiTabletPC"

    /**
     * @type {String}
     */
    static IPROPNAME_VERSIONNT => "VersionNT"

    /**
     * @type {String}
     */
    static IPROPNAME_VERSION9X => "Version9X"

    /**
     * @type {String}
     */
    static IPROPNAME_VERSIONNT64 => "VersionNT64"

    /**
     * @type {String}
     */
    static IPROPNAME_WINDOWSBUILD => "WindowsBuild"

    /**
     * @type {String}
     */
    static IPROPNAME_SERVICEPACKLEVEL => "ServicePackLevel"

    /**
     * @type {String}
     */
    static IPROPNAME_SERVICEPACKLEVELMINOR => "ServicePackLevelMinor"

    /**
     * @type {String}
     */
    static IPROPNAME_SHAREDWINDOWS => "SharedWindows"

    /**
     * @type {String}
     */
    static IPROPNAME_COMPUTERNAME => "ComputerName"

    /**
     * @type {String}
     */
    static IPROPNAME_SHELLADVTSUPPORT => "ShellAdvtSupport"

    /**
     * @type {String}
     */
    static IPROPNAME_OLEADVTSUPPORT => "OLEAdvtSupport"

    /**
     * @type {String}
     */
    static IPROPNAME_SYSTEMLANGUAGEID => "SystemLanguageID"

    /**
     * @type {String}
     */
    static IPROPNAME_TTCSUPPORT => "TTCSupport"

    /**
     * @type {String}
     */
    static IPROPNAME_TERMSERVER => "TerminalServer"

    /**
     * @type {String}
     */
    static IPROPNAME_REMOTEADMINTS => "RemoteAdminTS"

    /**
     * @type {String}
     */
    static IPROPNAME_REDIRECTEDDLLSUPPORT => "RedirectedDllSupport"

    /**
     * @type {String}
     */
    static IPROPNAME_NTPRODUCTTYPE => "MsiNTProductType"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITEBACKOFFICE => "MsiNTSuiteBackOffice"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITEDATACENTER => "MsiNTSuiteDataCenter"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITEENTERPRISE => "MsiNTSuiteEnterprise"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITESMALLBUSINESS => "MsiNTSuiteSmallBusiness"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITESMALLBUSINESSRESTRICTED => "MsiNTSuiteSmallBusinessRestricted"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITEPERSONAL => "MsiNTSuitePersonal"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITEWEBSERVER => "MsiNTSuiteWebServer"

    /**
     * @type {String}
     */
    static IPROPNAME_NETASSEMBLYSUPPORT => "MsiNetAssemblySupport"

    /**
     * @type {String}
     */
    static IPROPNAME_WIN32ASSEMBLYSUPPORT => "MsiWin32AssemblySupport"

    /**
     * @type {String}
     */
    static IPROPNAME_LOGONUSER => "LogonUser"

    /**
     * @type {String}
     */
    static IPROPNAME_USERSID => "UserSID"

    /**
     * @type {String}
     */
    static IPROPNAME_ADMINUSER => "AdminUser"

    /**
     * @type {String}
     */
    static IPROPNAME_USERLANGUAGEID => "UserLanguageID"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIVILEGED => "Privileged"

    /**
     * @type {String}
     */
    static IPROPNAME_RUNNINGELEVATED => "MsiRunningElevated"

    /**
     * @type {String}
     */
    static IPROPNAME_TRUEADMINUSER => "MsiTrueAdminUser"

    /**
     * @type {String}
     */
    static IPROPNAME_WINDOWS_FOLDER => "WindowsFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_SYSTEM_FOLDER => "SystemFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_SYSTEM16_FOLDER => "System16Folder"

    /**
     * @type {String}
     */
    static IPROPNAME_WINDOWS_VOLUME => "WindowsVolume"

    /**
     * @type {String}
     */
    static IPROPNAME_TEMP_FOLDER => "TempFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_PROGRAMFILES_FOLDER => "ProgramFilesFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_COMMONFILES_FOLDER => "CommonFilesFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_SYSTEM64_FOLDER => "System64Folder"

    /**
     * @type {String}
     */
    static IPROPNAME_PROGRAMFILES64_FOLDER => "ProgramFiles64Folder"

    /**
     * @type {String}
     */
    static IPROPNAME_COMMONFILES64_FOLDER => "CommonFiles64Folder"

    /**
     * @type {String}
     */
    static IPROPNAME_STARTMENU_FOLDER => "StartMenuFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_PROGRAMMENU_FOLDER => "ProgramMenuFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_STARTUP_FOLDER => "StartupFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_NETHOOD_FOLDER => "NetHoodFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_PERSONAL_FOLDER => "PersonalFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_SENDTO_FOLDER => "SendToFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_DESKTOP_FOLDER => "DesktopFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_TEMPLATE_FOLDER => "TemplateFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_FONTS_FOLDER => "FontsFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_FAVORITES_FOLDER => "FavoritesFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_RECENT_FOLDER => "RecentFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_APPDATA_FOLDER => "AppDataFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_PRINTHOOD_FOLDER => "PrintHoodFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_ADMINTOOLS_FOLDER => "AdminToolsFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_COMMONAPPDATA_FOLDER => "CommonAppDataFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_LOCALAPPDATA_FOLDER => "LocalAppDataFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_MYPICTURES_FOLDER => "MyPicturesFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_FEATUREADDLOCAL => "ADDLOCAL"

    /**
     * @type {String}
     */
    static IPROPNAME_FEATUREADDSOURCE => "ADDSOURCE"

    /**
     * @type {String}
     */
    static IPROPNAME_FEATUREADDDEFAULT => "ADDDEFAULT"

    /**
     * @type {String}
     */
    static IPROPNAME_FEATUREREMOVE => "REMOVE"

    /**
     * @type {String}
     */
    static IPROPNAME_FEATUREADVERTISE => "ADVERTISE"

    /**
     * @type {String}
     */
    static IPROPVALUE_FEATURE_ALL => "ALL"

    /**
     * @type {String}
     */
    static IPROPNAME_COMPONENTADDLOCAL => "COMPADDLOCAL"

    /**
     * @type {String}
     */
    static IPROPNAME_COMPONENTADDSOURCE => "COMPADDSOURCE"

    /**
     * @type {String}
     */
    static IPROPNAME_COMPONENTADDDEFAULT => "COMPADDDEFAULT"

    /**
     * @type {String}
     */
    static IPROPNAME_FILEADDLOCAL => "FILEADDLOCAL"

    /**
     * @type {String}
     */
    static IPROPNAME_FILEADDSOURCE => "FILEADDSOURCE"

    /**
     * @type {String}
     */
    static IPROPNAME_FILEADDDEFAULT => "FILEADDDEFAULT"

    /**
     * @type {String}
     */
    static IPROPNAME_REINSTALL => "REINSTALL"

    /**
     * @type {String}
     */
    static IPROPNAME_REINSTALLMODE => "REINSTALLMODE"

    /**
     * @type {String}
     */
    static IPROPNAME_PROMPTROLLBACKCOST => "PROMPTROLLBACKCOST"

    /**
     * @type {String}
     */
    static IPROPVALUE_RBCOST_PROMPT => "P"

    /**
     * @type {String}
     */
    static IPROPVALUE_RBCOST_SILENT => "D"

    /**
     * @type {String}
     */
    static IPROPVALUE_RBCOST_FAIL => "F"

    /**
     * @type {String}
     */
    static IPROPNAME_CUSTOMACTIONDATA => "CustomActionData"

    /**
     * @type {String}
     */
    static IACTIONNAME_INSTALL => "INSTALL"

    /**
     * @type {String}
     */
    static IACTIONNAME_ADVERTISE => "ADVERTISE"

    /**
     * @type {String}
     */
    static IACTIONNAME_ADMIN => "ADMIN"

    /**
     * @type {String}
     */
    static IACTIONNAME_SEQUENCE => "SEQUENCE"

    /**
     * @type {String}
     */
    static IACTIONNAME_COLLECTUSERINFO => "CollectUserInfo"

    /**
     * @type {String}
     */
    static IACTIONNAME_FIRSTRUN => "FirstRun"

    /**
     * @type {Integer (UInt32)}
     */
    static PID_TITLE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static PID_SUBJECT => 3

    /**
     * @type {Integer (UInt32)}
     */
    static PID_AUTHOR => 4

    /**
     * @type {Integer (UInt32)}
     */
    static PID_KEYWORDS => 5

    /**
     * @type {Integer (UInt32)}
     */
    static PID_COMMENTS => 6

    /**
     * @type {Integer (UInt32)}
     */
    static PID_TEMPLATE => 7

    /**
     * @type {Integer (UInt32)}
     */
    static PID_LASTAUTHOR => 8

    /**
     * @type {Integer (UInt32)}
     */
    static PID_REVNUMBER => 9

    /**
     * @type {Integer (UInt32)}
     */
    static PID_EDITTIME => 10

    /**
     * @type {Integer (UInt32)}
     */
    static PID_LASTPRINTED => 11

    /**
     * @type {Integer (UInt32)}
     */
    static PID_CREATE_DTM => 12

    /**
     * @type {Integer (UInt32)}
     */
    static PID_LASTSAVE_DTM => 13

    /**
     * @type {Integer (UInt32)}
     */
    static PID_PAGECOUNT => 14

    /**
     * @type {Integer (UInt32)}
     */
    static PID_WORDCOUNT => 15

    /**
     * @type {Integer (UInt32)}
     */
    static PID_CHARCOUNT => 16

    /**
     * @type {Integer (UInt32)}
     */
    static PID_THUMBNAIL => 17

    /**
     * @type {Integer (UInt32)}
     */
    static PID_APPNAME => 18

    /**
     * @type {Integer (UInt32)}
     */
    static PID_MSIVERSION => 14

    /**
     * @type {Integer (UInt32)}
     */
    static PID_MSISOURCE => 15

    /**
     * @type {Integer (UInt32)}
     */
    static PID_MSIRESTRICT => 16

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_USE_BEST => 0

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_USE_LZX_BEST => 3

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_USE_LZX_A => 1

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_USE_LZX_B => 2

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_USE_LZX_LARGE => 4

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_BINDFIX => 65536

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_LOCKFIX => 131072

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_REBASE => 262144

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_FAIL_IF_SAME_FILE => 524288

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_FAIL_IF_BIGGER => 1048576

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_CHECKSUM => 2097152

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_RESTIMEFIX => 4194304

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_TIMESTAMP => 8388608

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_SIGNATURE_MD5 => 16777216

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_INTERLEAVE_FILES => 1073741824

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_RESERVED1 => 2147483648

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_VALID_FLAGS => 3237937159

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_SYMBOL_NO_IMAGEHLP => 1

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_SYMBOL_NO_FAILURES => 2

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_SYMBOL_UNDECORATED_TOO => 4

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_SYMBOL_RESERVED1 => 2147483648

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_TRANSFORM_PE_RESOURCE_2 => 256

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_TRANSFORM_PE_IRELOC_2 => 512

    /**
     * @type {Integer (UInt32)}
     */
    static APPLY_OPTION_FAIL_IF_EXACT => 1

    /**
     * @type {Integer (UInt32)}
     */
    static APPLY_OPTION_FAIL_IF_CLOSE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static APPLY_OPTION_TEST_ONLY => 4

    /**
     * @type {Integer (UInt32)}
     */
    static APPLY_OPTION_VALID_FLAGS => 7

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_ENCODE_FAILURE => 3222155521

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_INVALID_OPTIONS => 3222155522

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_SAME_FILE => 3222155523

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_RETAIN_RANGES_DIFFER => 3222155524

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_BIGGER_THAN_COMPRESSED => 3222155525

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_IMAGEHLP_FAILURE => 3222155526

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_DECODE_FAILURE => 3222159617

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_CORRUPT => 3222159618

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_NEWER_FORMAT => 3222159619

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_WRONG_FILE => 3222159620

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_NOT_NECESSARY => 3222159621

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_NOT_AVAILABLE => 3222159622

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BASE => 3222163713

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_PCP_DOESNT_EXIST => 3222163713

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_PCP_BAD_FORMAT => 3222163714

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_CREATE_TEMP_FOLDER => 3222163715

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISSING_PATCH_PATH => 3222163716

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_OVERWRITE_PATCH => 3222163717

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_CREATE_PATCH_FILE => 3222163718

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISSING_PATCH_GUID => 3222163719

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_PATCH_GUID => 3222163720

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_GUIDS_TO_REPLACE => 3222163721

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_PRODUCT_CODE_LIST => 3222163722

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_NO_UPGRADED_IMAGES_TO_PATCH => 3222163723

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_API_PATCHING_SYMBOL_FLAGS => 3222163725

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OODS_COPYING_MSI => 3222163726

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_NAME_TOO_LONG => 3222163727

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_UPGRADED_IMAGE_NAME => 3222163728

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUP_UPGRADED_IMAGE_NAME => 3222163729

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATH_TOO_LONG => 3222163730

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATH_EMPTY => 3222163731

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATH_NOT_EXIST => 3222163732

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATH_NOT_MSI => 3222163733

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_COMPRESSED => 3222163734

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_NAME_TOO_LONG => 3222163735

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_IMAGE_NAME => 3222163736

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUP_TARGET_IMAGE_NAME => 3222163737

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_PATH_TOO_LONG => 3222163738

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_PATH_EMPTY => 3222163739

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_PATH_NOT_EXIST => 3222163740

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_PATH_NOT_MSI => 3222163741

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_COMPRESSED => 3222163742

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_BAD_PROD_VALIDATE => 3222163743

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_BAD_PROD_CODE_VAL => 3222163744

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_MISSING_SRC_FILES => 3222163745

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_MISSING_SRC_FILES => 3222163746

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_IMAGE_FAMILY_NAME_TOO_LONG => 3222163747

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_IMAGE_FAMILY_NAME => 3222163748

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUP_IMAGE_FAMILY_NAME => 3222163749

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_IMAGE_FAMILY_SRC_PROP => 3222163750

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEDATA_LONG_FILE_TABLE_KEY => 3222163751

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEDATA_BLANK_FILE_TABLE_KEY => 3222163752

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEDATA_MISSING_FILE_TABLE_KEY => 3222163753

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_LONG_FILE_TABLE_KEY => 3222163754

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BLANK_FILE_TABLE_KEY => 3222163755

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BAD_FAMILY_FIELD => 3222163756

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_LONG_PATH_TO_FILE => 3222163757

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BLANK_PATH_TO_FILE => 3222163758

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_MISSING_FILE => 3222163759

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_FILE_SEQUENCE_START => 3222163770

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_COPY_FILE_TO_TEMP_FOLDER => 3222163771

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_CREATE_ONE_PATCH_FILE => 3222163772

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_IMAGE_FAMILY_DISKID => 3222163773

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_IMAGE_FAMILY_FILESEQSTART => 3222163774

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_UPGRADED_IMAGE_FAMILY => 3222163775

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_IMAGE_UPGRADED => 3222163776

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUP_TARGET_IMAGE_PACKCODE => 3222163777

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEDATA_BAD_UPGRADED_FIELD => 3222163778

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISMATCHED_PRODUCT_CODES => 3222163779

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISMATCHED_PRODUCT_VERSIONS => 3222163780

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANNOT_WRITE_DDF => 3222163781

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANNOT_RUN_MAKECAB => 3222163782

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_WRITE_SUMMARY_PROPERTIES => 3222163787

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_LONG_FILE_TABLE_KEY => 3222163788

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_BLANK_FILE_TABLE_KEY => 3222163789

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_MISSING_FILE_TABLE_KEY => 3222163790

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_BAD_TARGET_FIELD => 3222163791

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATCH_PATH_TOO_LONG => 3222163792

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATCH_PATH_NOT_EXIST => 3222163793

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATCH_PATH_NOT_MSI => 3222163794

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUP_UPGRADED_IMAGE_PACKCODE => 3222163795

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEIGNORE_BAD_UPGRADED_FIELD => 3222163796

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEIGNORE_LONG_FILE_TABLE_KEY => 3222163797

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEIGNORE_BLANK_FILE_TABLE_KEY => 3222163798

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEIGNORE_BAD_FILE_TABLE_KEY => 3222163799

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_NAME_TOO_LONG => 3222163800

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_FAMILY_RANGE_NAME => 3222163801

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_LONG_FILE_TABLE_KEY => 3222163802

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_BLANK_FILE_TABLE_KEY => 3222163803

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_LONG_RETAIN_OFFSETS => 3222163804

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_BLANK_RETAIN_OFFSETS => 3222163805

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_BAD_RETAIN_OFFSETS => 3222163806

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_LONG_RETAIN_LENGTHS => 3222163807

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_BLANK_RETAIN_LENGTHS => 3222163808

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_BAD_RETAIN_LENGTHS => 3222163809

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_COUNT_MISMATCH => 3222163810

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_LONG_IGNORE_OFFSETS => 3222163811

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BAD_IGNORE_OFFSETS => 3222163812

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_LONG_IGNORE_LENGTHS => 3222163813

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BAD_IGNORE_LENGTHS => 3222163814

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_IGNORE_COUNT_MISMATCH => 3222163815

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_LONG_RETAIN_OFFSETS => 3222163816

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BAD_RETAIN_OFFSETS => 3222163817

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_LONG_IGNORE_OFFSETS => 3222163819

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_BAD_IGNORE_OFFSETS => 3222163820

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_LONG_IGNORE_LENGTHS => 3222163821

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_BAD_IGNORE_LENGTHS => 3222163822

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_IGNORE_COUNT_MISMATCH => 3222163823

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_LONG_RETAIN_OFFSETS => 3222163824

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_BAD_RETAIN_OFFSETS => 3222163825

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_GENERATE_TRANSFORM => 3222163827

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_CREATE_SUMMARY_INFO => 3222163828

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_GENERATE_TRANSFORM_POUND => 3222163829

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_CREATE_SUMMARY_INFO_POUND => 3222163830

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_UPGRADED_IMAGE_PRODUCT_CODE => 3222163831

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_UPGRADED_IMAGE_PRODUCT_VERSION => 3222163832

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_UPGRADED_IMAGE_UPGRADE_CODE => 3222163833

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_IMAGE_PRODUCT_CODE => 3222163834

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_IMAGE_PRODUCT_VERSION => 3222163835

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_IMAGE_UPGRADE_CODE => 3222163836

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MATCHED_PRODUCT_VERSIONS => 3222163837

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OBSOLETION_WITH_SEQUENCE_DATA => 3222163838

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OBSOLETION_WITH_MSI30 => 3222163839

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OBSOLETION_WITH_PATCHSEQUENCE => 3222163840

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANNOT_CREATE_TABLE => 3222163841

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_GENERATE_SEQUENCEINFO_MAJORUPGD => 3222163842

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MAJOR_UPGD_WITHOUT_SEQUENCING => 3222163843

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_PRODUCTVERSION_VALIDATION => 3222163844

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TRANSFORMSET => 3222163845

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TGT_UPD_IMAGES => 3222163846

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_SUPERCEDENCE => 3222163847

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_SEQUENCE => 3222163848

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET => 3222163849

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_NULL_PATCHFAMILY => 3222163850

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_NULL_SEQUENCE_NUMBER => 3222163851

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_VERSION_STRING => 3222163852

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_MAJOR_VERSION => 3222163853

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_SEQUENCING_BAD_TARGET => 3222163854

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_PATCHMETADATA_PROP_NOT_SET => 3222163855

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PATCHMETADATA_PROP => 3222163856

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_SUPERCEDENCE => 3222163857

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUPLICATE_SEQUENCE_RECORD => 3222163858

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_WRONG_PATCHMETADATA_STRD_PROP => 3222163859

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PARAMETER => 3222163860

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CREATEFILE_LOG_FAILED => 3222163861

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_LOG_LEVEL => 3222163862

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_UI_LEVEL => 3222163863

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_ERROR_WRITING_TO_LOG => 3222163864

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OUT_OF_MEMORY => 3222163865

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UNKNOWN_ERROR => 3222163866

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UNKNOWN_INFO => 3222163867

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UNKNOWN_WARN => 3222163868

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OPEN_VIEW => 3222163869

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXECUTE_VIEW => 3222163870

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_VIEW_FETCH => 3222163871

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAILED_EXPAND_PATH => 3222163872

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INTERNAL_ERROR => 3222163969

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_PROPERTY => 3222163970

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_TARGETIMAGES => 3222163971

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_LAX_VALIDATION_FLAGS => 3222163972

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAILED_CREATE_TRANSFORM => 3222163973

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_DELETE_TEMP_FOLDER => 3222163974

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISSING_DIRECTORY_TABLE => 3222163975

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_SUPERSEDENCE_VALUE => 3222163976

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PATCH_TYPE_SEQUENCING => 3222163977

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_READ_FILE => 3222163978

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_WRONG_PRODUCT_VERSION_COMP => 3222163979

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_UPGRADEDFILESTOIGNORE => 3222163980

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_UPGRADEDIMAGES => 3222163981

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_EXTERNALFILES => 3222163982

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_IMAGEFAMILIES => 3222163983

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_PATCHSEQUENCE => 3222163984

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_TARGETFILES_OPTIONALDATA => 3222163985

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_UPGRADEDFILES_OPTIONALDATA => 3222163986

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISSING_PATCHMETADATA => 3222163987

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_IMAGE_PATH_NOT_EXIST => 3222163988

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_RANGE_ELEMENT => 3222163989

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_MAJOR_VERSION => 3222163990

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_PROPERTIES => 3222163991

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_FAMILYFILERANGES => 3222163992

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_BASE => 3222229249

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PASSED_MAIN_CONTROL => 3222229249

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_I_VALIDATION => 3222229250

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_I => 3222229251

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PCP_PATH => 3222229252

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_TEMP_DIR => 3222229253

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_SET_OPTIONS => 3222229254

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PROPERTY => 3222229255

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_II => 3222229256

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_III => 3222229257

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_IV => 3222229258

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_V => 3222229259

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_GENERATING_METADATA => 3222229265

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_TEMP_DIR_CLEANUP => 3222229266

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PATCHCACHE_FILEINFO_FAILURE => 3222229267

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PATCHCACHE_PCI_READFAILURE => 3222229268

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PATCHCACHE_PCI_WRITEFAILURE => 3222229269

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_USING_USER_MSI_FOR_PATCH_TABLES => 3222229270

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_SUCCESSFUL_PATCH_CREATION => 3222229271

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_BASE => 3222294785

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_MAJOR_UPGRADE_PATCH => 3222294785

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_SEQUENCE_DATA_GENERATION_DISABLED => 3222294786

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_SEQUENCE_DATA_SUPERSEDENCE_IGNORED => 3222294787

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_IMPROPER_TRANSFORM_VALIDATION => 3222294788

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_PCW_MISMATCHED_PRODUCT_CODES => 3222294789

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_PCW_MISMATCHED_PRODUCT_VERSIONS => 3222294790

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_INVALID_TRANSFORM_VALIDATION => 3222294791

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_BAD_MAJOR_VERSION => 3222294792

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_FILE_VERSION_DOWNREV => 3222294793

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_EQUAL_FILE_VERSION => 3222294794

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_PATCHPROPERTYNOTSET => 3222294795

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_OBSOLETION_WITH_SEQUENCE_DATA => 3222294802

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_OBSOLETION_WITH_MSI30 => 3222294801

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_OBSOLETION_WITH_PATCHSEQUENCE => 3222294803

    /**
     * @type {Integer (UInt32)}
     */
    static DELTA_MAX_HASH_SIZE => 32

    /**
     * @type {Integer (Int32)}
     */
    static cchMaxInteger => 12

    /**
     * @type {Integer (UInt32)}
     */
    static LOGNONE => 0

    /**
     * @type {Integer (UInt32)}
     */
    static LOGINFO => 1

    /**
     * @type {Integer (UInt32)}
     */
    static LOGWARN => 2

    /**
     * @type {Integer (UInt32)}
     */
    static LOGERR => 4

    /**
     * @type {Integer (UInt32)}
     */
    static LOGPERFMESSAGES => 8

    /**
     * @type {Integer (UInt32)}
     */
    static LOGALL => 15

    /**
     * @type {Integer (UInt32)}
     */
    static UINONE => 0

    /**
     * @type {Integer (UInt32)}
     */
    static UILOGBITS => 15

    /**
     * @type {Integer (UInt32)}
     */
    static DEFAULT_MINIMUM_REQUIRED_MSI_VERSION => 100

    /**
     * @type {Integer (UInt32)}
     */
    static DEFAULT_FILE_SEQUENCE_START => 2

    /**
     * @type {Integer (UInt32)}
     */
    static DEFAULT_DISK_ID => 2
;@endregion Constants

;@region Methods
    /**
     * The MsiCloseHandle function closes an open installation handle.
     * @param {MSIHANDLE} hAny Specifies any open installation handle.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid handle was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiclosehandle
     * @since windows8.0
     */
    static MsiCloseHandle(hAny) {
        hAny := hAny is Win32Handle ? NumGet(hAny, "ptr") : hAny

        result := DllCall("msi.dll\MsiCloseHandle", "ptr", hAny, "uint")
        return result
    }

    /**
     * The MsiCloseAllHandles function closes all open installation handles allocated by the current thread. This is a diagnostic function and should not be used for cleanup.
     * @returns {Integer} This function returns 0 if all handles are closed. Otherwise, the function returns the number of handles open prior to its call.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msicloseallhandles
     * @since windows8.0
     */
    static MsiCloseAllHandles() {
        result := DllCall("msi.dll\MsiCloseAllHandles", "uint")
        return result
    }

    /**
     * The MsiSetInternalUI function enables the installer's internal user interface. Then this user interface is used for all subsequent calls to user-interface-generating installer functions in this process. For more information, see User Interface Levels.
     * @param {Integer} dwUILevel 
     * @param {Pointer<HWND>} phWnd Pointer to a window. This window becomes the owner of any user interface created. A pointer to the previous owner of the user interface is returned. If this parameter is null, the owner of the user interface does not change.
     * @returns {Integer} The previous user interface level is returned. If an invalid <i>dwUILevel </i>is passed, then <b>INSTALLUILEVEL_NOCHANGE</b> is returned.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisetinternalui
     * @since windows8.0
     */
    static MsiSetInternalUI(dwUILevel, phWnd) {
        result := DllCall("msi.dll\MsiSetInternalUI", "int", dwUILevel, "ptr", phWnd, "int")
        return result
    }

    /**
     * The MsiSetExternalUI function enables an external user-interface handler.
     * @param {Pointer<INSTALLUI_HANDLERA>} puiHandler Specifies a callback function that conforms to the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> specification.
     * @param {Integer} dwMessageFilter Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message will not be sent to the UI, instead the message will be logged if logging has been enabled. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienableloga">MsiEnableLog</a> function. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FILESINUSE"></a><a id="installlogmode_filesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_FILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.  When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FATALEXIT"></a><a id="installlogmode_fatalexit"></a><dl>
     * <dt><b>INSTALLLOGMODE_FATALEXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Premature termination of installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ERROR"></a><a id="installlogmode_error"></a><dl>
     * <dt><b>INSTALLLOGMODE_ERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The error messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_WARNING"></a><a id="installlogmode_warning"></a><dl>
     * <dt><b>INSTALLLOGMODE_WARNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The warning messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_USER"></a><a id="installlogmode_user"></a><dl>
     * <dt><b>INSTALLLOGMODE_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user requests are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INFO"></a><a id="installlogmode_info"></a><dl>
     * <dt><b>INSTALLLOGMODE_INFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The status messages that are not displayed are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RESOLVESOURCE"></a><a id="installlogmode_resolvesource"></a><dl>
     * <dt><b>INSTALLLOGMODE_RESOLVESOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Request to determine a valid source location.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RMFILESINUSE"></a><a id="installlogmode_rmfilesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_RMFILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.  When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_OUTOFDISKSPACE"></a><a id="installlogmode_outofdiskspace"></a><dl>
     * <dt><b>INSTALLLOGMODE_OUTOFDISKSPACE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There was insufficient disk space.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONSTART"></a><a id="installlogmode_actionstart"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONSTART</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The start of new installation actions are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONDATA"></a><a id="installlogmode_actiondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data record with the installation action is logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_COMMONDATA"></a><a id="installlogmode_commondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_COMMONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The parameters for user-interface initialization are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_PROGRESS"></a><a id="installlogmode_progress"></a><dl>
     * <dt><b>INSTALLLOGMODE_PROGRESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/p-gly">Progress bar</a> information. This message includes information on units so far and total number of units. For an explanation of the message format, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiprocessmessage">MsiProcessMessage</a> function. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INITIALIZE"></a><a id="installlogmode_initialize"></a><dl>
     * <dt><b>INSTALLLOGMODE_INITIALIZE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this is not a quiet installation, then the <a href="https://docs.microsoft.com/windows/desktop/Msi/b-gly">basic UI</a> has been initialized. If this is a <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> installation, the <i>full UI</i> is not yet initialized. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_TERMINATE"></a><a id="installlogmode_terminate"></a><dl>
     * <dt><b>INSTALLLOGMODE_TERMINATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If a <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> is being used, the <i>full UI</i> has ended. If this is not a quiet installation, the <a href="https://docs.microsoft.com/windows/desktop/Msi/b-gly">basic UI</a> has not yet ended. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_SHOWDIALOG"></a><a id="installlogmode_showdialog"></a><dl>
     * <dt><b>INSTALLLOGMODE_SHOWDIALOG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Sent prior to display of the <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> dialog. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLSTART"></a><a id="installlogmode_installstart"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLSTART</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product begins. 
     * 
     * The message contains the product's ProductName and ProductCode.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLEND"></a><a id="installlogmode_installend"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLEND</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product ends. 
     * 
     * The message contains the product's ProductName, ProductCode, and return value.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Void>} pvContext Pointer to an application context that is passed to the callback function. This parameter can be used for error checking.
     * @returns {Pointer<INSTALLUI_HANDLERA>} The return value is the previously set external handler, or zero (0) if there was no previously set handler.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisetexternaluia
     * @since windows8.0
     */
    static MsiSetExternalUIA(puiHandler, dwMessageFilter, pvContext) {
        pvContextMarshal := pvContext is VarRef ? "ptr" : "ptr"

        result := DllCall("msi.dll\MsiSetExternalUIA", "ptr", puiHandler, "uint", dwMessageFilter, pvContextMarshal, pvContext, "ptr")
        return result
    }

    /**
     * The MsiSetExternalUI function enables an external user-interface handler.
     * @param {Pointer<INSTALLUI_HANDLERW>} puiHandler Specifies a callback function that conforms to the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> specification.
     * @param {Integer} dwMessageFilter Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message will not be sent to the UI, instead the message will be logged if logging has been enabled. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienableloga">MsiEnableLog</a> function. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FILESINUSE"></a><a id="installlogmode_filesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_FILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.  When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FATALEXIT"></a><a id="installlogmode_fatalexit"></a><dl>
     * <dt><b>INSTALLLOGMODE_FATALEXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Premature termination of installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ERROR"></a><a id="installlogmode_error"></a><dl>
     * <dt><b>INSTALLLOGMODE_ERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The error messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_WARNING"></a><a id="installlogmode_warning"></a><dl>
     * <dt><b>INSTALLLOGMODE_WARNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The warning messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_USER"></a><a id="installlogmode_user"></a><dl>
     * <dt><b>INSTALLLOGMODE_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user requests are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INFO"></a><a id="installlogmode_info"></a><dl>
     * <dt><b>INSTALLLOGMODE_INFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The status messages that are not displayed are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RESOLVESOURCE"></a><a id="installlogmode_resolvesource"></a><dl>
     * <dt><b>INSTALLLOGMODE_RESOLVESOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Request to determine a valid source location.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RMFILESINUSE"></a><a id="installlogmode_rmfilesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_RMFILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.  When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_OUTOFDISKSPACE"></a><a id="installlogmode_outofdiskspace"></a><dl>
     * <dt><b>INSTALLLOGMODE_OUTOFDISKSPACE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There was insufficient disk space.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONSTART"></a><a id="installlogmode_actionstart"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONSTART</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The start of new installation actions are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONDATA"></a><a id="installlogmode_actiondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data record with the installation action is logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_COMMONDATA"></a><a id="installlogmode_commondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_COMMONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The parameters for user-interface initialization are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_PROGRESS"></a><a id="installlogmode_progress"></a><dl>
     * <dt><b>INSTALLLOGMODE_PROGRESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/p-gly">Progress bar</a> information. This message includes information on units so far and total number of units. For an explanation of the message format, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiprocessmessage">MsiProcessMessage</a> function. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INITIALIZE"></a><a id="installlogmode_initialize"></a><dl>
     * <dt><b>INSTALLLOGMODE_INITIALIZE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this is not a quiet installation, then the <a href="https://docs.microsoft.com/windows/desktop/Msi/b-gly">basic UI</a> has been initialized. If this is a <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> installation, the <i>full UI</i> is not yet initialized. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_TERMINATE"></a><a id="installlogmode_terminate"></a><dl>
     * <dt><b>INSTALLLOGMODE_TERMINATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If a <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> is being used, the <i>full UI</i> has ended. If this is not a quiet installation, the <a href="https://docs.microsoft.com/windows/desktop/Msi/b-gly">basic UI</a> has not yet ended. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_SHOWDIALOG"></a><a id="installlogmode_showdialog"></a><dl>
     * <dt><b>INSTALLLOGMODE_SHOWDIALOG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Sent prior to display of the <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> dialog. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLSTART"></a><a id="installlogmode_installstart"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLSTART</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product begins. 
     * 
     * The message contains the product's ProductName and ProductCode.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLEND"></a><a id="installlogmode_installend"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLEND</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product ends. 
     * 
     * The message contains the product's ProductName, ProductCode, and return value.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Void>} pvContext Pointer to an application context that is passed to the callback function. This parameter can be used for error checking.
     * @returns {Pointer<INSTALLUI_HANDLERW>} The return value is the previously set external handler, or zero (0) if there was no previously set handler.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisetexternaluiw
     * @since windows8.0
     */
    static MsiSetExternalUIW(puiHandler, dwMessageFilter, pvContext) {
        pvContextMarshal := pvContext is VarRef ? "ptr" : "ptr"

        result := DllCall("msi.dll\MsiSetExternalUIW", "ptr", puiHandler, "uint", dwMessageFilter, pvContextMarshal, pvContext, "ptr")
        return result
    }

    /**
     * The MsiSetExternalUIRecord function enables an external user-interface (UI) handler.
     * @param {Pointer<PINSTALLUI_HANDLER_RECORD>} puiHandler Specifies a callback function that conforms to the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nc-msi-installui_handler_record">INSTALLUI_HANDLER_RECORD</a> specification.
     * 
     * To disable the current external UI handler, call the function with this parameter set to a <b>NULL</b> value.
     * @param {Integer} dwMessageFilter Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message is not sent to the UI, instead the message is logged if logging is enabled. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienableloga">MsiEnableLog</a>.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FILESINUSE"></a><a id="installlogmode_filesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_FILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.
     * 
     * When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FATALEXIT"></a><a id="installlogmode_fatalexit"></a><dl>
     * <dt><b>INSTALLLOGMODE_FATALEXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Premature termination of installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ERROR"></a><a id="installlogmode_error"></a><dl>
     * <dt><b>INSTALLLOGMODE_ERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The error messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_WARNING"></a><a id="installlogmode_warning"></a><dl>
     * <dt><b>INSTALLLOGMODE_WARNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The warning messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_USER"></a><a id="installlogmode_user"></a><dl>
     * <dt><b>INSTALLLOGMODE_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user requests are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INFO"></a><a id="installlogmode_info"></a><dl>
     * <dt><b>INSTALLLOGMODE_INFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The status messages that are not displayed are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RESOLVESOURCE"></a><a id="installlogmode_resolvesource"></a><dl>
     * <dt><b>INSTALLLOGMODE_RESOLVESOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Request to determine a valid source location.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RMFILESINUSE"></a><a id="installlogmode_rmfilesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_RMFILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.  When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_OUTOFDISKSPACE"></a><a id="installlogmode_outofdiskspace"></a><dl>
     * <dt><b>INSTALLLOGMODE_OUTOFDISKSPACE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The is insufficient disk space.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONSTART"></a><a id="installlogmode_actionstart"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONSTART</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The start of new installation actions are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONDATA"></a><a id="installlogmode_actiondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data record with the installation action is logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_COMMONDATA"></a><a id="installlogmode_commondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_COMMONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The parameters for user-interface initialization are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_PROGRESS"></a><a id="installlogmode_progress"></a><dl>
     * <dt><b>INSTALLLOGMODE_PROGRESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The <a href="https://docs.microsoft.com/windows/desktop/Msi/p-gly">Progress bar</a> information.
     * 
     * This message includes information about units so far and total number of units. This message is only sent to an external user interface and is not logged. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiprocessmessage">MsiProcessMessage</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INITIALIZE"></a><a id="installlogmode_initialize"></a><dl>
     * <dt><b>INSTALLLOGMODE_INITIALIZE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this is not a quiet installation, then the <a href="https://docs.microsoft.com/windows/desktop/Msi/b-gly">basic UI</a> is initialized.
     * 
     * If this is a full UI installation, the <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">Full UI</a> is not yet initialized.
     * 
     * This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_TERMINATE"></a><a id="installlogmode_terminate"></a><dl>
     * <dt><b>INSTALLLOGMODE_TERMINATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If a full UI is being used, the full UI has ended.
     * 
     * If this is not a quiet installation, the basic UI has not ended.
     * 
     * This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_SHOWDIALOG"></a><a id="installlogmode_showdialog"></a><dl>
     * <dt><b>INSTALLLOGMODE_SHOWDIALOG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Sent prior to display of the Full UI dialog.
     * 
     * This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLSTART"></a><a id="installlogmode_installstart"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLSTART</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product begins.
     * 
     * The message contains the product's ProductName and ProductCode.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLEND"></a><a id="installlogmode_installend"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLEND</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product ends.
     * 
     * The message contains the product's ProductName, ProductCode, and return value.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Void>} pvContext A pointer to an application context that is passed to the callback function.
     * 
     * This parameter can be used for error checking.
     * @param {Pointer<PINSTALLUI_HANDLER_RECORD>} ppuiPrevHandler Returns the pointer to the previously set callback function that conforms to the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nc-msi-installui_handler_record">INSTALLUI_HANDLER_RECORD</a> specification, or <b>NULL</b> if no callback is previously set.
     * @returns {Integer} <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completes successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This value indicates that an attempt is made to call this function from a custom action.
     * 
     * This function cannot be called from a custom action.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisetexternaluirecord
     * @since windows8.0
     */
    static MsiSetExternalUIRecord(puiHandler, dwMessageFilter, pvContext, ppuiPrevHandler) {
        pvContextMarshal := pvContext is VarRef ? "ptr" : "ptr"

        result := DllCall("msi.dll\MsiSetExternalUIRecord", "ptr", puiHandler, "uint", dwMessageFilter, pvContextMarshal, pvContext, "ptr", ppuiPrevHandler, "uint")
        return result
    }

    /**
     * The MsiEnableLog function sets the log mode for all subsequent installations that are initiated in the calling process.
     * @param {Integer} dwLogMode 
     * @param {PSTR} szLogFile Specifies the string that holds the full path to the log file. Entering a null disables logging, in which case <i>dwlogmode</i> is ignored. If a path is supplied, then <i>dwlogmode</i> must not be zero.
     * @param {Integer} dwLogAttributes Specifies how frequently the log buffer is to be flushed.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGATTRIBUTES_APPEND"></a><a id="installlogattributes_append"></a><dl>
     * <dt><b>INSTALLLOGATTRIBUTES_APPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this value is set, the installer appends the existing log specified by <i>szLogFile</i>. If not set, any existing log specified by <i>szLogFile</i> is overwritten.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGATTRIBUTES_FLUSHEACHLINE"></a><a id="installlogattributes_flusheachline"></a><dl>
     * <dt><b>INSTALLLOGATTRIBUTES_FLUSHEACHLINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Forces the log buffer to be flushed after each line. If this value is not set, the installer flushes the log buffer after 20 lines by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-flushfilebuffers">FlushFileBuffers</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid log mode was specified.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienableloga
     * @since windows8.0
     */
    static MsiEnableLogA(dwLogMode, szLogFile, dwLogAttributes) {
        szLogFile := szLogFile is String ? StrPtr(szLogFile) : szLogFile

        result := DllCall("msi.dll\MsiEnableLogA", "uint", dwLogMode, "ptr", szLogFile, "uint", dwLogAttributes, "uint")
        return result
    }

    /**
     * The MsiEnableLog function sets the log mode for all subsequent installations that are initiated in the calling process.
     * @param {Integer} dwLogMode 
     * @param {PWSTR} szLogFile Specifies the string that holds the full path to the log file. Entering a null disables logging, in which case <i>dwlogmode</i> is ignored. If a path is supplied, then <i>dwlogmode</i> must not be zero.
     * @param {Integer} dwLogAttributes Specifies how frequently the log buffer is to be flushed.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGATTRIBUTES_APPEND"></a><a id="installlogattributes_append"></a><dl>
     * <dt><b>INSTALLLOGATTRIBUTES_APPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this value is set, the installer appends the existing log specified by <i>szLogFile</i>. If not set, any existing log specified by <i>szLogFile</i> is overwritten.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGATTRIBUTES_FLUSHEACHLINE"></a><a id="installlogattributes_flusheachline"></a><dl>
     * <dt><b>INSTALLLOGATTRIBUTES_FLUSHEACHLINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Forces the log buffer to be flushed after each line. If this value is not set, the installer flushes the log buffer after 20 lines by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-flushfilebuffers">FlushFileBuffers</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid log mode was specified.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienablelogw
     * @since windows8.0
     */
    static MsiEnableLogW(dwLogMode, szLogFile, dwLogAttributes) {
        szLogFile := szLogFile is String ? StrPtr(szLogFile) : szLogFile

        result := DllCall("msi.dll\MsiEnableLogW", "uint", dwLogMode, "ptr", szLogFile, "uint", dwLogAttributes, "uint")
        return result
    }

    /**
     * The MsiQueryProductState function returns the installed state for a product.
     * @param {PSTR} szProduct Specifies the product code that identifies the product to be queried.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is installed for a different user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is advertised but not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_DEFAULT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is installed for the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is neither advertised or installed.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiqueryproductstatea
     * @since windows8.0
     */
    static MsiQueryProductStateA(szProduct) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiQueryProductStateA", "ptr", szProduct, "int")
        return result
    }

    /**
     * The MsiQueryProductState function returns the installed state for a product.
     * @param {PWSTR} szProduct Specifies the product code that identifies the product to be queried.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is installed for a different user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is advertised but not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_DEFAULT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is installed for the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is neither advertised or installed.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiqueryproductstatew
     * @since windows8.0
     */
    static MsiQueryProductStateW(szProduct) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiQueryProductStateW", "ptr", szProduct, "int")
        return result
    }

    /**
     * The MsiGetProductInfo function returns product information for published and installed products.
     * @param {PSTR} szProduct Specifies the product code for the product.
     * @param {PSTR} szAttribute Specifies the property to be retrieved.  
     * 
     * The 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/required-properties">Required Properties</a> are guaranteed to be available, but other properties are available only if that property is set. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/properties">Properties</a>. The properties in the following list can be retrieved only from applications that are installed.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPLINK"></a><a id="installproperty_helplink"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPLINK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Support link. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPTELEPHONE"></a><a id="installproperty_helptelephone"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPTELEPHONE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Support telephone. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDLANGUAGE"></a><a id="installproperty_installedlanguage"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed language.
     * 
     * 
     * <b><a href="https://docs.microsoft.com/windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.
     * 
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDPRODUCTNAME"></a><a id="installproperty_installedproductname"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed product name. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLLOCATION"></a><a id="installproperty_installlocation"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLLOCATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation location. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLSOURCE"></a><a id="installproperty_installsource"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLSOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation source. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/sourcedir">SourceDir</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Local cached package.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PUBLISHER"></a><a id="installproperty_publisher"></a><dl>
     * <dt><b>INSTALLPROPERTY_PUBLISHER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Publisher. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/manufacturer">Manufacturer</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLINFOABOUT"></a><a id="installproperty_urlinfoabout"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLINFOABOUT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL information. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLUPDATEINFO"></a><a id="installproperty_urlupdateinfo"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLUPDATEINFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL update information. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMINOR"></a><a id="installproperty_versionminor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMINOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Minor product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMAJOR"></a><a id="installproperty_versionmajor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMAJOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Major product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONSTRING"></a><a id="installproperty_versionstring"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONSTRING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Product version. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ProductID</td>
     * <td>The product identifier for the product. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productid">ProductID</a> property.</td>
     * </tr>
     * <tr>
     * <td>RegCompany</td>
     * <td>The company registered to use this product.</td>
     * </tr>
     * <tr>
     * <td>RegOwner</td>
     * <td>The owner registered to use this product.</td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>InstanceType</td>
     * <td>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of 1 (one) indicates a product installed using a multiple instance transform and the MSINEWINSTANCE property.   Available with the installer running Windows Server 2003 or Windows XP with SP1.  For more information see, <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</td>
     * </tr>
     * </table>
     *  
     * 
     * The advertised properties in the following list can be retrieved from applications that are advertised or installed.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_TRANSFORMS</td>
     * <td>Transforms.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_LANGUAGE</td>
     * <td>Product language.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PRODUCTNAME</td>
     * <td>Human readable product name. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_ASSIGNMENTTYPE</td>
     * <td>Equals 0 (zero) if the product is advertised or installed per-user. 
     * 
     * 
     * Equals 1 (one) if the product is advertised or installed per-machine for all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PACKAGECODE</td>
     * <td>Identifier of the package this product was installed from. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/package-codes">Package Codes</a>.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_VERSION</td>
     * <td>Product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PRODUCTICON</td>
     * <td>Primary icon for the package. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PACKAGENAME</td>
     * <td>Name of the original installation package.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_AUTHORIZED_LUA_APP</td>
     * <td>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com/windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</td>
     * </tr>
     * </table>
     * @param {PSTR} lpValueBuf Pointer to a buffer that receives the property value. This parameter can be null.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null. In this case, the function checks that the property is registered correctly with the product.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is unadvertised or uninstalled.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property is unrecognized.
     * 
     * <div class="alert"><b>Note</b>  The <a href="/windows/desktop/api/msi/nf-msi-msigetproductinfoa">MsiGetProductInfo</a> function  returns   ERROR_UNKNOWN_PROPERTY if the application being queried is advertised and not installed.</div>
     * <div> </div>
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetproductinfoa
     * @since windows8.0
     */
    static MsiGetProductInfoA(szProduct, szAttribute, lpValueBuf, pcchValueBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szAttribute := szAttribute is String ? StrPtr(szAttribute) : szAttribute
        lpValueBuf := lpValueBuf is String ? StrPtr(lpValueBuf) : lpValueBuf

        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetProductInfoA", "ptr", szProduct, "ptr", szAttribute, "ptr", lpValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * The MsiGetProductInfo function returns product information for published and installed products.
     * @param {PWSTR} szProduct Specifies the product code for the product.
     * @param {PWSTR} szAttribute Specifies the property to be retrieved.  
     * 
     * The 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/required-properties">Required Properties</a> are guaranteed to be available, but other properties are available only if that property is set. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/properties">Properties</a>. The properties in the following list can be retrieved only from applications that are installed.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPLINK"></a><a id="installproperty_helplink"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPLINK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Support link. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPTELEPHONE"></a><a id="installproperty_helptelephone"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPTELEPHONE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Support telephone. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDLANGUAGE"></a><a id="installproperty_installedlanguage"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed language.
     * 
     * 
     * <b><a href="https://docs.microsoft.com/windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.
     * 
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDPRODUCTNAME"></a><a id="installproperty_installedproductname"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed product name. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLLOCATION"></a><a id="installproperty_installlocation"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLLOCATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation location. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLSOURCE"></a><a id="installproperty_installsource"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLSOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation source. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/sourcedir">SourceDir</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Local cached package.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PUBLISHER"></a><a id="installproperty_publisher"></a><dl>
     * <dt><b>INSTALLPROPERTY_PUBLISHER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Publisher. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/manufacturer">Manufacturer</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLINFOABOUT"></a><a id="installproperty_urlinfoabout"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLINFOABOUT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL information. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLUPDATEINFO"></a><a id="installproperty_urlupdateinfo"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLUPDATEINFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL update information. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMINOR"></a><a id="installproperty_versionminor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMINOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Minor product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMAJOR"></a><a id="installproperty_versionmajor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMAJOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Major product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONSTRING"></a><a id="installproperty_versionstring"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONSTRING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Product version. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ProductID</td>
     * <td>The product identifier for the product. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productid">ProductID</a> property.</td>
     * </tr>
     * <tr>
     * <td>RegCompany</td>
     * <td>The company registered to use this product.</td>
     * </tr>
     * <tr>
     * <td>RegOwner</td>
     * <td>The owner registered to use this product.</td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>InstanceType</td>
     * <td>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of 1 (one) indicates a product installed using a multiple instance transform and the MSINEWINSTANCE property.   Available with the installer running Windows Server 2003 or Windows XP with SP1.  For more information see, <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</td>
     * </tr>
     * </table>
     *  
     * 
     * The advertised properties in the following list can be retrieved from applications that are advertised or installed.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_TRANSFORMS</td>
     * <td>Transforms.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_LANGUAGE</td>
     * <td>Product language.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PRODUCTNAME</td>
     * <td>Human readable product name. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_ASSIGNMENTTYPE</td>
     * <td>Equals 0 (zero) if the product is advertised or installed per-user. 
     * 
     * 
     * Equals 1 (one) if the product is advertised or installed per-machine for all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PACKAGECODE</td>
     * <td>Identifier of the package this product was installed from. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/package-codes">Package Codes</a>.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_VERSION</td>
     * <td>Product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PRODUCTICON</td>
     * <td>Primary icon for the package. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PACKAGENAME</td>
     * <td>Name of the original installation package.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_AUTHORIZED_LUA_APP</td>
     * <td>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com/windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</td>
     * </tr>
     * </table>
     * @param {PWSTR} lpValueBuf Pointer to a buffer that receives the property value. This parameter can be null.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null. In this case, the function checks that the property is registered correctly with the product.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is unadvertised or uninstalled.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property is unrecognized.
     * 
     * <div class="alert"><b>Note</b>  The <a href="/windows/desktop/api/msi/nf-msi-msigetproductinfoa">MsiGetProductInfo</a> function  returns   ERROR_UNKNOWN_PROPERTY if the application being queried is advertised and not installed.</div>
     * <div> </div>
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetproductinfow
     * @since windows8.0
     */
    static MsiGetProductInfoW(szProduct, szAttribute, lpValueBuf, pcchValueBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szAttribute := szAttribute is String ? StrPtr(szAttribute) : szAttribute
        lpValueBuf := lpValueBuf is String ? StrPtr(lpValueBuf) : lpValueBuf

        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetProductInfoW", "ptr", szProduct, "ptr", szAttribute, "ptr", lpValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * Returns product information for advertised and installed products.
     * @param {PSTR} szProductCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance that is being queried.
     * @param {PSTR} szUserSid The security identifier (SID) of the account under which the instance of the product that is being queried exists. A <b>NULL</b> specifies the current user SID.
     * 
     * <table>
     * <tr>
     * <th>SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is "MSIINSTALLCONTEXT_MACHINE", <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance that is being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per–user–managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per–user–unmanaged instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szProperty Property being queried.
     * 
     * The property to be retrieved. The properties in the following table can only be retrieved from applications that are already installed. All required properties are guaranteed to be available, but other properties are available only if the property is set. For more information, see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/required-properties">Required Properties</a> and <a href="https://docs.microsoft.com/windows/desktop/Msi/properties">Properties</a>.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PRODUCTSTATE"></a><a id="installproperty_productstate"></a><dl>
     * <dt><b>INSTALLPROPERTY_PRODUCTSTATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The state of the product returned in string form as "1" for advertised and "5" for installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPLINK"></a><a id="installproperty_helplink"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPLINK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The support link. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPTELEPHONE"></a><a id="installproperty_helptelephone"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPTELEPHONE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The support telephone. For more information, see   
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDLANGUAGE"></a><a id="installproperty_installedlanguage"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed language.
     * 
     * 
     * <b><a href="https://docs.microsoft.com/windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.
     * 
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDPRODUCTNAME"></a><a id="installproperty_installedproductname"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installed product name. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLLOCATION"></a><a id="installproperty_installlocation"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLLOCATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation location. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLSOURCE"></a><a id="installproperty_installsource"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLSOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation source. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/sourcedir">SourceDir</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The local cached package.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PUBLISHER"></a><a id="installproperty_publisher"></a><dl>
     * <dt><b>INSTALLPROPERTY_PUBLISHER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The publisher. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/manufacturer">Manufacturer</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLINFOABOUT"></a><a id="installproperty_urlinfoabout"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLINFOABOUT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL information. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLUPDATEINFO"></a><a id="installproperty_urlupdateinfo"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLUPDATEINFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The URL update information. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMINOR"></a><a id="installproperty_versionminor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMINOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The minor product version that is derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMAJOR"></a><a id="installproperty_versionmajor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMAJOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The major product version that is derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONSTRING"></a><a id="installproperty_versionstring"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONSTRING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product version. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ProductID</td>
     * <td>The product identifier. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productid">ProductID</a> property.</td>
     * </tr>
     * <tr>
     * <td>RegCompany</td>
     * <td>The company that is registered to use the product.</td>
     * </tr>
     * <tr>
     * <td>RegOwner</td>
     * <td>The owner who is registered to use the product.</td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>InstanceType</td>
     * <td>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of one (1) indicates a product installed using a multiple instance transform and the <a href="https://docs.microsoft.com/windows/desktop/Msi/msinewinstance">MSINEWINSTANCE</a> property.   For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</td>
     * </tr>
     * </table>
     *  
     * 
     * The properties in the following table can be retrieved from applications that are advertised or installed. These properties cannot be retrieved for product instances that are installed under a per-user-unmanaged context for user accounts other than current user account.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_TRANSFORMS</b></td>
     * <td>Transforms.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_LANGUAGE</b></td>
     * <td>Product language.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PRODUCTNAME</b></td>
     * <td>Human readable product name. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_ASSIGNMENTTYPE</b></td>
     * <td>Equals 0 (zero) if the product is advertised or installed per-user. 
     * 
     * 
     * Equals one (1) if the product is advertised or installed per-computer for all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PACKAGECODE</b></td>
     * <td>Identifier of the package that  a product is installed from. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/package-codes">Package Codes</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_VERSION</b></td>
     * <td>Product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PRODUCTICON</b></td>
     * <td>Primary icon for the package. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PACKAGENAME</b></td>
     * <td>Name of the original installation package.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_AUTHORIZED_LUA_APP</b></td>
     * <td>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com/windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</td>
     * </tr>
     * </table>
     * @param {PSTR} szValue A pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.
     * 
     * If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchValue A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.
     * @returns {Integer} The <b>MsiGetProductInfoEx</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The calling process must have administrative privileges to get information for a product installed for a user other than the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is unadvertised or uninstalled.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property is unrecognized. 
     * 
     * <div class="alert"><b>Note</b>  The <a href="/windows/desktop/api/msi/nf-msi-msigetproductinfoa">MsiGetProductInfo</a> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.</div>
     * <div> </div>
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetproductinfoexa
     * @since windows8.0
     */
    static MsiGetProductInfoExA(szProductCode, szUserSid, dwContext, szProperty, szValue, pcchValue) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szProperty := szProperty is String ? StrPtr(szProperty) : szProperty
        szValue := szValue is String ? StrPtr(szValue) : szValue

        pcchValueMarshal := pcchValue is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetProductInfoExA", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szProperty, "ptr", szValue, pcchValueMarshal, pcchValue, "uint")
        return result
    }

    /**
     * Returns product information for advertised and installed products.
     * @param {PWSTR} szProductCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance that is being queried.
     * @param {PWSTR} szUserSid The security identifier (SID) of the account under which the instance of the product that is being queried exists. A <b>NULL</b> specifies the current user SID.
     * 
     * <table>
     * <tr>
     * <th>SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is "MSIINSTALLCONTEXT_MACHINE", <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance that is being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per–user–managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per–user–unmanaged instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szProperty Property being queried.
     * 
     * The property to be retrieved. The properties in the following table can only be retrieved from applications that are already installed. All required properties are guaranteed to be available, but other properties are available only if the property is set. For more information, see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/required-properties">Required Properties</a> and <a href="https://docs.microsoft.com/windows/desktop/Msi/properties">Properties</a>.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PRODUCTSTATE"></a><a id="installproperty_productstate"></a><dl>
     * <dt><b>INSTALLPROPERTY_PRODUCTSTATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The state of the product returned in string form as "1" for advertised and "5" for installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPLINK"></a><a id="installproperty_helplink"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPLINK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The support link. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPTELEPHONE"></a><a id="installproperty_helptelephone"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPTELEPHONE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The support telephone. For more information, see   
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDLANGUAGE"></a><a id="installproperty_installedlanguage"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed language.
     * 
     * 
     * <b><a href="https://docs.microsoft.com/windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.
     * 
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDPRODUCTNAME"></a><a id="installproperty_installedproductname"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installed product name. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLLOCATION"></a><a id="installproperty_installlocation"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLLOCATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation location. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLSOURCE"></a><a id="installproperty_installsource"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLSOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation source. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/sourcedir">SourceDir</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The local cached package.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PUBLISHER"></a><a id="installproperty_publisher"></a><dl>
     * <dt><b>INSTALLPROPERTY_PUBLISHER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The publisher. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/manufacturer">Manufacturer</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLINFOABOUT"></a><a id="installproperty_urlinfoabout"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLINFOABOUT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL information. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLUPDATEINFO"></a><a id="installproperty_urlupdateinfo"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLUPDATEINFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The URL update information. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMINOR"></a><a id="installproperty_versionminor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMINOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The minor product version that is derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMAJOR"></a><a id="installproperty_versionmajor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMAJOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The major product version that is derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONSTRING"></a><a id="installproperty_versionstring"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONSTRING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product version. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ProductID</td>
     * <td>The product identifier. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productid">ProductID</a> property.</td>
     * </tr>
     * <tr>
     * <td>RegCompany</td>
     * <td>The company that is registered to use the product.</td>
     * </tr>
     * <tr>
     * <td>RegOwner</td>
     * <td>The owner who is registered to use the product.</td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>InstanceType</td>
     * <td>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of one (1) indicates a product installed using a multiple instance transform and the <a href="https://docs.microsoft.com/windows/desktop/Msi/msinewinstance">MSINEWINSTANCE</a> property.   For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</td>
     * </tr>
     * </table>
     *  
     * 
     * The properties in the following table can be retrieved from applications that are advertised or installed. These properties cannot be retrieved for product instances that are installed under a per-user-unmanaged context for user accounts other than current user account.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_TRANSFORMS</b></td>
     * <td>Transforms.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_LANGUAGE</b></td>
     * <td>Product language.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PRODUCTNAME</b></td>
     * <td>Human readable product name. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_ASSIGNMENTTYPE</b></td>
     * <td>Equals 0 (zero) if the product is advertised or installed per-user. 
     * 
     * 
     * Equals one (1) if the product is advertised or installed per-computer for all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PACKAGECODE</b></td>
     * <td>Identifier of the package that  a product is installed from. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/package-codes">Package Codes</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_VERSION</b></td>
     * <td>Product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PRODUCTICON</b></td>
     * <td>Primary icon for the package. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PACKAGENAME</b></td>
     * <td>Name of the original installation package.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_AUTHORIZED_LUA_APP</b></td>
     * <td>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com/windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</td>
     * </tr>
     * </table>
     * @param {PWSTR} szValue A pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.
     * 
     * If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchValue A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.
     * @returns {Integer} The <b>MsiGetProductInfoEx</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The calling process must have administrative privileges to get information for a product installed for a user other than the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is unadvertised or uninstalled.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property is unrecognized. 
     * 
     * <div class="alert"><b>Note</b>  The <a href="/windows/desktop/api/msi/nf-msi-msigetproductinfoa">MsiGetProductInfo</a> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.</div>
     * <div> </div>
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetproductinfoexw
     * @since windows8.0
     */
    static MsiGetProductInfoExW(szProductCode, szUserSid, dwContext, szProperty, szValue, pcchValue) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szProperty := szProperty is String ? StrPtr(szProperty) : szProperty
        szValue := szValue is String ? StrPtr(szValue) : szValue

        pcchValueMarshal := pcchValue is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetProductInfoExW", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szProperty, "ptr", szValue, pcchValueMarshal, pcchValue, "uint")
        return result
    }

    /**
     * Installs or uninstalls a product.
     * @param {PSTR} szPackagePath A null-terminated string that specifies the path to the location of the Windows Installer package. The string value can contain a URL (e.g. <c>http://packageLocation/package/package.msi</c>), a network path  (e.g. \\packageLocation\package.msi), a file path (e.g. file://packageLocation/package.msi), or a local path (e.g. D:\packageLocation\package.msi).
     * @param {PSTR} szCommandLine A null-terminated string that specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a>.
     * 
     * To perform an administrative installation, include ACTION=ADMIN in <i>szCommandLine</i>. For more information, see the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/action">ACTION</a> property.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completes successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * For more information, see 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error that relates to initialization occurred.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiinstallproducta
     * @since windows8.0
     */
    static MsiInstallProductA(szPackagePath, szCommandLine) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath
        szCommandLine := szCommandLine is String ? StrPtr(szCommandLine) : szCommandLine

        result := DllCall("msi.dll\MsiInstallProductA", "ptr", szPackagePath, "ptr", szCommandLine, "uint")
        return result
    }

    /**
     * Installs or uninstalls a product.
     * @param {PWSTR} szPackagePath A null-terminated string that specifies the path to the location of the Windows Installer package. The string value can contain a URL (e.g. <c>http://packageLocation/package/package.msi</c>), a network path  (e.g. \\packageLocation\package.msi), a file path (e.g. file://packageLocation/package.msi), or a local path (e.g. D:\packageLocation\package.msi).
     * @param {PWSTR} szCommandLine A null-terminated string that specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a>.
     * 
     * To perform an administrative installation, include ACTION=ADMIN in <i>szCommandLine</i>. For more information, see the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/action">ACTION</a> property.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completes successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * For more information, see 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error that relates to initialization occurred.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiinstallproductw
     * @since windows8.0
     */
    static MsiInstallProductW(szPackagePath, szCommandLine) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath
        szCommandLine := szCommandLine is String ? StrPtr(szCommandLine) : szCommandLine

        result := DllCall("msi.dll\MsiInstallProductW", "ptr", szPackagePath, "ptr", szCommandLine, "uint")
        return result
    }

    /**
     * The MsiConfigureProduct function installs or uninstalls a product.
     * @param {PSTR} szProduct Specifies the product code for the product to be configured.
     * @param {Integer} iInstallLevel Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameter is ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT.
     * @param {Integer} eInstallState 
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeds.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error that relates to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * For more information, see 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error that relates to initialization.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiconfigureproducta
     * @since windows8.0
     */
    static MsiConfigureProductA(szProduct, iInstallLevel, eInstallState) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiConfigureProductA", "ptr", szProduct, "int", iInstallLevel, "int", eInstallState, "uint")
        return result
    }

    /**
     * The MsiConfigureProduct function installs or uninstalls a product.
     * @param {PWSTR} szProduct Specifies the product code for the product to be configured.
     * @param {Integer} iInstallLevel Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameter is ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT.
     * @param {Integer} eInstallState 
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeds.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error that relates to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * For more information, see 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error that relates to initialization.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiconfigureproductw
     * @since windows8.0
     */
    static MsiConfigureProductW(szProduct, iInstallLevel, eInstallState) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiConfigureProductW", "ptr", szProduct, "int", iInstallLevel, "int", eInstallState, "uint")
        return result
    }

    /**
     * Installs or uninstalls a product.
     * @param {PSTR} szProduct Specifies the product code for the product to be configured.
     * @param {Integer} iInstallLevel Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameters are ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any value other than <b>INSTALLSTATE_DEFAULT</b>.
     * @param {Integer} eInstallState 
     * @param {PSTR} szCommandLine Specifies the command-line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a>.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error that relates to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * For more information, see 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiconfigureproductexa
     * @since windows8.0
     */
    static MsiConfigureProductExA(szProduct, iInstallLevel, eInstallState, szCommandLine) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szCommandLine := szCommandLine is String ? StrPtr(szCommandLine) : szCommandLine

        result := DllCall("msi.dll\MsiConfigureProductExA", "ptr", szProduct, "int", iInstallLevel, "int", eInstallState, "ptr", szCommandLine, "uint")
        return result
    }

    /**
     * Installs or uninstalls a product.
     * @param {PWSTR} szProduct Specifies the product code for the product to be configured.
     * @param {Integer} iInstallLevel Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameters are ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any value other than <b>INSTALLSTATE_DEFAULT</b>.
     * @param {Integer} eInstallState 
     * @param {PWSTR} szCommandLine Specifies the command-line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a>.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error that relates to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * For more information, see 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiconfigureproductexw
     * @since windows8.0
     */
    static MsiConfigureProductExW(szProduct, iInstallLevel, eInstallState, szCommandLine) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szCommandLine := szCommandLine is String ? StrPtr(szCommandLine) : szCommandLine

        result := DllCall("msi.dll\MsiConfigureProductExW", "ptr", szProduct, "int", iInstallLevel, "int", eInstallState, "ptr", szCommandLine, "uint")
        return result
    }

    /**
     * Reinstalls products.
     * @param {PSTR} szProduct Specifies the product code for the product to be reinstalled.
     * @param {Integer} szReinstallMode 
     * @returns {Integer} <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SUSPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation was suspended and is incomplete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_USEREXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user canceled the installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msireinstallproducta
     * @since windows8.0
     */
    static MsiReinstallProductA(szProduct, szReinstallMode) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiReinstallProductA", "ptr", szProduct, "uint", szReinstallMode, "uint")
        return result
    }

    /**
     * Reinstalls products.
     * @param {PWSTR} szProduct Specifies the product code for the product to be reinstalled.
     * @param {Integer} szReinstallMode 
     * @returns {Integer} <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SUSPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation was suspended and is incomplete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_USEREXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user canceled the installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msireinstallproductw
     * @since windows8.0
     */
    static MsiReinstallProductW(szProduct, szReinstallMode) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiReinstallProductW", "ptr", szProduct, "uint", szReinstallMode, "uint")
        return result
    }

    /**
     * The MsiAdvertiseProductEx function generates an advertise script or advertises a product to the computer.
     * @param {PSTR} szPackagePath The full path to the package of the product being advertised.
     * @param {PSTR} szScriptfilePath The full path to the script file to be created with the advertised information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_MACHINEASSIGN"></a><a id="advertiseflags_machineassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_MACHINEASSIGN</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-computer installation of the product available to all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_USERASSIGN"></a><a id="advertiseflags_userassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_USERASSIGN</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-user installation of the product available to a particular user.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szTransforms A semicolon–delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path–transforms. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.
     * @param {Integer} lgidLanguage The language to use if the source supports multiple languages.
     * @param {Integer} dwPlatform Bit flags that control for which platform the installer should create the script. This parameter is ignored if <i>szScriptfilePath</i> is null. If <i>dwPlatform</i> is zero (0), then the script is created based on the current platform. This is the same functionality as 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a>. If <i>dwPlatform</i> is 1 or 2, the installer creates script for the specified platform. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="none"></a><a id="NONE"></a><dl>
     * <dt><b>none</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the current platform.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_X86"></a><a id="msiarchitectureflags_x86"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_X86</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the x86 platform.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_IA64"></a><a id="msiarchitectureflags_ia64"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_IA64</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for Itanium-based systems.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_AMD64"></a><a id="msiarchitectureflags_amd64"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_AMD64</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the x64 platform.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwOptions Bit flags that specify extra advertisement options. Nonzero value is only available in Windows Installer versions shipped with Windows Server 2003 and Windows XP with SP1 and later.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIADVERTISEOPTIONS_INSTANCE"></a><a id="msiadvertiseoptions_instance"></a><dl>
     * <dt><b>MSIADVERTISEOPTIONS_INSTANCE</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Multiple instances through product code changing transform support flag. Advertises a new instance of the product. Requires that the <i>szTransforms</i> parameter includes the instance transform that changes the product code. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completes successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error that relates to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * For more information, see 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An initialization error has occurred.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiadvertiseproductexa
     * @since windows8.0
     */
    static MsiAdvertiseProductExA(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage, dwPlatform, dwOptions) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath
        szScriptfilePath := szScriptfilePath is String ? StrPtr(szScriptfilePath) : szScriptfilePath
        szTransforms := szTransforms is String ? StrPtr(szTransforms) : szTransforms

        result := DllCall("msi.dll\MsiAdvertiseProductExA", "ptr", szPackagePath, "ptr", szScriptfilePath, "ptr", szTransforms, "ushort", lgidLanguage, "uint", dwPlatform, "uint", dwOptions, "uint")
        return result
    }

    /**
     * The MsiAdvertiseProductEx function generates an advertise script or advertises a product to the computer.
     * @param {PWSTR} szPackagePath The full path to the package of the product being advertised.
     * @param {PWSTR} szScriptfilePath The full path to the script file to be created with the advertised information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_MACHINEASSIGN"></a><a id="advertiseflags_machineassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_MACHINEASSIGN</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-computer installation of the product available to all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_USERASSIGN"></a><a id="advertiseflags_userassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_USERASSIGN</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-user installation of the product available to a particular user.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szTransforms A semicolon–delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path–transforms. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.
     * @param {Integer} lgidLanguage The language to use if the source supports multiple languages.
     * @param {Integer} dwPlatform Bit flags that control for which platform the installer should create the script. This parameter is ignored if <i>szScriptfilePath</i> is null. If <i>dwPlatform</i> is zero (0), then the script is created based on the current platform. This is the same functionality as 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a>. If <i>dwPlatform</i> is 1 or 2, the installer creates script for the specified platform. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="none"></a><a id="NONE"></a><dl>
     * <dt><b>none</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the current platform.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_X86"></a><a id="msiarchitectureflags_x86"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_X86</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the x86 platform.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_IA64"></a><a id="msiarchitectureflags_ia64"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_IA64</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for Itanium-based systems.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_AMD64"></a><a id="msiarchitectureflags_amd64"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_AMD64</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the x64 platform.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwOptions Bit flags that specify extra advertisement options. Nonzero value is only available in Windows Installer versions shipped with Windows Server 2003 and Windows XP with SP1 and later.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIADVERTISEOPTIONS_INSTANCE"></a><a id="msiadvertiseoptions_instance"></a><dl>
     * <dt><b>MSIADVERTISEOPTIONS_INSTANCE</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Multiple instances through product code changing transform support flag. Advertises a new instance of the product. Requires that the <i>szTransforms</i> parameter includes the instance transform that changes the product code. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completes successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error that relates to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * For more information, see 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An initialization error has occurred.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiadvertiseproductexw
     * @since windows8.0
     */
    static MsiAdvertiseProductExW(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage, dwPlatform, dwOptions) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath
        szScriptfilePath := szScriptfilePath is String ? StrPtr(szScriptfilePath) : szScriptfilePath
        szTransforms := szTransforms is String ? StrPtr(szTransforms) : szTransforms

        result := DllCall("msi.dll\MsiAdvertiseProductExW", "ptr", szPackagePath, "ptr", szScriptfilePath, "ptr", szTransforms, "ushort", lgidLanguage, "uint", dwPlatform, "uint", dwOptions, "uint")
        return result
    }

    /**
     * The MsiAdvertiseProduct function generates an advertise script or advertises a product to the computer.
     * @param {PSTR} szPackagePath The full path to the package of the product being advertised.
     * @param {PSTR} szScriptfilePath The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_MACHINEASSIGN"></a><a id="advertiseflags_machineassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_MACHINEASSIGN</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-machine installation of the product available to all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_USERASSIGN"></a><a id="advertiseflags_userassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_USERASSIGN</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-user installation of the product available to a particular user.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szTransforms A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.
     * @param {Integer} lgidLanguage The installation language to use if the source supports multiple languages.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An initialization error occurred.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiadvertiseproducta
     * @since windows8.0
     */
    static MsiAdvertiseProductA(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath
        szScriptfilePath := szScriptfilePath is String ? StrPtr(szScriptfilePath) : szScriptfilePath
        szTransforms := szTransforms is String ? StrPtr(szTransforms) : szTransforms

        result := DllCall("msi.dll\MsiAdvertiseProductA", "ptr", szPackagePath, "ptr", szScriptfilePath, "ptr", szTransforms, "ushort", lgidLanguage, "uint")
        return result
    }

    /**
     * The MsiAdvertiseProduct function generates an advertise script or advertises a product to the computer.
     * @param {PWSTR} szPackagePath The full path to the package of the product being advertised.
     * @param {PWSTR} szScriptfilePath The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_MACHINEASSIGN"></a><a id="advertiseflags_machineassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_MACHINEASSIGN</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-machine installation of the product available to all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_USERASSIGN"></a><a id="advertiseflags_userassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_USERASSIGN</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-user installation of the product available to a particular user.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szTransforms A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.
     * @param {Integer} lgidLanguage The installation language to use if the source supports multiple languages.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An initialization error occurred.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiadvertiseproductw
     * @since windows8.0
     */
    static MsiAdvertiseProductW(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath
        szScriptfilePath := szScriptfilePath is String ? StrPtr(szScriptfilePath) : szScriptfilePath
        szTransforms := szTransforms is String ? StrPtr(szTransforms) : szTransforms

        result := DllCall("msi.dll\MsiAdvertiseProductW", "ptr", szPackagePath, "ptr", szScriptfilePath, "ptr", szTransforms, "ushort", lgidLanguage, "uint")
        return result
    }

    /**
     * The MsiProcessAdvertiseScript function processes an advertise script file into the specified locations.
     * @param {PSTR} szScriptFile The full path to a script file generated by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {PSTR} szIconFolder An optional path to a folder in which advertised icon files and transform files are located. If this parameter is <b>NULL</b>, no icon or transform files are written.
     * @param {HKEY} hRegData A registry key under which registry data is to be written. If this parameter is <b>NULL</b>, the installer writes the registry data under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-<b>NULL</b>, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.
     * @param {BOOL} fShortcuts <b>TRUE</b> if shortcuts should be created. If a special folder is returned by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/shlobj_core/nf-shlobj_core-shgetspecialfolderlocation">SHGetSpecialFolderLocation</a> it will hold the shortcuts.
     * @param {BOOL} fRemoveItems <b>TRUE</b> if specified items are to be removed instead of created.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The calling process was not running under the LocalSystem account.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function is not available for this platform.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiprocessadvertisescripta
     * @since windows8.0
     */
    static MsiProcessAdvertiseScriptA(szScriptFile, szIconFolder, hRegData, fShortcuts, fRemoveItems) {
        szScriptFile := szScriptFile is String ? StrPtr(szScriptFile) : szScriptFile
        szIconFolder := szIconFolder is String ? StrPtr(szIconFolder) : szIconFolder
        hRegData := hRegData is Win32Handle ? NumGet(hRegData, "ptr") : hRegData

        result := DllCall("msi.dll\MsiProcessAdvertiseScriptA", "ptr", szScriptFile, "ptr", szIconFolder, "ptr", hRegData, "int", fShortcuts, "int", fRemoveItems, "uint")
        return result
    }

    /**
     * The MsiProcessAdvertiseScript function processes an advertise script file into the specified locations.
     * @param {PWSTR} szScriptFile The full path to a script file generated by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {PWSTR} szIconFolder An optional path to a folder in which advertised icon files and transform files are located. If this parameter is <b>NULL</b>, no icon or transform files are written.
     * @param {HKEY} hRegData A registry key under which registry data is to be written. If this parameter is <b>NULL</b>, the installer writes the registry data under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-<b>NULL</b>, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.
     * @param {BOOL} fShortcuts <b>TRUE</b> if shortcuts should be created. If a special folder is returned by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/shlobj_core/nf-shlobj_core-shgetspecialfolderlocation">SHGetSpecialFolderLocation</a> it will hold the shortcuts.
     * @param {BOOL} fRemoveItems <b>TRUE</b> if specified items are to be removed instead of created.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The calling process was not running under the LocalSystem account.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function is not available for this platform.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiprocessadvertisescriptw
     * @since windows8.0
     */
    static MsiProcessAdvertiseScriptW(szScriptFile, szIconFolder, hRegData, fShortcuts, fRemoveItems) {
        szScriptFile := szScriptFile is String ? StrPtr(szScriptFile) : szScriptFile
        szIconFolder := szIconFolder is String ? StrPtr(szIconFolder) : szIconFolder
        hRegData := hRegData is Win32Handle ? NumGet(hRegData, "ptr") : hRegData

        result := DllCall("msi.dll\MsiProcessAdvertiseScriptW", "ptr", szScriptFile, "ptr", szIconFolder, "ptr", hRegData, "int", fShortcuts, "int", fRemoveItems, "uint")
        return result
    }

    /**
     * The MsiAdvertiseScript function copies an advertised script file into the specified locations.
     * @param {PSTR} szScriptFile The full path to a script file generated by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {Integer} dwFlags 
     * @param {Pointer<HKEY>} phRegData A registry key under which temporary information about registry data is to be written. If this parameter is null, the registry data is placed under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-null, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user. 
     * 
     * 
     * 
     * 
     * Note that this registry key cannot be used when generating an advertisement of a product for a user or a computer because the provider of the registry key generally deletes the key. The registry key is located outside of the normal registry locations for shell, class, and .msi configuration information and it is not under <b>HKEY_CLASSES_ROOT</b>. This registry key is only intended for getting temporary information about registry data in a script.
     * @param {BOOL} fRemoveItems TRUE if specified items are to be removed instead of being created.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The calling process was not running under the LocalSystem account.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function  is only available on Windows 2000 and Windows XP.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiadvertisescripta
     * @since windows8.0
     */
    static MsiAdvertiseScriptA(szScriptFile, dwFlags, phRegData, fRemoveItems) {
        szScriptFile := szScriptFile is String ? StrPtr(szScriptFile) : szScriptFile

        result := DllCall("msi.dll\MsiAdvertiseScriptA", "ptr", szScriptFile, "uint", dwFlags, "ptr", phRegData, "int", fRemoveItems, "uint")
        return result
    }

    /**
     * The MsiAdvertiseScript function copies an advertised script file into the specified locations.
     * @param {PWSTR} szScriptFile The full path to a script file generated by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {Integer} dwFlags 
     * @param {Pointer<HKEY>} phRegData A registry key under which temporary information about registry data is to be written. If this parameter is null, the registry data is placed under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-null, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user. 
     * 
     * 
     * 
     * 
     * Note that this registry key cannot be used when generating an advertisement of a product for a user or a computer because the provider of the registry key generally deletes the key. The registry key is located outside of the normal registry locations for shell, class, and .msi configuration information and it is not under <b>HKEY_CLASSES_ROOT</b>. This registry key is only intended for getting temporary information about registry data in a script.
     * @param {BOOL} fRemoveItems TRUE if specified items are to be removed instead of being created.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The calling process was not running under the LocalSystem account.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function  is only available on Windows 2000 and Windows XP.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiadvertisescriptw
     * @since windows8.0
     */
    static MsiAdvertiseScriptW(szScriptFile, dwFlags, phRegData, fRemoveItems) {
        szScriptFile := szScriptFile is String ? StrPtr(szScriptFile) : szScriptFile

        result := DllCall("msi.dll\MsiAdvertiseScriptW", "ptr", szScriptFile, "uint", dwFlags, "ptr", phRegData, "int", fRemoveItems, "uint")
        return result
    }

    /**
     * The MsiGetProductInfoFromScript function returns product information for a Windows Installer script file.
     * @param {PSTR} szScriptFile A null-terminated string specifying the full path to the script file. The script file is the advertise script that was created by calling <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {PSTR} lpProductBuf39 Points to a buffer that receives the product code. The buffer must be 39 characters long. The first 38 characters are for the product code 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @param {Pointer<Integer>} plgidLanguage Points to a variable that receives the product language.
     * @param {Pointer<Integer>} pdwVersion Points to a buffer that receives the product version.
     * @param {PSTR} lpNameBuf Points to a buffer that receives the product name. The buffer includes a terminating null character.
     * @param {Pointer<Integer>} pcchNameBuf Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.
     * @param {PSTR} lpPackageBuf Points to a buffer that receives the package name. The buffer includes the terminating null character.
     * @param {Pointer<Integer>} pcchPackageBuf Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPackageNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid argument was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer was too small to hold the entire value.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not get script information.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function is only available on Windows 2000 and Windows XP.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetproductinfofromscripta
     * @since windows8.0
     */
    static MsiGetProductInfoFromScriptA(szScriptFile, lpProductBuf39, plgidLanguage, pdwVersion, lpNameBuf, pcchNameBuf, lpPackageBuf, pcchPackageBuf) {
        szScriptFile := szScriptFile is String ? StrPtr(szScriptFile) : szScriptFile
        lpProductBuf39 := lpProductBuf39 is String ? StrPtr(lpProductBuf39) : lpProductBuf39
        lpNameBuf := lpNameBuf is String ? StrPtr(lpNameBuf) : lpNameBuf
        lpPackageBuf := lpPackageBuf is String ? StrPtr(lpPackageBuf) : lpPackageBuf

        plgidLanguageMarshal := plgidLanguage is VarRef ? "ushort*" : "ptr"
        pdwVersionMarshal := pdwVersion is VarRef ? "uint*" : "ptr"
        pcchNameBufMarshal := pcchNameBuf is VarRef ? "uint*" : "ptr"
        pcchPackageBufMarshal := pcchPackageBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetProductInfoFromScriptA", "ptr", szScriptFile, "ptr", lpProductBuf39, plgidLanguageMarshal, plgidLanguage, pdwVersionMarshal, pdwVersion, "ptr", lpNameBuf, pcchNameBufMarshal, pcchNameBuf, "ptr", lpPackageBuf, pcchPackageBufMarshal, pcchPackageBuf, "uint")
        return result
    }

    /**
     * The MsiGetProductInfoFromScript function returns product information for a Windows Installer script file.
     * @param {PWSTR} szScriptFile A null-terminated string specifying the full path to the script file. The script file is the advertise script that was created by calling <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {PWSTR} lpProductBuf39 Points to a buffer that receives the product code. The buffer must be 39 characters long. The first 38 characters are for the product code 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @param {Pointer<Integer>} plgidLanguage Points to a variable that receives the product language.
     * @param {Pointer<Integer>} pdwVersion Points to a buffer that receives the product version.
     * @param {PWSTR} lpNameBuf Points to a buffer that receives the product name. The buffer includes a terminating null character.
     * @param {Pointer<Integer>} pcchNameBuf Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.
     * @param {PWSTR} lpPackageBuf Points to a buffer that receives the package name. The buffer includes the terminating null character.
     * @param {Pointer<Integer>} pcchPackageBuf Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPackageNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid argument was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer was too small to hold the entire value.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not get script information.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function is only available on Windows 2000 and Windows XP.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetproductinfofromscriptw
     * @since windows8.0
     */
    static MsiGetProductInfoFromScriptW(szScriptFile, lpProductBuf39, plgidLanguage, pdwVersion, lpNameBuf, pcchNameBuf, lpPackageBuf, pcchPackageBuf) {
        szScriptFile := szScriptFile is String ? StrPtr(szScriptFile) : szScriptFile
        lpProductBuf39 := lpProductBuf39 is String ? StrPtr(lpProductBuf39) : lpProductBuf39
        lpNameBuf := lpNameBuf is String ? StrPtr(lpNameBuf) : lpNameBuf
        lpPackageBuf := lpPackageBuf is String ? StrPtr(lpPackageBuf) : lpPackageBuf

        plgidLanguageMarshal := plgidLanguage is VarRef ? "ushort*" : "ptr"
        pdwVersionMarshal := pdwVersion is VarRef ? "uint*" : "ptr"
        pcchNameBufMarshal := pcchNameBuf is VarRef ? "uint*" : "ptr"
        pcchPackageBufMarshal := pcchPackageBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetProductInfoFromScriptW", "ptr", szScriptFile, "ptr", lpProductBuf39, plgidLanguageMarshal, plgidLanguage, pdwVersionMarshal, pdwVersion, "ptr", lpNameBuf, pcchNameBufMarshal, pcchNameBuf, "ptr", lpPackageBuf, pcchPackageBufMarshal, pcchPackageBuf, "uint")
        return result
    }

    /**
     * The MsiGetProductCode function returns the product code of an application by using the component code of an installed or advertised component of the application.
     * @param {PSTR} szComponent This parameter specifies the component code of a component that has been installed by the application. This will be typically the component code of the component containing the executable file of the application.
     * @param {PSTR} lpBuf39 Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code could not be determined.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified component is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetproductcodea
     * @since windows8.0
     */
    static MsiGetProductCodeA(szComponent, lpBuf39) {
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpBuf39 := lpBuf39 is String ? StrPtr(lpBuf39) : lpBuf39

        result := DllCall("msi.dll\MsiGetProductCodeA", "ptr", szComponent, "ptr", lpBuf39, "uint")
        return result
    }

    /**
     * The MsiGetProductCode function returns the product code of an application by using the component code of an installed or advertised component of the application.
     * @param {PWSTR} szComponent This parameter specifies the component code of a component that has been installed by the application. This will be typically the component code of the component containing the executable file of the application.
     * @param {PWSTR} lpBuf39 Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code could not be determined.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified component is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetproductcodew
     * @since windows8.0
     */
    static MsiGetProductCodeW(szComponent, lpBuf39) {
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpBuf39 := lpBuf39 is String ? StrPtr(lpBuf39) : lpBuf39

        result := DllCall("msi.dll\MsiGetProductCodeW", "ptr", szComponent, "ptr", lpBuf39, "uint")
        return result
    }

    /**
     * The MsiGetUserInfo function returns the registered user information for an installed product.
     * @param {PSTR} szProduct Specifies the product code for the product to be queried.
     * @param {PSTR} lpUserNameBuf Pointer to a variable that receives the name of the user.
     * @param {Pointer<Integer>} pcchUserNameBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpUserNameBuf</i> parameter. This size should include the terminating null character.
     * @param {PSTR} lpOrgNameBuf Pointer to a buffer that receives the organization name.
     * @param {Pointer<Integer>} pcchOrgNameBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpOrgNameBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @param {PSTR} lpSerialBuf Pointer to a buffer that receives the product ID.
     * @param {Pointer<Integer>} pcchSerialBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpSerialBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>USERINFOSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Some or all of the user information is absent.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>USERINFOSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the function parameters was invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>USERINFOSTATE_MOREDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>USERINFOSTATE_PRESENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>USERINFOSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetuserinfoa
     * @since windows8.0
     */
    static MsiGetUserInfoA(szProduct, lpUserNameBuf, pcchUserNameBuf, lpOrgNameBuf, pcchOrgNameBuf, lpSerialBuf, pcchSerialBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        lpUserNameBuf := lpUserNameBuf is String ? StrPtr(lpUserNameBuf) : lpUserNameBuf
        lpOrgNameBuf := lpOrgNameBuf is String ? StrPtr(lpOrgNameBuf) : lpOrgNameBuf
        lpSerialBuf := lpSerialBuf is String ? StrPtr(lpSerialBuf) : lpSerialBuf

        pcchUserNameBufMarshal := pcchUserNameBuf is VarRef ? "uint*" : "ptr"
        pcchOrgNameBufMarshal := pcchOrgNameBuf is VarRef ? "uint*" : "ptr"
        pcchSerialBufMarshal := pcchSerialBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetUserInfoA", "ptr", szProduct, "ptr", lpUserNameBuf, pcchUserNameBufMarshal, pcchUserNameBuf, "ptr", lpOrgNameBuf, pcchOrgNameBufMarshal, pcchOrgNameBuf, "ptr", lpSerialBuf, pcchSerialBufMarshal, pcchSerialBuf, "int")
        return result
    }

    /**
     * The MsiGetUserInfo function returns the registered user information for an installed product.
     * @param {PWSTR} szProduct Specifies the product code for the product to be queried.
     * @param {PWSTR} lpUserNameBuf Pointer to a variable that receives the name of the user.
     * @param {Pointer<Integer>} pcchUserNameBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpUserNameBuf</i> parameter. This size should include the terminating null character.
     * @param {PWSTR} lpOrgNameBuf Pointer to a buffer that receives the organization name.
     * @param {Pointer<Integer>} pcchOrgNameBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpOrgNameBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @param {PWSTR} lpSerialBuf Pointer to a buffer that receives the product ID.
     * @param {Pointer<Integer>} pcchSerialBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpSerialBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>USERINFOSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Some or all of the user information is absent.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>USERINFOSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the function parameters was invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>USERINFOSTATE_MOREDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>USERINFOSTATE_PRESENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>USERINFOSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetuserinfow
     * @since windows8.0
     */
    static MsiGetUserInfoW(szProduct, lpUserNameBuf, pcchUserNameBuf, lpOrgNameBuf, pcchOrgNameBuf, lpSerialBuf, pcchSerialBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        lpUserNameBuf := lpUserNameBuf is String ? StrPtr(lpUserNameBuf) : lpUserNameBuf
        lpOrgNameBuf := lpOrgNameBuf is String ? StrPtr(lpOrgNameBuf) : lpOrgNameBuf
        lpSerialBuf := lpSerialBuf is String ? StrPtr(lpSerialBuf) : lpSerialBuf

        pcchUserNameBufMarshal := pcchUserNameBuf is VarRef ? "uint*" : "ptr"
        pcchOrgNameBufMarshal := pcchOrgNameBuf is VarRef ? "uint*" : "ptr"
        pcchSerialBufMarshal := pcchSerialBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetUserInfoW", "ptr", szProduct, "ptr", lpUserNameBuf, pcchUserNameBufMarshal, pcchUserNameBuf, "ptr", lpOrgNameBuf, pcchOrgNameBufMarshal, pcchOrgNameBuf, "ptr", lpSerialBuf, pcchSerialBufMarshal, pcchSerialBuf, "int")
        return result
    }

    /**
     * The MsiCollectUserInfo function obtains and stores the user information and product ID from an installation wizard.
     * @param {PSTR} szProduct Specifies the product code of the product for which the user information is collected.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msicollectuserinfoa
     * @since windows8.0
     */
    static MsiCollectUserInfoA(szProduct) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiCollectUserInfoA", "ptr", szProduct, "uint")
        return result
    }

    /**
     * The MsiCollectUserInfo function obtains and stores the user information and product ID from an installation wizard.
     * @param {PWSTR} szProduct Specifies the product code of the product for which the user information is collected.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msicollectuserinfow
     * @since windows8.0
     */
    static MsiCollectUserInfoW(szProduct) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiCollectUserInfoW", "ptr", szProduct, "uint")
        return result
    }

    /**
     * For each product listed by the patch package as eligible to receive the patch, the MsiApplyPatch function invokes an installation and sets the PATCH property to the path of the patch package.
     * @param {PSTR} szPatchPackage A null-terminated string specifying the full path to the patch package.
     * @param {PSTR} szInstallPackage If <i>eInstallType</i> is set to INSTALLTYPE_NETWORK_IMAGE, this parameter is a null-terminated string that specifies a path to the product that is to be patched. The installer applies the patch to every eligible product listed in the patch package if <i>szInstallPackage</i> is set to null and <i>eInstallType</i> is set to INSTALLTYPE_DEFAULT.
     * 
     * If <i>eInstallType</i> is INSTALLTYPE_SINGLE_INSTANCE, the installer applies the patch to the product specified by <i>szInstallPackage</i>. In this case, other eligible products listed in the patch package are ignored and the <i>szInstallPackage</i> parameter contains the null-terminated string representing the product code of the instance to patch. This type of installation requires the installer running Windows Server 2003 or Windows XP.
     * @param {Integer} eInstallType This parameter specifies the type of installation to patch.
     * 
     * <table>
     * <tr>
     * <th>Type of installation</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_NETWORK_IMAGE"></a><a id="installtype_network_image"></a><dl>
     * <dt><b>INSTALLTYPE_NETWORK_IMAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an administrative installation. In this case, <i>szInstallPackage</i> must be set to a package path. A value of 1 for INSTALLTYPE_NETWORK_IMAGE sets this for an administrative installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_DEFAULT"></a><a id="installtype_default"></a><dl>
     * <dt><b>INSTALLTYPE_DEFAULT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Searches system for products to patch. In this case, <i>szInstallPackage</i> must be 0.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_SINGLE_INSTANCE"></a><a id="installtype_single_instance"></a><dl>
     * <dt><b>INSTALLTYPE_SINGLE_INSTANCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patch the product specified by <i>szInstallPackage</i>. <i>szInstallPackage</i> is the product code of the instance to patch. This type of installation requires the installer running Windows Server 2003 or Windows XP with SP1. For more information see, <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szCommandLine A null-terminated string that specifies command line property settings. See About 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. See the Remarks section.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patch package could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package is unsupported.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An initialization error occurred.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiapplypatcha
     * @since windows8.0
     */
    static MsiApplyPatchA(szPatchPackage, szInstallPackage, eInstallType, szCommandLine) {
        szPatchPackage := szPatchPackage is String ? StrPtr(szPatchPackage) : szPatchPackage
        szInstallPackage := szInstallPackage is String ? StrPtr(szInstallPackage) : szInstallPackage
        szCommandLine := szCommandLine is String ? StrPtr(szCommandLine) : szCommandLine

        result := DllCall("msi.dll\MsiApplyPatchA", "ptr", szPatchPackage, "ptr", szInstallPackage, "int", eInstallType, "ptr", szCommandLine, "uint")
        return result
    }

    /**
     * For each product listed by the patch package as eligible to receive the patch, the MsiApplyPatch function invokes an installation and sets the PATCH property to the path of the patch package.
     * @param {PWSTR} szPatchPackage A null-terminated string specifying the full path to the patch package.
     * @param {PWSTR} szInstallPackage If <i>eInstallType</i> is set to INSTALLTYPE_NETWORK_IMAGE, this parameter is a null-terminated string that specifies a path to the product that is to be patched. The installer applies the patch to every eligible product listed in the patch package if <i>szInstallPackage</i> is set to null and <i>eInstallType</i> is set to INSTALLTYPE_DEFAULT.
     * 
     * If <i>eInstallType</i> is INSTALLTYPE_SINGLE_INSTANCE, the installer applies the patch to the product specified by <i>szInstallPackage</i>. In this case, other eligible products listed in the patch package are ignored and the <i>szInstallPackage</i> parameter contains the null-terminated string representing the product code of the instance to patch. This type of installation requires the installer running Windows Server 2003 or Windows XP.
     * @param {Integer} eInstallType This parameter specifies the type of installation to patch.
     * 
     * <table>
     * <tr>
     * <th>Type of installation</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_NETWORK_IMAGE"></a><a id="installtype_network_image"></a><dl>
     * <dt><b>INSTALLTYPE_NETWORK_IMAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an administrative installation. In this case, <i>szInstallPackage</i> must be set to a package path. A value of 1 for INSTALLTYPE_NETWORK_IMAGE sets this for an administrative installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_DEFAULT"></a><a id="installtype_default"></a><dl>
     * <dt><b>INSTALLTYPE_DEFAULT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Searches system for products to patch. In this case, <i>szInstallPackage</i> must be 0.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_SINGLE_INSTANCE"></a><a id="installtype_single_instance"></a><dl>
     * <dt><b>INSTALLTYPE_SINGLE_INSTANCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patch the product specified by <i>szInstallPackage</i>. <i>szInstallPackage</i> is the product code of the instance to patch. This type of installation requires the installer running Windows Server 2003 or Windows XP with SP1. For more information see, <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szCommandLine A null-terminated string that specifies command line property settings. See About 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. See the Remarks section.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patch package could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package is unsupported.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An initialization error occurred.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiapplypatchw
     * @since windows8.0
     */
    static MsiApplyPatchW(szPatchPackage, szInstallPackage, eInstallType, szCommandLine) {
        szPatchPackage := szPatchPackage is String ? StrPtr(szPatchPackage) : szPatchPackage
        szInstallPackage := szInstallPackage is String ? StrPtr(szInstallPackage) : szInstallPackage
        szCommandLine := szCommandLine is String ? StrPtr(szCommandLine) : szCommandLine

        result := DllCall("msi.dll\MsiApplyPatchW", "ptr", szPatchPackage, "ptr", szInstallPackage, "int", eInstallType, "ptr", szCommandLine, "uint")
        return result
    }

    /**
     * The MsiGetPatchInfo function returns information about a patch.
     * @param {PSTR} szPatch Specifies the patch code for the patch package.
     * @param {PSTR} szAttribute Specifies the attribute to be retrieved. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Attribute</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Local cached package.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} lpValueBuf Pointer to a buffer that receives the property value. This parameter can be null.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.
     * @returns {Integer} The <b>MsiGetPatchInfo</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property is unrecognized.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetpatchinfoa
     * @since windows8.0
     */
    static MsiGetPatchInfoA(szPatch, szAttribute, lpValueBuf, pcchValueBuf) {
        szPatch := szPatch is String ? StrPtr(szPatch) : szPatch
        szAttribute := szAttribute is String ? StrPtr(szAttribute) : szAttribute
        lpValueBuf := lpValueBuf is String ? StrPtr(lpValueBuf) : lpValueBuf

        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetPatchInfoA", "ptr", szPatch, "ptr", szAttribute, "ptr", lpValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * The MsiGetPatchInfo function returns information about a patch.
     * @param {PWSTR} szPatch Specifies the patch code for the patch package.
     * @param {PWSTR} szAttribute Specifies the attribute to be retrieved. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Attribute</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Local cached package.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} lpValueBuf Pointer to a buffer that receives the property value. This parameter can be null.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.
     * @returns {Integer} The <b>MsiGetPatchInfo</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property is unrecognized.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetpatchinfow
     * @since windows8.0
     */
    static MsiGetPatchInfoW(szPatch, szAttribute, lpValueBuf, pcchValueBuf) {
        szPatch := szPatch is String ? StrPtr(szPatch) : szPatch
        szAttribute := szAttribute is String ? StrPtr(szAttribute) : szAttribute
        lpValueBuf := lpValueBuf is String ? StrPtr(lpValueBuf) : lpValueBuf

        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetPatchInfoW", "ptr", szPatch, "ptr", szAttribute, "ptr", lpValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * The MsiEnumPatches function enumerates all of the patches that have been applied to a product.
     * @param {PSTR} szProduct Specifies the product code of the product for which patches are to be enumerated.
     * @param {Integer} iPatchIndex Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumPatches</b> function and then incremented for subsequent calls.
     * @param {PSTR} lpPatchBuf Pointer to a buffer that receives the patch's GUID. This argument is required.
     * @param {PSTR} lpTransformsBuf Pointer to a buffer that receives the list of transforms in the patch that are applicable to the product. This argument is required and cannot be Null.
     * @param {Pointer<Integer>} pcchTransformsBuf Set to the number of characters copied to <i>lpTransformsBuf</i> upon an unsuccessful return of the function. Not set for a successful return. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no patches to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumpatchesa
     * @since windows8.0
     */
    static MsiEnumPatchesA(szProduct, iPatchIndex, lpPatchBuf, lpTransformsBuf, pcchTransformsBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        lpPatchBuf := lpPatchBuf is String ? StrPtr(lpPatchBuf) : lpPatchBuf
        lpTransformsBuf := lpTransformsBuf is String ? StrPtr(lpTransformsBuf) : lpTransformsBuf

        pcchTransformsBufMarshal := pcchTransformsBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumPatchesA", "ptr", szProduct, "uint", iPatchIndex, "ptr", lpPatchBuf, "ptr", lpTransformsBuf, pcchTransformsBufMarshal, pcchTransformsBuf, "uint")
        return result
    }

    /**
     * The MsiEnumPatches function enumerates all of the patches that have been applied to a product.
     * @param {PWSTR} szProduct Specifies the product code of the product for which patches are to be enumerated.
     * @param {Integer} iPatchIndex Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumPatches</b> function and then incremented for subsequent calls.
     * @param {PWSTR} lpPatchBuf Pointer to a buffer that receives the patch's GUID. This argument is required.
     * @param {PWSTR} lpTransformsBuf Pointer to a buffer that receives the list of transforms in the patch that are applicable to the product. This argument is required and cannot be Null.
     * @param {Pointer<Integer>} pcchTransformsBuf Set to the number of characters copied to <i>lpTransformsBuf</i> upon an unsuccessful return of the function. Not set for a successful return. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no patches to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumpatchesw
     * @since windows8.0
     */
    static MsiEnumPatchesW(szProduct, iPatchIndex, lpPatchBuf, lpTransformsBuf, pcchTransformsBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        lpPatchBuf := lpPatchBuf is String ? StrPtr(lpPatchBuf) : lpPatchBuf
        lpTransformsBuf := lpTransformsBuf is String ? StrPtr(lpTransformsBuf) : lpTransformsBuf

        pcchTransformsBufMarshal := pcchTransformsBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumPatchesW", "ptr", szProduct, "uint", iPatchIndex, "ptr", lpPatchBuf, "ptr", lpTransformsBuf, pcchTransformsBufMarshal, pcchTransformsBuf, "uint")
        return result
    }

    /**
     * Removes one or more patches from a single product.
     * @param {PSTR} szPatchList A null-terminated string that represents the list of patches to remove.  Each patch can be specified by the GUID of the patch or the full path to the patch package. The patches in the list are delimited by semicolons.
     * @param {PSTR} szProductCode A null-terminated string that is the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product from which the patches are removed.  This parameter cannot be <b>NULL</b>.
     * @param {Integer} eUninstallType Value that indicates the type of patch removal to perform. This parameter must be <b>INSTALLTYPE_SINGLE_INSTANCE</b>.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_SINGLE_INSTANCE"></a><a id="installtype_single_instance"></a><dl>
     * <dt><b>INSTALLTYPE_SINGLE_INSTANCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is uninstalled for only the product specified by <i>szProduct</i>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szPropertyList A null-terminated string that specifies command-line property settings. For more information see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. This parameter can be <b>NULL</b>.
     * @returns {Integer} The <b>MsiRemovePatches</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was included.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch was successfully removed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product specified by <i>szProductList</i> is not installed either per-machine or per-user for the caller of <a href="/windows/desktop/api/msi/nf-msi-msiremovepatchesa">MsiRemovePatches</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package cannot be processed by this version of the Windows Installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_REMOVAL_UNSUPPORTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package is not removable.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch has not been applied to this product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_REMOVAL_DISALLOWED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patch removal was disallowed by policy.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiremovepatchesa
     * @since windows8.0
     */
    static MsiRemovePatchesA(szPatchList, szProductCode, eUninstallType, szPropertyList) {
        szPatchList := szPatchList is String ? StrPtr(szPatchList) : szPatchList
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szPropertyList := szPropertyList is String ? StrPtr(szPropertyList) : szPropertyList

        result := DllCall("msi.dll\MsiRemovePatchesA", "ptr", szPatchList, "ptr", szProductCode, "int", eUninstallType, "ptr", szPropertyList, "uint")
        return result
    }

    /**
     * Removes one or more patches from a single product.
     * @param {PWSTR} szPatchList A null-terminated string that represents the list of patches to remove.  Each patch can be specified by the GUID of the patch or the full path to the patch package. The patches in the list are delimited by semicolons.
     * @param {PWSTR} szProductCode A null-terminated string that is the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product from which the patches are removed.  This parameter cannot be <b>NULL</b>.
     * @param {Integer} eUninstallType Value that indicates the type of patch removal to perform. This parameter must be <b>INSTALLTYPE_SINGLE_INSTANCE</b>.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_SINGLE_INSTANCE"></a><a id="installtype_single_instance"></a><dl>
     * <dt><b>INSTALLTYPE_SINGLE_INSTANCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is uninstalled for only the product specified by <i>szProduct</i>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szPropertyList A null-terminated string that specifies command-line property settings. For more information see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. This parameter can be <b>NULL</b>.
     * @returns {Integer} The <b>MsiRemovePatches</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was included.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch was successfully removed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product specified by <i>szProductList</i> is not installed either per-machine or per-user for the caller of <a href="/windows/desktop/api/msi/nf-msi-msiremovepatchesa">MsiRemovePatches</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package cannot be processed by this version of the Windows Installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_REMOVAL_UNSUPPORTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch package is not removable.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch has not been applied to this product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_REMOVAL_DISALLOWED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patch removal was disallowed by policy.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiremovepatchesw
     * @since windows8.0
     */
    static MsiRemovePatchesW(szPatchList, szProductCode, eUninstallType, szPropertyList) {
        szPatchList := szPatchList is String ? StrPtr(szPatchList) : szPatchList
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szPropertyList := szPropertyList is String ? StrPtr(szPropertyList) : szPropertyList

        result := DllCall("msi.dll\MsiRemovePatchesW", "ptr", szPatchList, "ptr", szProductCode, "int", eUninstallType, "ptr", szPropertyList, "uint")
        return result
    }

    /**
     * The MsiExtractPatchXMLData function extracts information from a patch that can be used to determine if the patch applies to a target system.
     * @param {PSTR} szPatchPath The  full path to the patch that is being queried. Pass in as a null-terminated string. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szXMLData A pointer to a buffer to hold the XML string that contains the extracted patch information. This buffer should be large enough to contain the received information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szXMLData</i> is set to <b>NULL</b> and <i>pcchXMLData</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szXMLData</i> buffer large enough to contain *<i>pcchXMLData</i> + 1 characters.
     * @param {Pointer<Integer>} pcchXMLData A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szXMLData</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * If this parameter is set to <b>NULL</b>, the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiExtractPatchXMLData</b> function can return the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed in a way that is not identified by any of the return values in this table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value does not fit in the provided buffer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch file could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function was successful.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch file could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This error can be returned  if MSXML 3.0 is not installed. 
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiextractpatchxmldataa
     * @since windows6.0.6000
     */
    static MsiExtractPatchXMLDataA(szPatchPath, szXMLData, pcchXMLData) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        szPatchPath := szPatchPath is String ? StrPtr(szPatchPath) : szPatchPath
        szXMLData := szXMLData is String ? StrPtr(szXMLData) : szXMLData

        pcchXMLDataMarshal := pcchXMLData is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiExtractPatchXMLDataA", "ptr", szPatchPath, "uint", dwReserved, "ptr", szXMLData, pcchXMLDataMarshal, pcchXMLData, "uint")
        return result
    }

    /**
     * The MsiExtractPatchXMLData function extracts information from a patch that can be used to determine if the patch applies to a target system.
     * @param {PWSTR} szPatchPath The  full path to the patch that is being queried. Pass in as a null-terminated string. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szXMLData A pointer to a buffer to hold the XML string that contains the extracted patch information. This buffer should be large enough to contain the received information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szXMLData</i> is set to <b>NULL</b> and <i>pcchXMLData</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szXMLData</i> buffer large enough to contain *<i>pcchXMLData</i> + 1 characters.
     * @param {Pointer<Integer>} pcchXMLData A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szXMLData</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * If this parameter is set to <b>NULL</b>, the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiExtractPatchXMLData</b> function can return the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed in a way that is not identified by any of the return values in this table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value does not fit in the provided buffer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch file could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function was successful.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch file could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This error can be returned  if MSXML 3.0 is not installed. 
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiextractpatchxmldataw
     * @since windows6.0.6000
     */
    static MsiExtractPatchXMLDataW(szPatchPath, szXMLData, pcchXMLData) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        szPatchPath := szPatchPath is String ? StrPtr(szPatchPath) : szPatchPath
        szXMLData := szXMLData is String ? StrPtr(szXMLData) : szXMLData

        pcchXMLDataMarshal := pcchXMLData is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiExtractPatchXMLDataW", "ptr", szPatchPath, "uint", dwReserved, "ptr", szXMLData, pcchXMLDataMarshal, pcchXMLData, "uint")
        return result
    }

    /**
     * Queries for information about the application of a patch to a specified instance of a product.
     * @param {PSTR} szPatchCode A null-terminated string that contains the GUID of the patch. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szProductCode A null-terminated string that contains the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szUserSid A null-terminated string that specifies the security identifier (SID) under which the instance of the patch being queried exists.  Using a <b>NULL</b> value specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the user that is logged on.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the enumeration for a specific user ID in the system.  The following example identifies a possible user SID: "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per–user-managed installations for the users that <i>szUserSid</i>  specifies.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per–user-unmanaged installations for the users that  <i>szUserSid</i> specifies.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per-machine installations.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szProperty A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following:
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * <dt>"LocalPackage"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the cached patch file that the product uses.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_TRANSFORMS"></a><a id="installproperty_transforms"></a><dl>
     * <dt><b>INSTALLPROPERTY_TRANSFORMS</b></dt>
     * <dt>"Transforms"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the set of patch transforms that the last patch installation applied to the product. This value may not be available for per-user, non-managed applications if the user is not logged on.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * <dt>"InstallDate"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_UNINSTALLABLE"></a><a id="installproperty_uninstallable"></a><dl>
     * <dt><b>INSTALLPROPERTY_UNINSTALLABLE</b></dt>
     * <dt>"Uninstallable"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Returns "1" if the patch is marked as possible to uninstall from the product.  In this case, the installer can still block the uninstallation if this patch is required by another patch that cannot be uninstalled.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PATCHSTATE"></a><a id="installproperty_patchstate"></a><dl>
     * <dt><b>INSTALLPROPERTY_PATCHSTATE</b></dt>
     * <dt>"State"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Returns "1" if this patch is currently applied to the product. Returns "2" if this patch is superseded by another patch. Returns  "4" if this patch is obsolete.   These values correspond to the constants the <i>dwFilter</i> parameter of <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumpatchesexa">MsiEnumPatchesEx</a> uses.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_DISPLAYNAME"></a><a id="installproperty_displayname"></a><dl>
     * <dt><b>INSTALLPROPERTY_DISPLAYNAME</b></dt>
     * <dt>"DisplayName"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Get the registered display name for the patch. For patches that do not
     * include the DisplayName property in the <a href="https://docs.microsoft.com/windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the
     *       returned display name is an empty string ("").
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_MOREINFOURL"></a><a id="installproperty_moreinfourl"></a><dl>
     * <dt><b>INSTALLPROPERTY_MOREINFOURL</b></dt>
     * <dt>"MoreInfoURL"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Get the registered support information URL for the patch. For patches that do not include the MoreInfoURL property in the 
     *       <a href="https://docs.microsoft.com/windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the returned support information URL is an
     *       empty string ("").
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} lpValue This parameter is a pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the property value, not including the terminating <b>NULL</b> character.
     * 
     * If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.
     * 
     * If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchValue When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.
     * @returns {Integer} The <b>MsiGetPatchInfoEx</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function fails trying to access a resource with insufficient privileges.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function fails and the error is not identified in other error codes.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value does not fit in the provided buffer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is enumerated successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product that <i>szProduct</i> specifies is not installed on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property is unrecognized.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is unrecognized.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetpatchinfoexa
     * @since windows8.0
     */
    static MsiGetPatchInfoExA(szPatchCode, szProductCode, szUserSid, dwContext, szProperty, lpValue, pcchValue) {
        szPatchCode := szPatchCode is String ? StrPtr(szPatchCode) : szPatchCode
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szProperty := szProperty is String ? StrPtr(szProperty) : szProperty
        lpValue := lpValue is String ? StrPtr(lpValue) : lpValue

        pcchValueMarshal := pcchValue is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetPatchInfoExA", "ptr", szPatchCode, "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szProperty, "ptr", lpValue, pcchValueMarshal, pcchValue, "uint")
        return result
    }

    /**
     * Queries for information about the application of a patch to a specified instance of a product.
     * @param {PWSTR} szPatchCode A null-terminated string that contains the GUID of the patch. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szProductCode A null-terminated string that contains the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szUserSid A null-terminated string that specifies the security identifier (SID) under which the instance of the patch being queried exists.  Using a <b>NULL</b> value specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the user that is logged on.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the enumeration for a specific user ID in the system.  The following example identifies a possible user SID: "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per–user-managed installations for the users that <i>szUserSid</i>  specifies.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per–user-unmanaged installations for the users that  <i>szUserSid</i> specifies.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per-machine installations.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szProperty A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following:
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * <dt>"LocalPackage"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the cached patch file that the product uses.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_TRANSFORMS"></a><a id="installproperty_transforms"></a><dl>
     * <dt><b>INSTALLPROPERTY_TRANSFORMS</b></dt>
     * <dt>"Transforms"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the set of patch transforms that the last patch installation applied to the product. This value may not be available for per-user, non-managed applications if the user is not logged on.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * <dt>"InstallDate"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_UNINSTALLABLE"></a><a id="installproperty_uninstallable"></a><dl>
     * <dt><b>INSTALLPROPERTY_UNINSTALLABLE</b></dt>
     * <dt>"Uninstallable"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Returns "1" if the patch is marked as possible to uninstall from the product.  In this case, the installer can still block the uninstallation if this patch is required by another patch that cannot be uninstalled.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PATCHSTATE"></a><a id="installproperty_patchstate"></a><dl>
     * <dt><b>INSTALLPROPERTY_PATCHSTATE</b></dt>
     * <dt>"State"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Returns "1" if this patch is currently applied to the product. Returns "2" if this patch is superseded by another patch. Returns  "4" if this patch is obsolete.   These values correspond to the constants the <i>dwFilter</i> parameter of <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumpatchesexa">MsiEnumPatchesEx</a> uses.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_DISPLAYNAME"></a><a id="installproperty_displayname"></a><dl>
     * <dt><b>INSTALLPROPERTY_DISPLAYNAME</b></dt>
     * <dt>"DisplayName"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Get the registered display name for the patch. For patches that do not
     * include the DisplayName property in the <a href="https://docs.microsoft.com/windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the
     *       returned display name is an empty string ("").
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_MOREINFOURL"></a><a id="installproperty_moreinfourl"></a><dl>
     * <dt><b>INSTALLPROPERTY_MOREINFOURL</b></dt>
     * <dt>"MoreInfoURL"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Get the registered support information URL for the patch. For patches that do not include the MoreInfoURL property in the 
     *       <a href="https://docs.microsoft.com/windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the returned support information URL is an
     *       empty string ("").
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} lpValue This parameter is a pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the property value, not including the terminating <b>NULL</b> character.
     * 
     * If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.
     * 
     * If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchValue When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.
     * @returns {Integer} The <b>MsiGetPatchInfoEx</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function fails trying to access a resource with insufficient privileges.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function fails and the error is not identified in other error codes.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value does not fit in the provided buffer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is enumerated successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product that <i>szProduct</i> specifies is not installed on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property is unrecognized.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is unrecognized.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetpatchinfoexw
     * @since windows8.0
     */
    static MsiGetPatchInfoExW(szPatchCode, szProductCode, szUserSid, dwContext, szProperty, lpValue, pcchValue) {
        szPatchCode := szPatchCode is String ? StrPtr(szPatchCode) : szPatchCode
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szProperty := szProperty is String ? StrPtr(szProperty) : szProperty
        lpValue := lpValue is String ? StrPtr(lpValue) : lpValue

        pcchValueMarshal := pcchValue is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetPatchInfoExW", "ptr", szPatchCode, "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szProperty, "ptr", lpValue, pcchValueMarshal, pcchValue, "uint")
        return result
    }

    /**
     * Applies one or more patches to products eligible to receive the patches.
     * @param {PSTR} szPatchPackages A  semicolon-delimited list of the paths to patch files as a single string. For example: ""c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp"   "
     * @param {PSTR} szProductCode This parameter is the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product to be patched. The user or application calling <b>MsiApplyMultiplePatches</b> must have privileges to apply patches. When this parameter is <b>NULL</b>, the patches are applied to all eligible products. When this parameter is non-<b>NULL</b>, the patches are applied only to the specified product.
     * @param {PSTR} szPropertiesList A null-terminated string that specifies command–line property settings used during the patching of products. If there are no command–line property settings, pass in a <b>NULL</b> pointer. An empty string is  an invalid parameter. These properties are shared by all  target products. For more information, see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>.
     * 
     * <div class="alert"><b>Note</b>  The properties list should not contain the  <a href="https://docs.microsoft.com/windows/desktop/Msi/patch">PATCH</a> property. If the <b>PATCH</b> property is set in the command line the value is ignored and is overwritten with the patches being applied.</div>
     * <div> </div>
     * @returns {Integer} The <b>MsiApplyMultiplePatches</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Some arguments passed in are incorrect or contradicting.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed and all  products are successfully patched. <b>ERROR_SUCCESS</b> is returned only if all the  products eligible for the patches are patched successfully. If none of the new patches are applicable, <a href="/windows/desktop/api/msi/nf-msi-msiapplymultiplepatchesa">MsiApplyMultiplePatches</a> returns <b>ERROR_SUCCESS</b> and product state remains unchanged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS_REBOOT_INITIATED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The restart initiated by the last transaction terminated this call to <a href="/windows/desktop/api/msi/nf-msi-msiapplymultiplepatchesa">MsiApplyMultiplePatches</a>. All the target products may not have been patched.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS_REBOOT_REQUIRED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The restart required by the last transaction terminated this call to <a href="/windows/desktop/api/msi/nf-msi-msiapplymultiplepatchesa">MsiApplyMultiplePatches</a>. All target products may not have been patched.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the patch packages provide could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the patch packages provide is not a valid one.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the patch packages is unsupported.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>Any error in Winerror.h</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Implies possible partial completion or that one or more transactions failed.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiapplymultiplepatchesa
     * @since windows8.0
     */
    static MsiApplyMultiplePatchesA(szPatchPackages, szProductCode, szPropertiesList) {
        szPatchPackages := szPatchPackages is String ? StrPtr(szPatchPackages) : szPatchPackages
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szPropertiesList := szPropertiesList is String ? StrPtr(szPropertiesList) : szPropertiesList

        result := DllCall("msi.dll\MsiApplyMultiplePatchesA", "ptr", szPatchPackages, "ptr", szProductCode, "ptr", szPropertiesList, "uint")
        return result
    }

    /**
     * Applies one or more patches to products eligible to receive the patches.
     * @param {PWSTR} szPatchPackages A  semicolon-delimited list of the paths to patch files as a single string. For example: ""c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp"   "
     * @param {PWSTR} szProductCode This parameter is the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product to be patched. The user or application calling <b>MsiApplyMultiplePatches</b> must have privileges to apply patches. When this parameter is <b>NULL</b>, the patches are applied to all eligible products. When this parameter is non-<b>NULL</b>, the patches are applied only to the specified product.
     * @param {PWSTR} szPropertiesList A null-terminated string that specifies command–line property settings used during the patching of products. If there are no command–line property settings, pass in a <b>NULL</b> pointer. An empty string is  an invalid parameter. These properties are shared by all  target products. For more information, see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>.
     * 
     * <div class="alert"><b>Note</b>  The properties list should not contain the  <a href="https://docs.microsoft.com/windows/desktop/Msi/patch">PATCH</a> property. If the <b>PATCH</b> property is set in the command line the value is ignored and is overwritten with the patches being applied.</div>
     * <div> </div>
     * @returns {Integer} The <b>MsiApplyMultiplePatches</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Some arguments passed in are incorrect or contradicting.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed and all  products are successfully patched. <b>ERROR_SUCCESS</b> is returned only if all the  products eligible for the patches are patched successfully. If none of the new patches are applicable, <a href="/windows/desktop/api/msi/nf-msi-msiapplymultiplepatchesa">MsiApplyMultiplePatches</a> returns <b>ERROR_SUCCESS</b> and product state remains unchanged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS_REBOOT_INITIATED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The restart initiated by the last transaction terminated this call to <a href="/windows/desktop/api/msi/nf-msi-msiapplymultiplepatchesa">MsiApplyMultiplePatches</a>. All the target products may not have been patched.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS_REBOOT_REQUIRED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The restart required by the last transaction terminated this call to <a href="/windows/desktop/api/msi/nf-msi-msiapplymultiplepatchesa">MsiApplyMultiplePatches</a>. All target products may not have been patched.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the patch packages provide could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the patch packages provide is not a valid one.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the patch packages is unsupported.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>Any error in Winerror.h</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Implies possible partial completion or that one or more transactions failed.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiapplymultiplepatchesw
     * @since windows8.0
     */
    static MsiApplyMultiplePatchesW(szPatchPackages, szProductCode, szPropertiesList) {
        szPatchPackages := szPatchPackages is String ? StrPtr(szPatchPackages) : szPatchPackages
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szPropertiesList := szPropertiesList is String ? StrPtr(szPropertiesList) : szPropertiesList

        result := DllCall("msi.dll\MsiApplyMultiplePatchesW", "ptr", szPatchPackages, "ptr", szProductCode, "ptr", szPropertiesList, "uint")
        return result
    }

    /**
     * Takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the patches to a specified installed product.
     * @param {PSTR} szProductCode The product that is the target for the set of patches. The value must be the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID for the product.
     * @param {PSTR} szUserSid Null-terminated string  that specifies  a security identifier (SID) of a user. This parameter restricts the context of enumeration for  this user account. This parameter cannot be   the special SID strings "S-1-1-0" (everyone) or "S-1-5-18" (local system). For the machine context <i>dwContext</i> is set to<b> MSIINSTALLCONTEXT_MACHINE</b> and <i>szUserSid</i> must be <b>NULL</b>. 
     * For the current user context <i>szUserSid</i> can be null and  <i>dwContext</i> can be set to <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * @param {Integer} dwContext Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Type of context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for all per-user-managed installations of the product for  the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for all per-user-unmanaged installations for the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for the per-machine installation. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b>  the <i>szUserSid</i> parameter must be null.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} cPatchInfo The number of patches in the array.
     * @param {Pointer<MSIPATCHSEQUENCEINFOA>} pPatchInfo Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structures.
     * @returns {Integer} The <b>MsiDeterminePatchSequence</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed in a manner not covered in the other error codes.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An argument is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_NO_SEQUENCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * No valid sequence could be found for the set of patches.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An installation package referenced by path cannot be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patches were successfully sorted.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The .msi file was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATH_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The path to the .msi file was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PATCH_XML</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The XML patch data is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation package was invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A user that is not an administrator attempted to call the function with a context of a different user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data for a registered patch or product is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The <a href="/windows/desktop/Msi/productcode">ProductCode</a> GUID specified is not registered.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_NOT_CALLED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Windows Installer version 3.0 is required to determine the best patch sequence. The function was called with <i>szProductCode</i> not yet installed with  Windows Installer version 3.0.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This error can be returned if the function was called from a <a href="/windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified patch is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msideterminepatchsequencea
     * @since windows8.0
     */
    static MsiDeterminePatchSequenceA(szProductCode, szUserSid, dwContext, cPatchInfo, pPatchInfo) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid

        result := DllCall("msi.dll\MsiDeterminePatchSequenceA", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "uint", cPatchInfo, "ptr", pPatchInfo, "uint")
        return result
    }

    /**
     * Takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the patches to a specified installed product.
     * @param {PWSTR} szProductCode The product that is the target for the set of patches. The value must be the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID for the product.
     * @param {PWSTR} szUserSid Null-terminated string  that specifies  a security identifier (SID) of a user. This parameter restricts the context of enumeration for  this user account. This parameter cannot be   the special SID strings "S-1-1-0" (everyone) or "S-1-5-18" (local system). For the machine context <i>dwContext</i> is set to<b> MSIINSTALLCONTEXT_MACHINE</b> and <i>szUserSid</i> must be <b>NULL</b>. 
     * For the current user context <i>szUserSid</i> can be null and  <i>dwContext</i> can be set to <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * @param {Integer} dwContext Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Type of context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for all per-user-managed installations of the product for  the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for all per-user-unmanaged installations for the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for the per-machine installation. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b>  the <i>szUserSid</i> parameter must be null.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} cPatchInfo The number of patches in the array.
     * @param {Pointer<MSIPATCHSEQUENCEINFOW>} pPatchInfo Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structures.
     * @returns {Integer} The <b>MsiDeterminePatchSequence</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed in a manner not covered in the other error codes.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An argument is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_NO_SEQUENCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * No valid sequence could be found for the set of patches.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An installation package referenced by path cannot be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patches were successfully sorted.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The .msi file was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATH_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The path to the .msi file was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PATCH_XML</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The XML patch data is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation package was invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A user that is not an administrator attempted to call the function with a context of a different user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data for a registered patch or product is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The <a href="/windows/desktop/Msi/productcode">ProductCode</a> GUID specified is not registered.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_NOT_CALLED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Windows Installer version 3.0 is required to determine the best patch sequence. The function was called with <i>szProductCode</i> not yet installed with  Windows Installer version 3.0.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This error can be returned if the function was called from a <a href="/windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified patch is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msideterminepatchsequencew
     * @since windows8.0
     */
    static MsiDeterminePatchSequenceW(szProductCode, szUserSid, dwContext, cPatchInfo, pPatchInfo) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid

        result := DllCall("msi.dll\MsiDeterminePatchSequenceW", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "uint", cPatchInfo, "ptr", pPatchInfo, "uint")
        return result
    }

    /**
     * The MsiDetermineApplicablePatches function takes a set of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer package and in what sequence.
     * @param {PSTR} szProductPackagePath Full path to an .msi file. The function determines the patches that are applicable to this package and in what sequence.
     * @param {Integer} cPatchInfo Number of patches in the array. Must be greater than zero.
     * @param {Pointer<MSIPATCHSEQUENCEINFOA>} pPatchInfo Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structures.
     * @returns {Integer} The 
     * 					<b>MsiDetermineApplicablePatches</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed in a manner not covered in the other error codes.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An argument is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_NO_SEQUENCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * No valid sequence could be found for the set of patches.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patches were successfully sorted.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The .msi file was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATH_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The path to the .msi file was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PATCH_XML</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The XML patch data is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An installation package referenced by path cannot be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This error can be returned if the function was called from a <a href="/windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed. 
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msidetermineapplicablepatchesa
     * @since windows8.0
     */
    static MsiDetermineApplicablePatchesA(szProductPackagePath, cPatchInfo, pPatchInfo) {
        szProductPackagePath := szProductPackagePath is String ? StrPtr(szProductPackagePath) : szProductPackagePath

        result := DllCall("msi.dll\MsiDetermineApplicablePatchesA", "ptr", szProductPackagePath, "uint", cPatchInfo, "ptr", pPatchInfo, "uint")
        return result
    }

    /**
     * The MsiDetermineApplicablePatches function takes a set of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer package and in what sequence.
     * @param {PWSTR} szProductPackagePath Full path to an .msi file. The function determines the patches that are applicable to this package and in what sequence.
     * @param {Integer} cPatchInfo Number of patches in the array. Must be greater than zero.
     * @param {Pointer<MSIPATCHSEQUENCEINFOW>} pPatchInfo Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structures.
     * @returns {Integer} The 
     * 					<b>MsiDetermineApplicablePatches</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed in a manner not covered in the other error codes.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An argument is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATCH_NO_SEQUENCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * No valid sequence could be found for the set of patches.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patches were successfully sorted.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The .msi file was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_PATH_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The path to the .msi file was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PATCH_XML</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The XML patch data is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An installation package referenced by path cannot be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This error can be returned if the function was called from a <a href="/windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed. 
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msidetermineapplicablepatchesw
     * @since windows8.0
     */
    static MsiDetermineApplicablePatchesW(szProductPackagePath, cPatchInfo, pPatchInfo) {
        szProductPackagePath := szProductPackagePath is String ? StrPtr(szProductPackagePath) : szProductPackagePath

        result := DllCall("msi.dll\MsiDetermineApplicablePatchesW", "ptr", szProductPackagePath, "uint", cPatchInfo, "ptr", pPatchInfo, "uint")
        return result
    }

    /**
     * Enumerates all patches in a specific context or across all contexts.
     * @param {PSTR} szProductCode A null-terminated string that specifies the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product whose patches are enumerated. If non-<b>NULL</b>, patch enumeration is restricted to instances of this product under the user and context specified by <i>szUserSid</i> and <i>dwContext</i>. If <b>NULL</b>, the patches for all products under the specified context are enumerated.
     * @param {PSTR} szUserSid A null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string "S-1-1-0" (Everyone) specifies enumeration across all users in the system. A SID value other than "S-1-1-0" is considered a user SID and restricts enumeration to that user.  When enumerating for a user other than current user, any patches that were applied in a per-user-unmanaged context using a version less than Windows Installer version 3.0, are not enumerated. This parameter can be set to <b>NULL</b> to specify the current user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (System) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the  enumeration to one or a combination of contexts. This parameter can be any one or a combination of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration that is extended to all per-user-managed installations for the users that <i>szUserSid</i> specifies. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * In this context, only patches installed with Windows Installer version 3.0 are enumerated for users that are not the current user.  For the current user, the function enumerates all installed and new  patches. An invalid SID for <i>szUserSid</i> returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration that is  extended to all per-machine installations. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSid</i> parameter must be <b>NULL</b>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwFilter The filter for enumeration. This parameter can be one or a combination of the following parameters.
     * 
     * <table>
     * <tr>
     * <th>Filter</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_APPLIED"></a><a id="msipatchstate_applied"></a><dl>
     * <dt><b>MSIPATCHSTATE_APPLIED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that have been applied. Enumeration does not include superseded or obsolete patches.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_SUPERSEDED"></a><a id="msipatchstate_superseded"></a><dl>
     * <dt><b>MSIPATCHSTATE_SUPERSEDED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are marked as superseded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_OBSOLETED"></a><a id="msipatchstate_obsoleted"></a><dl>
     * <dt><b>MSIPATCHSTATE_OBSOLETED</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are marked as obsolete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_REGISTERED"></a><a id="msipatchstate_registered"></a><dl>
     * <dt><b>MSIPATCHSTATE_REGISTERED</b></dt>
     * <dt>8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are registered but not yet applied. The <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistaddsourceexa">MsiSourceListAddSourceEx</a> function can register new patches.
     * 
     * <div class="alert"><b>Note</b>  Patches registered for users other than current user and applied in the per-user-unmanaged context are not enumerated.</div>
     * <div> </div>
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_ALL"></a><a id="msipatchstate_all"></a><dl>
     * <dt><b>MSIPATCHSTATE_ALL</b></dt>
     * <dt>15</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes all applied, obsolete, superseded, and registered patches.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the patch to retrieve. This parameter must be zero for the first call to the <b>MsiEnumPatchesEx</b> function and then incremented for subsequent calls. The <i>dwIndex</i> parameter should be incremented only if the previous call returned ERROR_SUCCESS.
     * @param {PSTR} szPatchCode An output buffer to contain the GUID of the patch being enumerated. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.
     * @param {PSTR} szTargetProductCode An output buffer to contain the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that receives this patch. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.
     * @param {Pointer<Integer>} pdwTargetProductContext Returns the context of the patch being enumerated. The output value can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b>,  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>, or <b>MSIINSTALLCONTEXT_MACHINE</b>. This parameter can be <b>NULL</b>.
     * @param {PSTR} szTargetUserSid An output buffer that receives  the string SID of the account under which this patch instance exists. This buffer returns an empty string for a per-machine context.
     * 
     * This buffer should be large enough to contain the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * If the <i>szTargetUserSid</i> is set to <b>NULL</b> and <i>pcchTargetUserSid</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>szTargetUserSid</i> buffer large enough to contain *<i>pcchTargetUserSid</i> + 1 characters.
     * 
     * If <i>szTargetUserSid</i> and <i>pcchTargetUserSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchTargetUserSid A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szTargetUserSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szTargetUserSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiEnumPatchesEx</b> function returns one of the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function fails trying to access a resource with insufficient privileges.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more patches to enumerate.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is successfully enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product that  <i>szProduct</i> specifies is not installed on the computer in the specified contexts.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This is returned when <i>pcchTargetUserSid</i> points to a buffer size less than required to copy the SID. In this case, the user can fix the buffer and call <a href="/windows/desktop/api/msi/nf-msi-msienumpatchesexa">MsiEnumPatchesEx</a>  again for the same index value.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumpatchesexa
     * @since windows8.0
     */
    static MsiEnumPatchesExA(szProductCode, szUserSid, dwContext, dwFilter, dwIndex, szPatchCode, szTargetProductCode, pdwTargetProductContext, szTargetUserSid, pcchTargetUserSid) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szPatchCode := szPatchCode is String ? StrPtr(szPatchCode) : szPatchCode
        szTargetProductCode := szTargetProductCode is String ? StrPtr(szTargetProductCode) : szTargetProductCode
        szTargetUserSid := szTargetUserSid is String ? StrPtr(szTargetUserSid) : szTargetUserSid

        pdwTargetProductContextMarshal := pdwTargetProductContext is VarRef ? "int*" : "ptr"
        pcchTargetUserSidMarshal := pcchTargetUserSid is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumPatchesExA", "ptr", szProductCode, "ptr", szUserSid, "uint", dwContext, "uint", dwFilter, "uint", dwIndex, "ptr", szPatchCode, "ptr", szTargetProductCode, pdwTargetProductContextMarshal, pdwTargetProductContext, "ptr", szTargetUserSid, pcchTargetUserSidMarshal, pcchTargetUserSid, "uint")
        return result
    }

    /**
     * Enumerates all patches in a specific context or across all contexts.
     * @param {PWSTR} szProductCode A null-terminated string that specifies the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product whose patches are enumerated. If non-<b>NULL</b>, patch enumeration is restricted to instances of this product under the user and context specified by <i>szUserSid</i> and <i>dwContext</i>. If <b>NULL</b>, the patches for all products under the specified context are enumerated.
     * @param {PWSTR} szUserSid A null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string "S-1-1-0" (Everyone) specifies enumeration across all users in the system. A SID value other than "S-1-1-0" is considered a user SID and restricts enumeration to that user.  When enumerating for a user other than current user, any patches that were applied in a per-user-unmanaged context using a version less than Windows Installer version 3.0, are not enumerated. This parameter can be set to <b>NULL</b> to specify the current user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (System) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the  enumeration to one or a combination of contexts. This parameter can be any one or a combination of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration that is extended to all per-user-managed installations for the users that <i>szUserSid</i> specifies. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * In this context, only patches installed with Windows Installer version 3.0 are enumerated for users that are not the current user.  For the current user, the function enumerates all installed and new  patches. An invalid SID for <i>szUserSid</i> returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration that is  extended to all per-machine installations. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSid</i> parameter must be <b>NULL</b>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwFilter The filter for enumeration. This parameter can be one or a combination of the following parameters.
     * 
     * <table>
     * <tr>
     * <th>Filter</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_APPLIED"></a><a id="msipatchstate_applied"></a><dl>
     * <dt><b>MSIPATCHSTATE_APPLIED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that have been applied. Enumeration does not include superseded or obsolete patches.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_SUPERSEDED"></a><a id="msipatchstate_superseded"></a><dl>
     * <dt><b>MSIPATCHSTATE_SUPERSEDED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are marked as superseded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_OBSOLETED"></a><a id="msipatchstate_obsoleted"></a><dl>
     * <dt><b>MSIPATCHSTATE_OBSOLETED</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are marked as obsolete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_REGISTERED"></a><a id="msipatchstate_registered"></a><dl>
     * <dt><b>MSIPATCHSTATE_REGISTERED</b></dt>
     * <dt>8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are registered but not yet applied. The <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistaddsourceexa">MsiSourceListAddSourceEx</a> function can register new patches.
     * 
     * <div class="alert"><b>Note</b>  Patches registered for users other than current user and applied in the per-user-unmanaged context are not enumerated.</div>
     * <div> </div>
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_ALL"></a><a id="msipatchstate_all"></a><dl>
     * <dt><b>MSIPATCHSTATE_ALL</b></dt>
     * <dt>15</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes all applied, obsolete, superseded, and registered patches.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the patch to retrieve. This parameter must be zero for the first call to the <b>MsiEnumPatchesEx</b> function and then incremented for subsequent calls. The <i>dwIndex</i> parameter should be incremented only if the previous call returned ERROR_SUCCESS.
     * @param {PWSTR} szPatchCode An output buffer to contain the GUID of the patch being enumerated. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.
     * @param {PWSTR} szTargetProductCode An output buffer to contain the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that receives this patch. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.
     * @param {Pointer<Integer>} pdwTargetProductContext Returns the context of the patch being enumerated. The output value can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b>,  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>, or <b>MSIINSTALLCONTEXT_MACHINE</b>. This parameter can be <b>NULL</b>.
     * @param {PWSTR} szTargetUserSid An output buffer that receives  the string SID of the account under which this patch instance exists. This buffer returns an empty string for a per-machine context.
     * 
     * This buffer should be large enough to contain the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * If the <i>szTargetUserSid</i> is set to <b>NULL</b> and <i>pcchTargetUserSid</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>szTargetUserSid</i> buffer large enough to contain *<i>pcchTargetUserSid</i> + 1 characters.
     * 
     * If <i>szTargetUserSid</i> and <i>pcchTargetUserSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchTargetUserSid A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szTargetUserSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szTargetUserSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiEnumPatchesEx</b> function returns one of the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function fails trying to access a resource with insufficient privileges.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more patches to enumerate.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is successfully enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product that  <i>szProduct</i> specifies is not installed on the computer in the specified contexts.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This is returned when <i>pcchTargetUserSid</i> points to a buffer size less than required to copy the SID. In this case, the user can fix the buffer and call <a href="/windows/desktop/api/msi/nf-msi-msienumpatchesexa">MsiEnumPatchesEx</a>  again for the same index value.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumpatchesexw
     * @since windows8.0
     */
    static MsiEnumPatchesExW(szProductCode, szUserSid, dwContext, dwFilter, dwIndex, szPatchCode, szTargetProductCode, pdwTargetProductContext, szTargetUserSid, pcchTargetUserSid) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szPatchCode := szPatchCode is String ? StrPtr(szPatchCode) : szPatchCode
        szTargetProductCode := szTargetProductCode is String ? StrPtr(szTargetProductCode) : szTargetProductCode
        szTargetUserSid := szTargetUserSid is String ? StrPtr(szTargetUserSid) : szTargetUserSid

        pdwTargetProductContextMarshal := pdwTargetProductContext is VarRef ? "int*" : "ptr"
        pcchTargetUserSidMarshal := pcchTargetUserSid is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumPatchesExW", "ptr", szProductCode, "ptr", szUserSid, "uint", dwContext, "uint", dwFilter, "uint", dwIndex, "ptr", szPatchCode, "ptr", szTargetProductCode, pdwTargetProductContextMarshal, pdwTargetProductContext, "ptr", szTargetUserSid, pcchTargetUserSidMarshal, pcchTargetUserSid, "uint")
        return result
    }

    /**
     * The MsiQueryFeatureState function returns the installed state for a product feature.
     * @param {PSTR} szProduct Specifies the product code for the product that contains the feature of interest.
     * @param {PSTR} szFeature Identifies the feature of interest.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is advertised
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed to run from source.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code or feature ID is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiqueryfeaturestatea
     * @since windows8.0
     */
    static MsiQueryFeatureStateA(szProduct, szFeature) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiQueryFeatureStateA", "ptr", szProduct, "ptr", szFeature, "int")
        return result
    }

    /**
     * The MsiQueryFeatureState function returns the installed state for a product feature.
     * @param {PWSTR} szProduct Specifies the product code for the product that contains the feature of interest.
     * @param {PWSTR} szFeature Identifies the feature of interest.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is advertised
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed to run from source.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code or feature ID is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiqueryfeaturestatew
     * @since windows8.0
     */
    static MsiQueryFeatureStateW(szProduct, szFeature) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiQueryFeatureStateW", "ptr", szProduct, "ptr", szFeature, "int")
        return result
    }

    /**
     * The MsiQueryFeatureStateEx function returns the installed state for a product feature.
     * @param {PSTR} szProductCode <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that contains the feature of interest.
     * @param {PSTR} szUserSid Specifies the security identifier (SID) of the account, under which, the instance of the product being queried exists. If <i>dwContext</i> is not <b>MSIINSTALLCONTEXT_MACHINE</b>,  a null value specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b>NULL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * NULL denotes the currently logged on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate features of products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-user-managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-user-unmanaged instance of the product.
     * 
     * <div class="alert"><b>Note</b>  When the query is made on a product installed under the per-user-unmanaged context for a user account other than the current user, the function fails.</div>
     * <div> </div>
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szFeature Specifies the feature being queried. Identifier of the feature as found in the <b>Feature</b> column of the <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a>.
     * @param {Pointer<Integer>} pdwState Installation state of the feature for the specified product instance. This parameter can return one of the following or null.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_ADVERTISED"></a><a id="installstate_advertised"></a><dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This feature is advertised.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_LOCAL"></a><a id="installstate_local"></a><dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_SOURCE"></a><a id="installstate_source"></a><dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed to run from source.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} The <b>MsiQueryFeatureStateEx</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A user must have administrative privileges to get information for a product installed for a user other than the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_FEATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature ID does not identify a known feature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     *  For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiqueryfeaturestateexa
     * @since windows8.0
     */
    static MsiQueryFeatureStateExA(szProductCode, szUserSid, dwContext, szFeature, pdwState) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        pdwStateMarshal := pdwState is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiQueryFeatureStateExA", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szFeature, pdwStateMarshal, pdwState, "uint")
        return result
    }

    /**
     * The MsiQueryFeatureStateEx function returns the installed state for a product feature.
     * @param {PWSTR} szProductCode <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that contains the feature of interest.
     * @param {PWSTR} szUserSid Specifies the security identifier (SID) of the account, under which, the instance of the product being queried exists. If <i>dwContext</i> is not <b>MSIINSTALLCONTEXT_MACHINE</b>,  a null value specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b>NULL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * NULL denotes the currently logged on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate features of products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-user-managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-user-unmanaged instance of the product.
     * 
     * <div class="alert"><b>Note</b>  When the query is made on a product installed under the per-user-unmanaged context for a user account other than the current user, the function fails.</div>
     * <div> </div>
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szFeature Specifies the feature being queried. Identifier of the feature as found in the <b>Feature</b> column of the <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a>.
     * @param {Pointer<Integer>} pdwState Installation state of the feature for the specified product instance. This parameter can return one of the following or null.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_ADVERTISED"></a><a id="installstate_advertised"></a><dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This feature is advertised.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_LOCAL"></a><a id="installstate_local"></a><dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_SOURCE"></a><a id="installstate_source"></a><dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed to run from source.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} The <b>MsiQueryFeatureStateEx</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A user must have administrative privileges to get information for a product installed for a user other than the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_FEATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature ID does not identify a known feature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     *  For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiqueryfeaturestateexw
     * @since windows8.0
     */
    static MsiQueryFeatureStateExW(szProductCode, szUserSid, dwContext, szFeature, pdwState) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        pdwStateMarshal := pdwState is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiQueryFeatureStateExW", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szFeature, pdwStateMarshal, pdwState, "uint")
        return result
    }

    /**
     * The MsiUseFeature function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.
     * @param {PSTR} szProduct Specifies the product code for the product that owns the feature to be used.
     * @param {PSTR} szFeature Identifies the feature to be used.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is advertised
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_BADCONFIG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Invalid function argument.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is locally installed and available for use.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed from the source and available for use.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not published.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiusefeaturea
     * @since windows8.0
     */
    static MsiUseFeatureA(szProduct, szFeature) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiUseFeatureA", "ptr", szProduct, "ptr", szFeature, "int")
        return result
    }

    /**
     * The MsiUseFeature function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.
     * @param {PWSTR} szProduct Specifies the product code for the product that owns the feature to be used.
     * @param {PWSTR} szFeature Identifies the feature to be used.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is advertised
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_BADCONFIG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Invalid function argument.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is locally installed and available for use.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed from the source and available for use.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not published.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiusefeaturew
     * @since windows8.0
     */
    static MsiUseFeatureW(szProduct, szFeature) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiUseFeatureW", "ptr", szProduct, "ptr", szFeature, "int")
        return result
    }

    /**
     * The MsiUseFeatureEx function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.
     * @param {PSTR} szProduct Specifies the product code for the product that owns the feature to be used.
     * @param {PSTR} szFeature Identifies the feature to be used.
     * @param {Integer} dwInstallMode This parameter can have the following value. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMODE_NODETECTION"></a><a id="installmode_nodetection"></a><dl>
     * <dt><b>INSTALLMODE_NODETECTION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Return value indicates the installation state.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is advertised
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is locally installed and available for use.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed from the source and available for use.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not published.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiusefeatureexa
     * @since windows8.0
     */
    static MsiUseFeatureExA(szProduct, szFeature, dwInstallMode) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiUseFeatureExA", "ptr", szProduct, "ptr", szFeature, "uint", dwInstallMode, "uint", dwReserved, "int")
        return result
    }

    /**
     * The MsiUseFeatureEx function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.
     * @param {PWSTR} szProduct Specifies the product code for the product that owns the feature to be used.
     * @param {PWSTR} szFeature Identifies the feature to be used.
     * @param {Integer} dwInstallMode This parameter can have the following value. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMODE_NODETECTION"></a><a id="installmode_nodetection"></a><dl>
     * <dt><b>INSTALLMODE_NODETECTION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Return value indicates the installation state.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is advertised
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is locally installed and available for use.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed from the source and available for use.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not published.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiusefeatureexw
     * @since windows8.0
     */
    static MsiUseFeatureExW(szProduct, szFeature, dwInstallMode) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiUseFeatureExW", "ptr", szProduct, "ptr", szFeature, "uint", dwInstallMode, "uint", dwReserved, "int")
        return result
    }

    /**
     * The MsiGetFeatureUsage function returns the usage metrics for a product feature.
     * @param {PSTR} szProduct Specifies the product code for the product that contains the feature.
     * @param {PSTR} szFeature Specifies the feature code for the feature for which metrics are to be returned.
     * @param {Pointer<Integer>} pdwUseCount Indicates the number of times the feature has been used.
     * @param {Pointer<Integer>} pwDateUsed Specifies the date that the feature was last used. The date is in the MS-DOS date format, as shown in the following table. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Bits</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0 – 4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Day of the month (1-31)
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>5 – 8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Month (1 = January, 2 = February, and so on)
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>9 – 15</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Year offset from 1980 (add 1980 to get actual year)
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} The 
     * <b>MsiGetFeatureUsage</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * No usage information is available or the product or feature is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetfeatureusagea
     * @since windows8.0
     */
    static MsiGetFeatureUsageA(szProduct, szFeature, pdwUseCount, pwDateUsed) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        pdwUseCountMarshal := pdwUseCount is VarRef ? "uint*" : "ptr"
        pwDateUsedMarshal := pwDateUsed is VarRef ? "ushort*" : "ptr"

        result := DllCall("msi.dll\MsiGetFeatureUsageA", "ptr", szProduct, "ptr", szFeature, pdwUseCountMarshal, pdwUseCount, pwDateUsedMarshal, pwDateUsed, "uint")
        return result
    }

    /**
     * The MsiGetFeatureUsage function returns the usage metrics for a product feature.
     * @param {PWSTR} szProduct Specifies the product code for the product that contains the feature.
     * @param {PWSTR} szFeature Specifies the feature code for the feature for which metrics are to be returned.
     * @param {Pointer<Integer>} pdwUseCount Indicates the number of times the feature has been used.
     * @param {Pointer<Integer>} pwDateUsed Specifies the date that the feature was last used. The date is in the MS-DOS date format, as shown in the following table. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Bits</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0 – 4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Day of the month (1-31)
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>5 – 8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Month (1 = January, 2 = February, and so on)
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>9 – 15</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Year offset from 1980 (add 1980 to get actual year)
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} The 
     * <b>MsiGetFeatureUsage</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * No usage information is available or the product or feature is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetfeatureusagew
     * @since windows8.0
     */
    static MsiGetFeatureUsageW(szProduct, szFeature, pdwUseCount, pwDateUsed) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        pdwUseCountMarshal := pdwUseCount is VarRef ? "uint*" : "ptr"
        pwDateUsedMarshal := pwDateUsed is VarRef ? "ushort*" : "ptr"

        result := DllCall("msi.dll\MsiGetFeatureUsageW", "ptr", szProduct, "ptr", szFeature, pdwUseCountMarshal, pdwUseCount, pwDateUsedMarshal, pwDateUsed, "uint")
        return result
    }

    /**
     * The MsiConfigureFeature function configures the installed state for a product feature.
     * @param {PSTR} szProduct Specifies the product code for the product to be configured.
     * @param {PSTR} szFeature Specifies the feature ID for the feature to be configured.
     * @param {Integer} eInstallState 
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeds.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * For more information, see 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error that relates to the initialization has occurred.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiconfigurefeaturea
     * @since windows8.0
     */
    static MsiConfigureFeatureA(szProduct, szFeature, eInstallState) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiConfigureFeatureA", "ptr", szProduct, "ptr", szFeature, "int", eInstallState, "uint")
        return result
    }

    /**
     * The MsiConfigureFeature function configures the installed state for a product feature.
     * @param {PWSTR} szProduct Specifies the product code for the product to be configured.
     * @param {PWSTR} szFeature Specifies the feature ID for the feature to be configured.
     * @param {Integer} eInstallState 
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeds.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * For more information, see 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error that relates to the initialization has occurred.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiconfigurefeaturew
     * @since windows8.0
     */
    static MsiConfigureFeatureW(szProduct, szFeature, eInstallState) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiConfigureFeatureW", "ptr", szProduct, "ptr", szFeature, "int", eInstallState, "uint")
        return result
    }

    /**
     * Reinstalls features.
     * @param {PSTR} szProduct Specifies the product code for the product that contains the feature to be reinstalled.
     * @param {PSTR} szFeature Specifies the feature to be reinstalled. The parent feature or child feature of the specified feature is not reinstalled. To reinstall the parent or child feature, you must call the <b>MsiReinstallFeature</b>   function for each separately or use the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallproducta">MsiReinstallProduct</a> function.
     * @param {Integer} dwReinstallMode 
     * @returns {Integer} <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SUSPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation was suspended and is incomplete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_USEREXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user canceled the installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_FEATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature ID does not identify a known feature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msireinstallfeaturea
     * @since windows8.0
     */
    static MsiReinstallFeatureA(szProduct, szFeature, dwReinstallMode) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiReinstallFeatureA", "ptr", szProduct, "ptr", szFeature, "uint", dwReinstallMode, "uint")
        return result
    }

    /**
     * Reinstalls features.
     * @param {PWSTR} szProduct Specifies the product code for the product that contains the feature to be reinstalled.
     * @param {PWSTR} szFeature Specifies the feature to be reinstalled. The parent feature or child feature of the specified feature is not reinstalled. To reinstall the parent or child feature, you must call the <b>MsiReinstallFeature</b>   function for each separately or use the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallproducta">MsiReinstallProduct</a> function.
     * @param {Integer} dwReinstallMode 
     * @returns {Integer} <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SUSPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation was suspended and is incomplete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_USEREXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user canceled the installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_FEATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature ID does not identify a known feature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msireinstallfeaturew
     * @since windows8.0
     */
    static MsiReinstallFeatureW(szProduct, szFeature, dwReinstallMode) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiReinstallFeatureW", "ptr", szProduct, "ptr", szFeature, "uint", dwReinstallMode, "uint")
        return result
    }

    /**
     * The MsiProvideComponent function returns the full component path, performing any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.
     * @param {PSTR} szProduct Specifies the product code for the product that contains the feature with the necessary component.
     * @param {PSTR} szFeature Specifies the feature ID of the feature with the necessary component.
     * @param {PSTR} szComponent Specifies the component code of the necessary component.
     * @param {Integer} dwInstallMode 
     * @param {PSTR} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is absent or broken. this error is returned for dwInstallMode = INSTALLMODE_EXISTING.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_NOTUSED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component being requested is disabled on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_FEATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature ID does not identify a known feature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unrecognized product or a feature name was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The buffer overflow is returned.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SOURCE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unable to detect a source.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiprovidecomponenta
     * @since windows8.0
     */
    static MsiProvideComponentA(szProduct, szFeature, szComponent, dwInstallMode, lpPathBuf, pcchPathBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiProvideComponentA", "ptr", szProduct, "ptr", szFeature, "ptr", szComponent, "uint", dwInstallMode, "ptr", lpPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiProvideComponent function returns the full component path, performing any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.
     * @param {PWSTR} szProduct Specifies the product code for the product that contains the feature with the necessary component.
     * @param {PWSTR} szFeature Specifies the feature ID of the feature with the necessary component.
     * @param {PWSTR} szComponent Specifies the component code of the necessary component.
     * @param {Integer} dwInstallMode 
     * @param {PWSTR} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is absent or broken. this error is returned for dwInstallMode = INSTALLMODE_EXISTING.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_NOTUSED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component being requested is disabled on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_FEATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature ID does not identify a known feature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unrecognized product or a feature name was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The buffer overflow is returned.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SOURCE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unable to detect a source.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiprovidecomponentw
     * @since windows8.0
     */
    static MsiProvideComponentW(szProduct, szFeature, szComponent, dwInstallMode, lpPathBuf, pcchPathBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiProvideComponentW", "ptr", szProduct, "ptr", szFeature, "ptr", szComponent, "uint", dwInstallMode, "ptr", lpPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiProvideQualifiedComponent function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature.
     * @param {PSTR} szCategory Specifies the component ID  for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.
     * @param {PSTR} szQualifier Specifies a qualifier into a list of advertising components (from 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).
     * @param {Integer} dwInstallMode 
     * @param {PSTR} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INDEX_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component qualifier is invalid or absent.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified component is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiprovidequalifiedcomponenta
     * @since windows8.0
     */
    static MsiProvideQualifiedComponentA(szCategory, szQualifier, dwInstallMode, lpPathBuf, pcchPathBuf) {
        szCategory := szCategory is String ? StrPtr(szCategory) : szCategory
        szQualifier := szQualifier is String ? StrPtr(szQualifier) : szQualifier
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiProvideQualifiedComponentA", "ptr", szCategory, "ptr", szQualifier, "uint", dwInstallMode, "ptr", lpPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiProvideQualifiedComponent function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature.
     * @param {PWSTR} szCategory Specifies the component ID  for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.
     * @param {PWSTR} szQualifier Specifies a qualifier into a list of advertising components (from 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).
     * @param {Integer} dwInstallMode 
     * @param {PWSTR} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INDEX_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component qualifier is invalid or absent.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified component is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiprovidequalifiedcomponentw
     * @since windows8.0
     */
    static MsiProvideQualifiedComponentW(szCategory, szQualifier, dwInstallMode, lpPathBuf, pcchPathBuf) {
        szCategory := szCategory is String ? StrPtr(szCategory) : szCategory
        szQualifier := szQualifier is String ? StrPtr(szQualifier) : szQualifier
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiProvideQualifiedComponentW", "ptr", szCategory, "ptr", szQualifier, "uint", dwInstallMode, "ptr", lpPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiProvideQualifiedComponentEx function returns the full component path for a qualified component that is published by a product and performs any necessary installation.
     * @param {PSTR} szCategory Specifies the component ID that for the requested component. This may not be the GUID for the component itself but rather a server that provides the correct functionality, as in the ComponentId column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.
     * @param {PSTR} szQualifier Specifies a qualifier into a list of advertising components (from 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).
     * @param {Integer} dwInstallMode 
     * @param {PSTR} szProduct Specifies the product to match that has published the qualified component. If this is null, then this API works the same as 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiprovidequalifiedcomponenta">MsiProvideQualifiedComponent</a>.
     * @param {PSTR} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INDEX_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Component qualifier invalid or not present.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is absent or broken. this error is returned for <i>dwInstallMode</i> = INSTALLMODE_EXISTING.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified component is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiprovidequalifiedcomponentexa
     * @since windows8.0
     */
    static MsiProvideQualifiedComponentExA(szCategory, szQualifier, dwInstallMode, szProduct, lpPathBuf, pcchPathBuf) {
        static dwUnused1 := 0, dwUnused2 := 0 ;Reserved parameters must always be NULL

        szCategory := szCategory is String ? StrPtr(szCategory) : szCategory
        szQualifier := szQualifier is String ? StrPtr(szQualifier) : szQualifier
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiProvideQualifiedComponentExA", "ptr", szCategory, "ptr", szQualifier, "uint", dwInstallMode, "ptr", szProduct, "uint", dwUnused1, "uint", dwUnused2, "ptr", lpPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiProvideQualifiedComponentEx function returns the full component path for a qualified component that is published by a product and performs any necessary installation.
     * @param {PWSTR} szCategory Specifies the component ID that for the requested component. This may not be the GUID for the component itself but rather a server that provides the correct functionality, as in the ComponentId column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.
     * @param {PWSTR} szQualifier Specifies a qualifier into a list of advertising components (from 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).
     * @param {Integer} dwInstallMode 
     * @param {PWSTR} szProduct Specifies the product to match that has published the qualified component. If this is null, then this API works the same as 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiprovidequalifiedcomponenta">MsiProvideQualifiedComponent</a>.
     * @param {PWSTR} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INDEX_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Component qualifier invalid or not present.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is absent or broken. this error is returned for <i>dwInstallMode</i> = INSTALLMODE_EXISTING.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified component is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>An error relating to an action</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * See 
     * <a href="/windows/desktop/Msi/error-codes">Error Codes</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b><a href="/windows/desktop/Msi/initialization-errors">Initialization Error</a></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An error relating to initialization occurred.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiprovidequalifiedcomponentexw
     * @since windows8.0
     */
    static MsiProvideQualifiedComponentExW(szCategory, szQualifier, dwInstallMode, szProduct, lpPathBuf, pcchPathBuf) {
        static dwUnused1 := 0, dwUnused2 := 0 ;Reserved parameters must always be NULL

        szCategory := szCategory is String ? StrPtr(szCategory) : szCategory
        szQualifier := szQualifier is String ? StrPtr(szQualifier) : szQualifier
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiProvideQualifiedComponentExW", "ptr", szCategory, "ptr", szQualifier, "uint", dwInstallMode, "ptr", szProduct, "uint", dwUnused1, "uint", dwUnused2, "ptr", lpPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiGetComponentPath function returns the full path to an installed component. If the key path for the component is a registry key then the registry key is returned.
     * @param {PSTR} szProduct Specifies the product code for the client product.
     * @param {PSTR} szComponent Specifies the component ID of the component to be located.
     * @param {PSTR} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft\". The registry roots returned on 32-bit operating systems are defined as shown in the following table. 
     * 
     * 
     * 
     * 
     * <div class="alert"><b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
     * For example, a registry key path of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft\", if the component path is a registry key on a 64-bit operating system.</div>
     * <div> </div>
     * 
     * 
     * <table>
     * <tr>
     * <th>Root</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CLASSES_ROOT"></a><a id="hkey_classes_root"></a><dl>
     * <dt><b>HKEY_CLASSES_ROOT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 00
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CURRENT_USER"></a><a id="hkey_current_user"></a><dl>
     * <dt><b>HKEY_CURRENT_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 01
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_LOCAL_MACHINE"></a><a id="hkey_local_machine"></a><dl>
     * <dt><b>HKEY_LOCAL_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 02
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_USERS"></a><a id="hkey_users"></a><dl>
     * <dt><b>HKEY_USERS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 03
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Integer>} pcchBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {Integer} The 
     * <b>MsiGetComponentPath</b> function returns the following values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_NOTUSED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component being requested is disabled on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the function parameters is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed to run from source.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCEABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component source is inaccessible.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code or component ID is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetcomponentpatha
     * @since windows8.0
     */
    static MsiGetComponentPathA(szProduct, szComponent, lpPathBuf, pcchBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchBufMarshal := pcchBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetComponentPathA", "ptr", szProduct, "ptr", szComponent, "ptr", lpPathBuf, pcchBufMarshal, pcchBuf, "int")
        return result
    }

    /**
     * The MsiGetComponentPath function returns the full path to an installed component. If the key path for the component is a registry key then the registry key is returned.
     * @param {PWSTR} szProduct Specifies the product code for the client product.
     * @param {PWSTR} szComponent Specifies the component ID of the component to be located.
     * @param {PWSTR} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft\". The registry roots returned on 32-bit operating systems are defined as shown in the following table. 
     * 
     * 
     * 
     * 
     * <div class="alert"><b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
     * For example, a registry key path of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft\", if the component path is a registry key on a 64-bit operating system.</div>
     * <div> </div>
     * 
     * 
     * <table>
     * <tr>
     * <th>Root</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CLASSES_ROOT"></a><a id="hkey_classes_root"></a><dl>
     * <dt><b>HKEY_CLASSES_ROOT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 00
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CURRENT_USER"></a><a id="hkey_current_user"></a><dl>
     * <dt><b>HKEY_CURRENT_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 01
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_LOCAL_MACHINE"></a><a id="hkey_local_machine"></a><dl>
     * <dt><b>HKEY_LOCAL_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 02
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_USERS"></a><a id="hkey_users"></a><dl>
     * <dt><b>HKEY_USERS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 03
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Integer>} pcchBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {Integer} The 
     * <b>MsiGetComponentPath</b> function returns the following values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_NOTUSED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component being requested is disabled on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the function parameters is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed to run from source.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCEABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component source is inaccessible.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code or component ID is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetcomponentpathw
     * @since windows8.0
     */
    static MsiGetComponentPathW(szProduct, szComponent, lpPathBuf, pcchBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchBufMarshal := pcchBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetComponentPathW", "ptr", szProduct, "ptr", szComponent, "ptr", lpPathBuf, pcchBufMarshal, pcchBuf, "int")
        return result
    }

    /**
     * Returns the full path to an installed component.
     * @param {PSTR} szProductCode A null-terminated string value that specifies an application's product code GUID. The function gets  the path of installed components used by this application.
     * @param {PSTR} szComponentCode A null-terminated string value that specifies a component code GUID. The function gets the path of an installed component having this component code.
     * @param {PSTR} szUserSid A  null-terminated string value that specifies the security identifier (SID) for a user in the system.  The function gets the paths of installed components  of applications installed under the user accounts identified by this SID. The special SID string s-1-1-0 (Everyone) specifies all users in the system. If this parameter is <b>NULL</b>, the function gets the path of an installed component for the currently logged-on user only.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies a particular user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to search applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {PSTR} lpOutPathBuffer A string value that receives the path to the component. This parameter can be <b>NULL</b>. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft\". The registry roots returned on 32-bit operating systems are defined as shown in the following table. 
     * 
     * 
     * 
     * 
     * <div class="alert"><b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
     * For example, a registry key path of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft\", if the component path is a registry key on a 64-bit operating system.</div>
     * <div> </div>
     * 
     * 
     * <table>
     * <tr>
     * <th>Root</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CLASSES_ROOT"></a><a id="hkey_classes_root"></a><dl>
     * <dt><b>HKEY_CLASSES_ROOT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 00
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CURRENT_USER"></a><a id="hkey_current_user"></a><dl>
     * <dt><b>HKEY_CURRENT_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 01
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_LOCAL_MACHINE"></a><a id="hkey_local_machine"></a><dl>
     * <dt><b>HKEY_LOCAL_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 02
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_USERS"></a><a id="hkey_users"></a><dl>
     * <dt><b>HKEY_USERS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 03
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Integer>} pcchOutPathBuffer Pointer to a location that receives the size of the buffer, in <b>TCHAR</b>, pointed to by the <i>szPathBuf</i> parameter.  The value in this location should be set to the count of  <b>TCHAR</b> in the string including the terminating null character. If the size of the  buffer  is too small, this parameter receives the length of the string value without including the terminating null character in the count.
     * @returns {Integer} The 
     * <b>MsiGetComponentPathEx</b> function returns the following values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_NOTUSED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component being requested is disabled on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_BADCONFIG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the function parameters is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed to run from source.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCEABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component source is inaccessible.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code or component ID is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_BROKEN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is corrupt or partially missing in some way and requires repair.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetcomponentpathexa
     * @since windows8.0
     */
    static MsiGetComponentPathExA(szProductCode, szComponentCode, szUserSid, dwContext, lpOutPathBuffer, pcchOutPathBuffer) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szComponentCode := szComponentCode is String ? StrPtr(szComponentCode) : szComponentCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        lpOutPathBuffer := lpOutPathBuffer is String ? StrPtr(lpOutPathBuffer) : lpOutPathBuffer

        pcchOutPathBufferMarshal := pcchOutPathBuffer is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetComponentPathExA", "ptr", szProductCode, "ptr", szComponentCode, "ptr", szUserSid, "int", dwContext, "ptr", lpOutPathBuffer, pcchOutPathBufferMarshal, pcchOutPathBuffer, "int")
        return result
    }

    /**
     * Returns the full path to an installed component.
     * @param {PWSTR} szProductCode A null-terminated string value that specifies an application's product code GUID. The function gets  the path of installed components used by this application.
     * @param {PWSTR} szComponentCode A null-terminated string value that specifies a component code GUID. The function gets the path of an installed component having this component code.
     * @param {PWSTR} szUserSid A  null-terminated string value that specifies the security identifier (SID) for a user in the system.  The function gets the paths of installed components  of applications installed under the user accounts identified by this SID. The special SID string s-1-1-0 (Everyone) specifies all users in the system. If this parameter is <b>NULL</b>, the function gets the path of an installed component for the currently logged-on user only.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies a particular user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to search applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {PWSTR} lpOutPathBuffer A string value that receives the path to the component. This parameter can be <b>NULL</b>. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft\". The registry roots returned on 32-bit operating systems are defined as shown in the following table. 
     * 
     * 
     * 
     * 
     * <div class="alert"><b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
     * For example, a registry key path of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft\", if the component path is a registry key on a 64-bit operating system.</div>
     * <div> </div>
     * 
     * 
     * <table>
     * <tr>
     * <th>Root</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CLASSES_ROOT"></a><a id="hkey_classes_root"></a><dl>
     * <dt><b>HKEY_CLASSES_ROOT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 00
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CURRENT_USER"></a><a id="hkey_current_user"></a><dl>
     * <dt><b>HKEY_CURRENT_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 01
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_LOCAL_MACHINE"></a><a id="hkey_local_machine"></a><dl>
     * <dt><b>HKEY_LOCAL_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 02
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_USERS"></a><a id="hkey_users"></a><dl>
     * <dt><b>HKEY_USERS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 03
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Integer>} pcchOutPathBuffer Pointer to a location that receives the size of the buffer, in <b>TCHAR</b>, pointed to by the <i>szPathBuf</i> parameter.  The value in this location should be set to the count of  <b>TCHAR</b> in the string including the terminating null character. If the size of the  buffer  is too small, this parameter receives the length of the string value without including the terminating null character in the count.
     * @returns {Integer} The 
     * <b>MsiGetComponentPathEx</b> function returns the following values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_NOTUSED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component being requested is disabled on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_BADCONFIG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is not installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the function parameters is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed to run from source.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCEABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component source is inaccessible.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code or component ID is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_BROKEN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is corrupt or partially missing in some way and requires repair.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetcomponentpathexw
     * @since windows8.0
     */
    static MsiGetComponentPathExW(szProductCode, szComponentCode, szUserSid, dwContext, lpOutPathBuffer, pcchOutPathBuffer) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szComponentCode := szComponentCode is String ? StrPtr(szComponentCode) : szComponentCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        lpOutPathBuffer := lpOutPathBuffer is String ? StrPtr(lpOutPathBuffer) : lpOutPathBuffer

        pcchOutPathBufferMarshal := pcchOutPathBuffer is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetComponentPathExW", "ptr", szProductCode, "ptr", szComponentCode, "ptr", szUserSid, "int", dwContext, "ptr", lpOutPathBuffer, pcchOutPathBufferMarshal, pcchOutPathBuffer, "int")
        return result
    }

    /**
     * The MsiProvideAssembly function returns the full path to a Windows Installer component that contains an assembly. The function prompts for a source and performs any necessary installation. MsiProvideAssembly increments the usage count for the feature.
     * @param {PSTR} szAssemblyName The assembly name as a string.
     * @param {PSTR} szAppContext Set to null for global assemblies. For private assemblies, set <i>szAppContext</i> to the full path of the application configuration file  or to the full path of the executable file of the application to which the assembly has been made private.
     * @param {Integer} dwInstallMode 
     * @param {Integer} dwAssemblyInfo 
     * @param {PSTR} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchPathBuf</i> can be null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_NOTUSED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component being requested is disabled on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_FEATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature ID does not identify a known feature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component ID does not specify a known component.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unrecognized product or a feature name was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The buffer overflow is returned.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SOURCE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unable to detect a source.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiprovideassemblya
     * @since windows8.0
     */
    static MsiProvideAssemblyA(szAssemblyName, szAppContext, dwInstallMode, dwAssemblyInfo, lpPathBuf, pcchPathBuf) {
        szAssemblyName := szAssemblyName is String ? StrPtr(szAssemblyName) : szAssemblyName
        szAppContext := szAppContext is String ? StrPtr(szAppContext) : szAppContext
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiProvideAssemblyA", "ptr", szAssemblyName, "ptr", szAppContext, "uint", dwInstallMode, "uint", dwAssemblyInfo, "ptr", lpPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiProvideAssembly function returns the full path to a Windows Installer component that contains an assembly. The function prompts for a source and performs any necessary installation. MsiProvideAssembly increments the usage count for the feature.
     * @param {PWSTR} szAssemblyName The assembly name as a string.
     * @param {PWSTR} szAppContext Set to null for global assemblies. For private assemblies, set <i>szAppContext</i> to the full path of the application configuration file  or to the full path of the executable file of the application to which the assembly has been made private.
     * @param {Integer} dwInstallMode 
     * @param {Integer} dwAssemblyInfo 
     * @param {PWSTR} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchPathBuf</i> can be null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_NOTUSED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component being requested is disabled on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_FEATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature ID does not identify a known feature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component ID does not specify a known component.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unrecognized product or a feature name was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The buffer overflow is returned.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SOURCE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unable to detect a source.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiprovideassemblyw
     * @since windows8.0
     */
    static MsiProvideAssemblyW(szAssemblyName, szAppContext, dwInstallMode, dwAssemblyInfo, lpPathBuf, pcchPathBuf) {
        szAssemblyName := szAssemblyName is String ? StrPtr(szAssemblyName) : szAssemblyName
        szAppContext := szAppContext is String ? StrPtr(szAppContext) : szAppContext
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiProvideAssemblyW", "ptr", szAssemblyName, "ptr", szAppContext, "uint", dwInstallMode, "uint", dwAssemblyInfo, "ptr", lpPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiQueryComponentState function returns the installed state for a component.
     * @param {PSTR} szProductCode Specifies the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID for the product that contains the component.
     * @param {PSTR} szUserSid Specifies the security identifier (SID) of the account under which the instance of the product being queried exists. If <i>dwContext</i> is not MSIINSTALLCONTEXT_MACHINE, null specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b>NULL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * NULL denotes the currently logged on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per–user–managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per–user–non-managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szComponentCode Specifies the component being queried. Component code GUID of the component as found in the ComponentID column of the <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component</a> table.
     * @param {Pointer<Integer>} pdwState Installation state of the component for the specified product instance. This parameter can return one of the following or null values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_LOCAL"></a><a id="installstate_local"></a><dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_SOURCE"></a><a id="installstate_source"></a><dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed to run from the source.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} The <b>MsiQueryComponentState</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The calling process must have administrative privileges to get information for a product installed for a user other than the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component ID does not identify a known component.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Failures that cannot be ascribed to any Windows error code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Buffer too small to get the user SID.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiquerycomponentstatea
     * @since windows8.0
     */
    static MsiQueryComponentStateA(szProductCode, szUserSid, dwContext, szComponentCode, pdwState) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szComponentCode := szComponentCode is String ? StrPtr(szComponentCode) : szComponentCode

        pdwStateMarshal := pdwState is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiQueryComponentStateA", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szComponentCode, pdwStateMarshal, pdwState, "uint")
        return result
    }

    /**
     * The MsiQueryComponentState function returns the installed state for a component.
     * @param {PWSTR} szProductCode Specifies the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID for the product that contains the component.
     * @param {PWSTR} szUserSid Specifies the security identifier (SID) of the account under which the instance of the product being queried exists. If <i>dwContext</i> is not MSIINSTALLCONTEXT_MACHINE, null specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b>NULL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * NULL denotes the currently logged on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per–user–managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per–user–non-managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szComponentCode Specifies the component being queried. Component code GUID of the component as found in the ComponentID column of the <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component</a> table.
     * @param {Pointer<Integer>} pdwState Installation state of the component for the specified product instance. This parameter can return one of the following or null values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_LOCAL"></a><a id="installstate_local"></a><dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_SOURCE"></a><a id="installstate_source"></a><dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed to run from the source.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} The <b>MsiQueryComponentState</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The calling process must have administrative privileges to get information for a product installed for a user other than the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component ID does not identify a known component.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code does not identify a known product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Failures that cannot be ascribed to any Windows error code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Buffer too small to get the user SID.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiquerycomponentstatew
     * @since windows8.0
     */
    static MsiQueryComponentStateW(szProductCode, szUserSid, dwContext, szComponentCode, pdwState) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szComponentCode := szComponentCode is String ? StrPtr(szComponentCode) : szComponentCode

        pdwStateMarshal := pdwState is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiQueryComponentStateW", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szComponentCode, pdwStateMarshal, pdwState, "uint")
        return result
    }

    /**
     * The MsiEnumProducts function enumerates through all the products currently advertised or installed. Products that are installed in both the per-user and per-machine installation context and advertisements are enumerated.
     * @param {Integer} iProductIndex Specifies the index of the product to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumProducts</b> function and then incremented for subsequent calls. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.
     * @param {PSTR} lpProductBuf Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no products to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumproductsa
     * @since windows8.0
     */
    static MsiEnumProductsA(iProductIndex, lpProductBuf) {
        lpProductBuf := lpProductBuf is String ? StrPtr(lpProductBuf) : lpProductBuf

        result := DllCall("msi.dll\MsiEnumProductsA", "uint", iProductIndex, "ptr", lpProductBuf, "uint")
        return result
    }

    /**
     * The MsiEnumProducts function enumerates through all the products currently advertised or installed. Products that are installed in both the per-user and per-machine installation context and advertisements are enumerated.
     * @param {Integer} iProductIndex Specifies the index of the product to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumProducts</b> function and then incremented for subsequent calls. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.
     * @param {PWSTR} lpProductBuf Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no products to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumproductsw
     * @since windows8.0
     */
    static MsiEnumProductsW(iProductIndex, lpProductBuf) {
        lpProductBuf := lpProductBuf is String ? StrPtr(lpProductBuf) : lpProductBuf

        result := DllCall("msi.dll\MsiEnumProductsW", "uint", iProductIndex, "ptr", lpProductBuf, "uint")
        return result
    }

    /**
     * Enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts.
     * @param {PSTR} szProductCode <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product  to be enumerated.  Only instances of products within the scope of the context specified by the <i>szUserSid</i> and <i>dwContext</i> parameters are enumerated. This parameter can be set to <b>NULL</b> to enumerate all products in the specified context.
     * @param {PSTR} szUserSid Null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string s-1-1-0 (Everyone) specifies enumeration across all users in the system. A SID value other than s-1-1-0 is considered a user-SID and restricts enumeration to the current user or any user in the system. This parameter can be set to <b>NULL</b> to restrict the enumeration scope to the current user. 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate products or patches installed as per-machine.  When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the enumeration to a context. This parameter can be any one or a combination of the values shown in the following table.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per–user–managed installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per–user–unmanaged installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per-machine installations. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.
     * 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex Specifies the index of the product to retrieve. This parameter must be zero for the first call to the <b>MsiEnumProductsEx</b> function and then incremented for subsequent calls. The index should be incremented, only if the previous call has returned ERROR_SUCCESS. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.
     * @param {PSTR} szInstalledProductCode Null-terminated string of <b>TCHAR</b> that gives the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance being enumerated. This parameter can be <b>NULL</b>.
     * @param {Pointer<Integer>} pdwInstalledContext Returns the context of the product instance  being enumerated. The output value can be MSIINSTALLCONTEXT_USERMANAGED, MSIINSTALLCONTEXT_USERUNMANAGED, or MSIINSTALLCONTEXT_MACHINE. This parameter can be <b>NULL</b>.
     * @param {PSTR} szSid An output buffer that receives the string SID of the account under which this product instance exists.  This buffer returns an empty string for an instance installed in a per-machine context. 
     *  
     * 
     * 
     * This buffer should be large enough to contain the SID. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is set to a valid pointer, the function returns ERROR_SUCCESS and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b>.  The function can then be called again to retrieve the value, with the  <i>szSid</i> buffer large enough to contain *<i>pcchSid</i> + 1 characters.
     * 
     * If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchSid When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character. 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiEnumProductsEx</b> function returns one of the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If the scope includes users other than the current user, you need administrator privileges. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more products to enumerate.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A product is enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The <i>szSid</i> parameter is too small to get the user SID.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is not installed on the computer in the specified context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumproductsexa
     * @since windows8.0
     */
    static MsiEnumProductsExA(szProductCode, szUserSid, dwContext, dwIndex, szInstalledProductCode, pdwInstalledContext, szSid, pcchSid) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szInstalledProductCode := szInstalledProductCode is String ? StrPtr(szInstalledProductCode) : szInstalledProductCode
        szSid := szSid is String ? StrPtr(szSid) : szSid

        pdwInstalledContextMarshal := pdwInstalledContext is VarRef ? "int*" : "ptr"
        pcchSidMarshal := pcchSid is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumProductsExA", "ptr", szProductCode, "ptr", szUserSid, "uint", dwContext, "uint", dwIndex, "ptr", szInstalledProductCode, pdwInstalledContextMarshal, pdwInstalledContext, "ptr", szSid, pcchSidMarshal, pcchSid, "uint")
        return result
    }

    /**
     * Enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts.
     * @param {PWSTR} szProductCode <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product  to be enumerated.  Only instances of products within the scope of the context specified by the <i>szUserSid</i> and <i>dwContext</i> parameters are enumerated. This parameter can be set to <b>NULL</b> to enumerate all products in the specified context.
     * @param {PWSTR} szUserSid Null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string s-1-1-0 (Everyone) specifies enumeration across all users in the system. A SID value other than s-1-1-0 is considered a user-SID and restricts enumeration to the current user or any user in the system. This parameter can be set to <b>NULL</b> to restrict the enumeration scope to the current user. 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate products or patches installed as per-machine.  When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the enumeration to a context. This parameter can be any one or a combination of the values shown in the following table.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per–user–managed installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per–user–unmanaged installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per-machine installations. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.
     * 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex Specifies the index of the product to retrieve. This parameter must be zero for the first call to the <b>MsiEnumProductsEx</b> function and then incremented for subsequent calls. The index should be incremented, only if the previous call has returned ERROR_SUCCESS. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.
     * @param {PWSTR} szInstalledProductCode Null-terminated string of <b>TCHAR</b> that gives the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance being enumerated. This parameter can be <b>NULL</b>.
     * @param {Pointer<Integer>} pdwInstalledContext Returns the context of the product instance  being enumerated. The output value can be MSIINSTALLCONTEXT_USERMANAGED, MSIINSTALLCONTEXT_USERUNMANAGED, or MSIINSTALLCONTEXT_MACHINE. This parameter can be <b>NULL</b>.
     * @param {PWSTR} szSid An output buffer that receives the string SID of the account under which this product instance exists.  This buffer returns an empty string for an instance installed in a per-machine context. 
     *  
     * 
     * 
     * This buffer should be large enough to contain the SID. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is set to a valid pointer, the function returns ERROR_SUCCESS and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b>.  The function can then be called again to retrieve the value, with the  <i>szSid</i> buffer large enough to contain *<i>pcchSid</i> + 1 characters.
     * 
     * If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchSid When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character. 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiEnumProductsEx</b> function returns one of the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If the scope includes users other than the current user, you need administrator privileges. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more products to enumerate.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A product is enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The <i>szSid</i> parameter is too small to get the user SID.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is not installed on the computer in the specified context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumproductsexw
     * @since windows8.0
     */
    static MsiEnumProductsExW(szProductCode, szUserSid, dwContext, dwIndex, szInstalledProductCode, pdwInstalledContext, szSid, pcchSid) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szInstalledProductCode := szInstalledProductCode is String ? StrPtr(szInstalledProductCode) : szInstalledProductCode
        szSid := szSid is String ? StrPtr(szSid) : szSid

        pdwInstalledContextMarshal := pdwInstalledContext is VarRef ? "int*" : "ptr"
        pcchSidMarshal := pcchSid is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumProductsExW", "ptr", szProductCode, "ptr", szUserSid, "uint", dwContext, "uint", dwIndex, "ptr", szInstalledProductCode, pdwInstalledContextMarshal, pdwInstalledContext, "ptr", szSid, pcchSidMarshal, pcchSid, "uint")
        return result
    }

    /**
     * The MsiEnumRelatedProducts function enumerates products with a specified upgrade code. This function lists the currently installed and advertised products that have the specified UpgradeCode property in their Property table.
     * @param {PSTR} lpUpgradeCode The null-terminated string specifying the upgrade code of related products that the installer is to enumerate.
     * @param {Integer} iProductIndex The zero-based index into the registered products.
     * @param {PSTR} lpProductBuf A buffer to receive the product code GUID. This buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no products to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available starting with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumrelatedproductsa
     * @since windows8.0
     */
    static MsiEnumRelatedProductsA(lpUpgradeCode, iProductIndex, lpProductBuf) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        lpUpgradeCode := lpUpgradeCode is String ? StrPtr(lpUpgradeCode) : lpUpgradeCode
        lpProductBuf := lpProductBuf is String ? StrPtr(lpProductBuf) : lpProductBuf

        result := DllCall("msi.dll\MsiEnumRelatedProductsA", "ptr", lpUpgradeCode, "uint", dwReserved, "uint", iProductIndex, "ptr", lpProductBuf, "uint")
        return result
    }

    /**
     * The MsiEnumRelatedProducts function enumerates products with a specified upgrade code. This function lists the currently installed and advertised products that have the specified UpgradeCode property in their Property table.
     * @param {PWSTR} lpUpgradeCode The null-terminated string specifying the upgrade code of related products that the installer is to enumerate.
     * @param {Integer} iProductIndex The zero-based index into the registered products.
     * @param {PWSTR} lpProductBuf A buffer to receive the product code GUID. This buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no products to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available starting with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumrelatedproductsw
     * @since windows8.0
     */
    static MsiEnumRelatedProductsW(lpUpgradeCode, iProductIndex, lpProductBuf) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        lpUpgradeCode := lpUpgradeCode is String ? StrPtr(lpUpgradeCode) : lpUpgradeCode
        lpProductBuf := lpProductBuf is String ? StrPtr(lpProductBuf) : lpProductBuf

        result := DllCall("msi.dll\MsiEnumRelatedProductsW", "ptr", lpUpgradeCode, "uint", dwReserved, "uint", iProductIndex, "ptr", lpProductBuf, "uint")
        return result
    }

    /**
     * The MsiEnumFeatures function enumerates the published features for a given product. This function retrieves one feature ID each time it is called.
     * @param {PSTR} szProduct Null-terminated string specifying the product code of the product whose features are to be enumerated.
     * @param {Integer} iFeatureIndex Specifies the index of the feature to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumFeatures</b> function and then incremented for subsequent calls. Because features are not ordered, any new feature has an arbitrary index. This means that the function can return features in any order.
     * @param {PSTR} lpFeatureBuf Pointer to a buffer that receives the feature ID. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  The function returns <b>ERROR_MORE_DATA</b> if the length of the feature ID exceeds <b>MAX_FEATURE_CHARS</b>.
     * @param {PSTR} lpParentBuf Pointer to a buffer that receives the feature ID of the parent of the feature. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  If the length of the feature ID of the parent feature exceeds <b>MAX_FEATURE_CHARS</b>, only the first <b>MAX_FEATURE_CHARS</b> characters get copied into the buffer.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no features to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumfeaturesa
     * @since windows8.0
     */
    static MsiEnumFeaturesA(szProduct, iFeatureIndex, lpFeatureBuf, lpParentBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        lpFeatureBuf := lpFeatureBuf is String ? StrPtr(lpFeatureBuf) : lpFeatureBuf
        lpParentBuf := lpParentBuf is String ? StrPtr(lpParentBuf) : lpParentBuf

        result := DllCall("msi.dll\MsiEnumFeaturesA", "ptr", szProduct, "uint", iFeatureIndex, "ptr", lpFeatureBuf, "ptr", lpParentBuf, "uint")
        return result
    }

    /**
     * The MsiEnumFeatures function enumerates the published features for a given product. This function retrieves one feature ID each time it is called.
     * @param {PWSTR} szProduct Null-terminated string specifying the product code of the product whose features are to be enumerated.
     * @param {Integer} iFeatureIndex Specifies the index of the feature to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumFeatures</b> function and then incremented for subsequent calls. Because features are not ordered, any new feature has an arbitrary index. This means that the function can return features in any order.
     * @param {PWSTR} lpFeatureBuf Pointer to a buffer that receives the feature ID. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  The function returns <b>ERROR_MORE_DATA</b> if the length of the feature ID exceeds <b>MAX_FEATURE_CHARS</b>.
     * @param {PWSTR} lpParentBuf Pointer to a buffer that receives the feature ID of the parent of the feature. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  If the length of the feature ID of the parent feature exceeds <b>MAX_FEATURE_CHARS</b>, only the first <b>MAX_FEATURE_CHARS</b> characters get copied into the buffer.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no features to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumfeaturesw
     * @since windows8.0
     */
    static MsiEnumFeaturesW(szProduct, iFeatureIndex, lpFeatureBuf, lpParentBuf) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        lpFeatureBuf := lpFeatureBuf is String ? StrPtr(lpFeatureBuf) : lpFeatureBuf
        lpParentBuf := lpParentBuf is String ? StrPtr(lpParentBuf) : lpParentBuf

        result := DllCall("msi.dll\MsiEnumFeaturesW", "ptr", szProduct, "uint", iFeatureIndex, "ptr", lpFeatureBuf, "ptr", lpParentBuf, "uint")
        return result
    }

    /**
     * The MsiEnumComponents function enumerates the installed components for all products. This function retrieves one component code each time it is called.
     * @param {Integer} iComponentIndex Specifies the index of the component to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponents</b> function and then incremented for subsequent calls. Because components are not ordered, any new component has an arbitrary index. This means that the function can return components in any order.
     * @param {PSTR} lpComponentBuf Pointer to a buffer that receives the component code. This buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no components to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumcomponentsa
     * @since windows8.0
     */
    static MsiEnumComponentsA(iComponentIndex, lpComponentBuf) {
        lpComponentBuf := lpComponentBuf is String ? StrPtr(lpComponentBuf) : lpComponentBuf

        result := DllCall("msi.dll\MsiEnumComponentsA", "uint", iComponentIndex, "ptr", lpComponentBuf, "uint")
        return result
    }

    /**
     * The MsiEnumComponents function enumerates the installed components for all products. This function retrieves one component code each time it is called.
     * @param {Integer} iComponentIndex Specifies the index of the component to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponents</b> function and then incremented for subsequent calls. Because components are not ordered, any new component has an arbitrary index. This means that the function can return components in any order.
     * @param {PWSTR} lpComponentBuf Pointer to a buffer that receives the component code. This buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no components to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumcomponentsw
     * @since windows8.0
     */
    static MsiEnumComponentsW(iComponentIndex, lpComponentBuf) {
        lpComponentBuf := lpComponentBuf is String ? StrPtr(lpComponentBuf) : lpComponentBuf

        result := DllCall("msi.dll\MsiEnumComponentsW", "uint", iComponentIndex, "ptr", lpComponentBuf, "uint")
        return result
    }

    /**
     * The MsiEnumComponentsEx function enumerates installed components. The function retrieves the component code for one component each time it is called. The component code is the string GUID unique to the component, version, and language.
     * @param {PSTR} szUserSid A null-terminated string that contains a security identifier (SID.) The enumeration of installed components extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) specifies an enumeration of all installed components across all products of all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and restricts the enumeration to instances of  applications installed by the specified user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  <p class="note">The special SID string s-1-5-18 (System) cannot be used to enumerate applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * 
     * 
     * </div>
     * <div> </div>
     * @param {Integer} dwContext A flag that restricts the enumeration of  installed component to instances of products installed in the specified installation context. The enumeration includes only product instances installed by the users specified by  <i>szUserSid</i>. 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in  the per–user–managed installation context. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in  the per–user–unmanaged installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in the per-machine installation context. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.
     * 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex Specifies the index of the component to retrieve.  This parameter must be zero (0) for the first call to <b>MsiEnumComponentsEx</b> function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns ERROR_SUCCESS.
     * Components are not ordered and can be returned by the function in any order.
     * @param {PSTR} szInstalledComponentCode An output buffer that receives the component code GUID for the installed component. The length of the buffer should be large enough to hold a  null-terminated string value containing the component code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.
     * @param {Pointer<Integer>} pdwInstalledContext A flag that gives the installation context the application that installed the component.
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in the per–user–managed installation context. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in the per–user–unmanaged installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed  in the per-machine installation installation context. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szSid Receives the security identifier (SID) that identifies the user that installed the application that owns the component. The location receives an empty string if this instance of the application is installed in a per-machine installation context. 
     * 
     * The length of the buffer at this location should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>Empty string</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in a per-machine installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The SID for the user in the system that installed the application. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Integer>} pcchSid Receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character. 
     * 
     * 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.
     * @returns {Integer} The <a href="/windows/desktop/api/msi/nf-msi-msienumproductsexa">MsiEnumProductsEx</a> function returns one of the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Administrator privileges are required to enumerate components of applications installed by users other than the current user. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more components to enumerate.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The provided buffer was too small to hold the entire value.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumcomponentsexa
     * @since windows8.0
     */
    static MsiEnumComponentsExA(szUserSid, dwContext, dwIndex, szInstalledComponentCode, pdwInstalledContext, szSid, pcchSid) {
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szInstalledComponentCode := szInstalledComponentCode is String ? StrPtr(szInstalledComponentCode) : szInstalledComponentCode
        szSid := szSid is String ? StrPtr(szSid) : szSid

        pdwInstalledContextMarshal := pdwInstalledContext is VarRef ? "int*" : "ptr"
        pcchSidMarshal := pcchSid is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumComponentsExA", "ptr", szUserSid, "uint", dwContext, "uint", dwIndex, "ptr", szInstalledComponentCode, pdwInstalledContextMarshal, pdwInstalledContext, "ptr", szSid, pcchSidMarshal, pcchSid, "uint")
        return result
    }

    /**
     * The MsiEnumComponentsEx function enumerates installed components. The function retrieves the component code for one component each time it is called. The component code is the string GUID unique to the component, version, and language.
     * @param {PWSTR} szUserSid A null-terminated string that contains a security identifier (SID.) The enumeration of installed components extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) specifies an enumeration of all installed components across all products of all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and restricts the enumeration to instances of  applications installed by the specified user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  <p class="note">The special SID string s-1-5-18 (System) cannot be used to enumerate applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * 
     * 
     * </div>
     * <div> </div>
     * @param {Integer} dwContext A flag that restricts the enumeration of  installed component to instances of products installed in the specified installation context. The enumeration includes only product instances installed by the users specified by  <i>szUserSid</i>. 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in  the per–user–managed installation context. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in  the per–user–unmanaged installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in the per-machine installation context. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.
     * 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex Specifies the index of the component to retrieve.  This parameter must be zero (0) for the first call to <b>MsiEnumComponentsEx</b> function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns ERROR_SUCCESS.
     * Components are not ordered and can be returned by the function in any order.
     * @param {PWSTR} szInstalledComponentCode An output buffer that receives the component code GUID for the installed component. The length of the buffer should be large enough to hold a  null-terminated string value containing the component code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.
     * @param {Pointer<Integer>} pdwInstalledContext A flag that gives the installation context the application that installed the component.
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in the per–user–managed installation context. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in the per–user–unmanaged installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed  in the per-machine installation installation context. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szSid Receives the security identifier (SID) that identifies the user that installed the application that owns the component. The location receives an empty string if this instance of the application is installed in a per-machine installation context. 
     * 
     * The length of the buffer at this location should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>Empty string</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in a per-machine installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The SID for the user in the system that installed the application. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Integer>} pcchSid Receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character. 
     * 
     * 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.
     * @returns {Integer} The <a href="/windows/desktop/api/msi/nf-msi-msienumproductsexa">MsiEnumProductsEx</a> function returns one of the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Administrator privileges are required to enumerate components of applications installed by users other than the current user. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more components to enumerate.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The provided buffer was too small to hold the entire value.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumcomponentsexw
     * @since windows8.0
     */
    static MsiEnumComponentsExW(szUserSid, dwContext, dwIndex, szInstalledComponentCode, pdwInstalledContext, szSid, pcchSid) {
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szInstalledComponentCode := szInstalledComponentCode is String ? StrPtr(szInstalledComponentCode) : szInstalledComponentCode
        szSid := szSid is String ? StrPtr(szSid) : szSid

        pdwInstalledContextMarshal := pdwInstalledContext is VarRef ? "int*" : "ptr"
        pcchSidMarshal := pcchSid is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumComponentsExW", "ptr", szUserSid, "uint", dwContext, "uint", dwIndex, "ptr", szInstalledComponentCode, pdwInstalledContextMarshal, pdwInstalledContext, "ptr", szSid, pcchSidMarshal, pcchSid, "uint")
        return result
    }

    /**
     * The MsiEnumClients function enumerates the clients for a given installed component. The function retrieves one product code each time it is called.
     * @param {PSTR} szComponent Specifies the component whose clients are to be enumerated.
     * @param {Integer} iProductIndex Specifies the index of the client to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumClients</b> function and then incremented for subsequent calls. Because clients are not ordered, any new client has an arbitrary index. This means that the function can return clients in any order.
     * @param {PSTR} lpProductBuf Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no clients to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified component is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumclientsa
     * @since windows8.0
     */
    static MsiEnumClientsA(szComponent, iProductIndex, lpProductBuf) {
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpProductBuf := lpProductBuf is String ? StrPtr(lpProductBuf) : lpProductBuf

        result := DllCall("msi.dll\MsiEnumClientsA", "ptr", szComponent, "uint", iProductIndex, "ptr", lpProductBuf, "uint")
        return result
    }

    /**
     * The MsiEnumClients function enumerates the clients for a given installed component. The function retrieves one product code each time it is called.
     * @param {PWSTR} szComponent Specifies the component whose clients are to be enumerated.
     * @param {Integer} iProductIndex Specifies the index of the client to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumClients</b> function and then incremented for subsequent calls. Because clients are not ordered, any new client has an arbitrary index. This means that the function can return clients in any order.
     * @param {PWSTR} lpProductBuf Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no clients to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified component is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumclientsw
     * @since windows8.0
     */
    static MsiEnumClientsW(szComponent, iProductIndex, lpProductBuf) {
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpProductBuf := lpProductBuf is String ? StrPtr(lpProductBuf) : lpProductBuf

        result := DllCall("msi.dll\MsiEnumClientsW", "ptr", szComponent, "uint", iProductIndex, "ptr", lpProductBuf, "uint")
        return result
    }

    /**
     * The MsiEnumClientsEx function enumerates the installed applications that use a specified component. The function retrieves a product code for an application each time it is called.
     * @param {PSTR} szComponent The component code GUID that identifies the component. The function enumerates the applications that use this component.
     * @param {PSTR} szUserSid A null-terminated string value that contains a security identifier (SID.) The enumeration of applications extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) enumerates all applications for all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and enumerates the instances of  applications installed by the specified user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an enumeration for a particular user. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an enumeration for all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate applications that exist in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * @param {Integer} dwContext A flag that extends the enumeration to instances of applications installed in the specified installation context. The enumeration includes only instances of applications that are installed by the users identified by  <i>szUserSid</i>.
     * @param {Integer} dwProductIndex Specifies the index of the application to retrieve.  The value of this parameter must be zero (0) in the first call to the function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns <b>ERROR_SUCCESS</b>.
     * @param {PSTR} szProductBuf A string value that receives the product code for the application. The length of the buffer at this location should be large enough to hold a  null-terminated string value containing the product code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.
     * @param {Pointer<Integer>} pdwInstalledContext A flag that gives the installation context of the application.
     * @param {PSTR} szSid Receives the security identifier (SID) that identifies the user that installed the application. The location receives an empty string value if this instance of the application exists in a per-machine installation context. 
     * 
     * The length of the buffer should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>Empty string</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in a per-machine installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The SID for the user that installed the product. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Integer>} pcchSid Pointer to a location in memory that contains a variable that specifies the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of TCHAR in the requested value, not including the terminating null character. 
     * 
     * 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.
     * @returns {Integer} The <b>MsiEnumClientsEx</b> function returns one of the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Administrtator privileges are required to enumerate components of applications installed by users other than the current user. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more applications to enumerate.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The provided buffer was too small to hold the entire value.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumclientsexa
     * @since windows8.0
     */
    static MsiEnumClientsExA(szComponent, szUserSid, dwContext, dwProductIndex, szProductBuf, pdwInstalledContext, szSid, pcchSid) {
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szProductBuf := szProductBuf is String ? StrPtr(szProductBuf) : szProductBuf
        szSid := szSid is String ? StrPtr(szSid) : szSid

        pdwInstalledContextMarshal := pdwInstalledContext is VarRef ? "int*" : "ptr"
        pcchSidMarshal := pcchSid is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumClientsExA", "ptr", szComponent, "ptr", szUserSid, "uint", dwContext, "uint", dwProductIndex, "ptr", szProductBuf, pdwInstalledContextMarshal, pdwInstalledContext, "ptr", szSid, pcchSidMarshal, pcchSid, "uint")
        return result
    }

    /**
     * The MsiEnumClientsEx function enumerates the installed applications that use a specified component. The function retrieves a product code for an application each time it is called.
     * @param {PWSTR} szComponent The component code GUID that identifies the component. The function enumerates the applications that use this component.
     * @param {PWSTR} szUserSid A null-terminated string value that contains a security identifier (SID.) The enumeration of applications extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) enumerates all applications for all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and enumerates the instances of  applications installed by the specified user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an enumeration for a particular user. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an enumeration for all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate applications that exist in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * @param {Integer} dwContext A flag that extends the enumeration to instances of applications installed in the specified installation context. The enumeration includes only instances of applications that are installed by the users identified by  <i>szUserSid</i>.
     * @param {Integer} dwProductIndex Specifies the index of the application to retrieve.  The value of this parameter must be zero (0) in the first call to the function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns <b>ERROR_SUCCESS</b>.
     * @param {PWSTR} szProductBuf A string value that receives the product code for the application. The length of the buffer at this location should be large enough to hold a  null-terminated string value containing the product code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.
     * @param {Pointer<Integer>} pdwInstalledContext A flag that gives the installation context of the application.
     * @param {PWSTR} szSid Receives the security identifier (SID) that identifies the user that installed the application. The location receives an empty string value if this instance of the application exists in a per-machine installation context. 
     * 
     * The length of the buffer should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>Empty string</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in a per-machine installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The SID for the user that installed the product. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Integer>} pcchSid Pointer to a location in memory that contains a variable that specifies the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of TCHAR in the requested value, not including the terminating null character. 
     * 
     * 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.
     * @returns {Integer} The <b>MsiEnumClientsEx</b> function returns one of the following values.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Administrtator privileges are required to enumerate components of applications installed by users other than the current user. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more applications to enumerate.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The provided buffer was too small to hold the entire value.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumclientsexw
     * @since windows8.0
     */
    static MsiEnumClientsExW(szComponent, szUserSid, dwContext, dwProductIndex, szProductBuf, pdwInstalledContext, szSid, pcchSid) {
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szProductBuf := szProductBuf is String ? StrPtr(szProductBuf) : szProductBuf
        szSid := szSid is String ? StrPtr(szSid) : szSid

        pdwInstalledContextMarshal := pdwInstalledContext is VarRef ? "int*" : "ptr"
        pcchSidMarshal := pcchSid is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumClientsExW", "ptr", szComponent, "ptr", szUserSid, "uint", dwContext, "uint", dwProductIndex, "ptr", szProductBuf, pdwInstalledContextMarshal, pdwInstalledContext, "ptr", szSid, pcchSidMarshal, pcchSid, "uint")
        return result
    }

    /**
     * The MsiEnumComponentQualifiers function enumerates the advertised qualifiers for the given component. This function retrieves one qualifier each time it is called.
     * @param {PSTR} szComponent Specifies component whose qualifiers are to be enumerated.
     * @param {Integer} iIndex Specifies the index of the qualifier to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponentQualifiers</b> function and then incremented for subsequent calls. Because qualifiers are not ordered, any new qualifier has an arbitrary index. This means that the function can return qualifiers in any order.
     * @param {PSTR} lpQualifierBuf Pointer to a buffer that receives the qualifier code.
     * @param {Pointer<Integer>} pcchQualifierBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpQualifierBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character.
     * @param {PSTR} lpApplicationDataBuf Pointer to a buffer that receives the application registered data for the qualifier. This parameter can be null.
     * @param {Pointer<Integer>} pcchApplicationDataBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpApplicationDataBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character. This parameter can be null only if the <i>lpApplicationDataBuf </i>parameter is null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is to small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no qualifiers to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified component is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumcomponentqualifiersa
     * @since windows8.0
     */
    static MsiEnumComponentQualifiersA(szComponent, iIndex, lpQualifierBuf, pcchQualifierBuf, lpApplicationDataBuf, pcchApplicationDataBuf) {
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpQualifierBuf := lpQualifierBuf is String ? StrPtr(lpQualifierBuf) : lpQualifierBuf
        lpApplicationDataBuf := lpApplicationDataBuf is String ? StrPtr(lpApplicationDataBuf) : lpApplicationDataBuf

        pcchQualifierBufMarshal := pcchQualifierBuf is VarRef ? "uint*" : "ptr"
        pcchApplicationDataBufMarshal := pcchApplicationDataBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumComponentQualifiersA", "ptr", szComponent, "uint", iIndex, "ptr", lpQualifierBuf, pcchQualifierBufMarshal, pcchQualifierBuf, "ptr", lpApplicationDataBuf, pcchApplicationDataBufMarshal, pcchApplicationDataBuf, "uint")
        return result
    }

    /**
     * The MsiEnumComponentQualifiers function enumerates the advertised qualifiers for the given component. This function retrieves one qualifier each time it is called.
     * @param {PWSTR} szComponent Specifies component whose qualifiers are to be enumerated.
     * @param {Integer} iIndex Specifies the index of the qualifier to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponentQualifiers</b> function and then incremented for subsequent calls. Because qualifiers are not ordered, any new qualifier has an arbitrary index. This means that the function can return qualifiers in any order.
     * @param {PWSTR} lpQualifierBuf Pointer to a buffer that receives the qualifier code.
     * @param {Pointer<Integer>} pcchQualifierBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpQualifierBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character.
     * @param {PWSTR} lpApplicationDataBuf Pointer to a buffer that receives the application registered data for the qualifier. This parameter can be null.
     * @param {Pointer<Integer>} pcchApplicationDataBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpApplicationDataBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character. This parameter can be null only if the <i>lpApplicationDataBuf </i>parameter is null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is to small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no qualifiers to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NOT_ENOUGH_MEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The system does not have enough memory to complete the operation. Available with Windows Server 2003.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified component is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msienumcomponentqualifiersw
     * @since windows8.0
     */
    static MsiEnumComponentQualifiersW(szComponent, iIndex, lpQualifierBuf, pcchQualifierBuf, lpApplicationDataBuf, pcchApplicationDataBuf) {
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpQualifierBuf := lpQualifierBuf is String ? StrPtr(lpQualifierBuf) : lpQualifierBuf
        lpApplicationDataBuf := lpApplicationDataBuf is String ? StrPtr(lpApplicationDataBuf) : lpApplicationDataBuf

        pcchQualifierBufMarshal := pcchQualifierBuf is VarRef ? "uint*" : "ptr"
        pcchApplicationDataBufMarshal := pcchApplicationDataBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiEnumComponentQualifiersW", "ptr", szComponent, "uint", iIndex, "ptr", lpQualifierBuf, pcchQualifierBufMarshal, pcchQualifierBuf, "ptr", lpApplicationDataBuf, pcchApplicationDataBufMarshal, pcchApplicationDataBuf, "uint")
        return result
    }

    /**
     * The MsiOpenProduct function opens a product for use with the functions that access the product database. The MsiCloseHandle function must be called with the handle when the handle is no longer needed.
     * @param {PSTR} szProduct Specifies the product code of the product to be opened.
     * @param {Pointer<MSIHANDLE>} hProduct Pointer to a variable that receives the product handle.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SOURCE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was unavailable.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code was unrecognized.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiopenproducta
     * @since windows8.0
     */
    static MsiOpenProductA(szProduct, hProduct) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiOpenProductA", "ptr", szProduct, "ptr", hProduct, "uint")
        return result
    }

    /**
     * The MsiOpenProduct function opens a product for use with the functions that access the product database. The MsiCloseHandle function must be called with the handle when the handle is no longer needed.
     * @param {PWSTR} szProduct Specifies the product code of the product to be opened.
     * @param {Pointer<MSIHANDLE>} hProduct Pointer to a variable that receives the product handle.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SOURCE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was unavailable.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code was unrecognized.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiopenproductw
     * @since windows8.0
     */
    static MsiOpenProductW(szProduct, hProduct) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiOpenProductW", "ptr", szProduct, "ptr", hProduct, "uint")
        return result
    }

    /**
     * The MsiOpenPackage function opens a package to use with the functions that access the product database.
     * @param {PSTR} szPackagePath The path to the package.
     * @param {Pointer<MSIHANDLE>} hProduct A pointer to a variable that receives the product handle.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_REMOTE_PROHIBITED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Windows Installer does not permit installation from a remote desktop connection.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completes successfully.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * If this function fails, it may return a system error code. For more information, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiopenpackagea
     * @since windows8.0
     */
    static MsiOpenPackageA(szPackagePath, hProduct) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath

        result := DllCall("msi.dll\MsiOpenPackageA", "ptr", szPackagePath, "ptr", hProduct, "uint")
        return result
    }

    /**
     * The MsiOpenPackage function opens a package to use with the functions that access the product database.
     * @param {PWSTR} szPackagePath The path to the package.
     * @param {Pointer<MSIHANDLE>} hProduct A pointer to a variable that receives the product handle.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_REMOTE_PROHIBITED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Windows Installer does not permit installation from a remote desktop connection.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completes successfully.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * If this function fails, it may return a system error code. For more information, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiopenpackagew
     * @since windows8.0
     */
    static MsiOpenPackageW(szPackagePath, hProduct) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath

        result := DllCall("msi.dll\MsiOpenPackageW", "ptr", szPackagePath, "ptr", hProduct, "uint")
        return result
    }

    /**
     * The MsiOpenPackageEx function opens a package to use with functions that access the product database.
     * @param {PSTR} szPackagePath The path to the package.
     * @param {Integer} dwOptions The bit flags to indicate whether or not to ignore the computer state. Pass in 0 (zero) to use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a> behavior. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Constant</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE"></a><a id="msiopenpackageflags_ignoremachinestate"></a><dl>
     * <dt><b>MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Ignore the computer state when creating the product handle.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<MSIHANDLE>} hProduct A pointer to a variable that receives the product handle.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_REMOTE_PROHIBITED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Windows Installer does not permit installation from a remote desktop connection.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completes successfully.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * If this function fails, it may return a system error code. For more information, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiopenpackageexa
     * @since windows8.0
     */
    static MsiOpenPackageExA(szPackagePath, dwOptions, hProduct) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath

        result := DllCall("msi.dll\MsiOpenPackageExA", "ptr", szPackagePath, "uint", dwOptions, "ptr", hProduct, "uint")
        return result
    }

    /**
     * The MsiOpenPackageEx function opens a package to use with functions that access the product database.
     * @param {PWSTR} szPackagePath The path to the package.
     * @param {Integer} dwOptions The bit flags to indicate whether or not to ignore the computer state. Pass in 0 (zero) to use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a> behavior. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Constant</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE"></a><a id="msiopenpackageflags_ignoremachinestate"></a><dl>
     * <dt><b>MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Ignore the computer state when creating the product handle.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<MSIHANDLE>} hProduct A pointer to a variable that receives the product handle.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_REMOTE_PROHIBITED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Windows Installer does not permit installation from a remote desktop connection.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completes successfully.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * If this function fails, it may return a system error code. For more information, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiopenpackageexw
     * @since windows8.0
     */
    static MsiOpenPackageExW(szPackagePath, dwOptions, hProduct) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath

        result := DllCall("msi.dll\MsiOpenPackageExW", "ptr", szPackagePath, "uint", dwOptions, "ptr", hProduct, "uint")
        return result
    }

    /**
     * The MsiGetPatchFileList function is provided a list of .msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.
     * @param {PSTR} szProductCode A null-terminated string value containing the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product which is the target of the patches.  This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szPatchPackages A null-terminated string value that contains the list of Windows Installer patches (.msp files).  Each patch can be specified by the full path to the patch package. The patches in the list are delimited by semicolons. At least one patch must be specified.
     * @param {Pointer<Integer>} pcFiles A pointer to a location that receives the number of files that will be updated on this system by this list of patches specified by <i>szPatchList</i>. This parameter is required.
     * @param {Pointer<Pointer<MSIHANDLE>>} pphFileRecords A pointer to a location that receives a pointer to an array of records. The first field (0-index) of each record  contains the full file path of a file that can be updated when the list of patches in <i>szPatchList</i> are applied on this computer. This parameter is required.
     * @returns {Integer} The <b>MsiGetPatchFileList</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetpatchfilelista
     * @since windows8.0
     */
    static MsiGetPatchFileListA(szProductCode, szPatchPackages, pcFiles, pphFileRecords) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szPatchPackages := szPatchPackages is String ? StrPtr(szPatchPackages) : szPatchPackages

        pcFilesMarshal := pcFiles is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetPatchFileListA", "ptr", szProductCode, "ptr", szPatchPackages, pcFilesMarshal, pcFiles, "ptr*", pphFileRecords, "uint")
        return result
    }

    /**
     * The MsiGetPatchFileList function is provided a list of .msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.
     * @param {PWSTR} szProductCode A null-terminated string value containing the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product which is the target of the patches.  This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szPatchPackages A null-terminated string value that contains the list of Windows Installer patches (.msp files).  Each patch can be specified by the full path to the patch package. The patches in the list are delimited by semicolons. At least one patch must be specified.
     * @param {Pointer<Integer>} pcFiles A pointer to a location that receives the number of files that will be updated on this system by this list of patches specified by <i>szPatchList</i>. This parameter is required.
     * @param {Pointer<Pointer<MSIHANDLE>>} pphFileRecords A pointer to a location that receives a pointer to an array of records. The first field (0-index) of each record  contains the full file path of a file that can be updated when the list of patches in <i>szPatchList</i> are applied on this computer. This parameter is required.
     * @returns {Integer} The <b>MsiGetPatchFileList</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetpatchfilelistw
     * @since windows8.0
     */
    static MsiGetPatchFileListW(szProductCode, szPatchPackages, pcFiles, pphFileRecords) {
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szPatchPackages := szPatchPackages is String ? StrPtr(szPatchPackages) : szPatchPackages

        pcFilesMarshal := pcFiles is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetPatchFileListW", "ptr", szProductCode, "ptr", szPatchPackages, pcFilesMarshal, pcFiles, "ptr*", pphFileRecords, "uint")
        return result
    }

    /**
     * The MsiGetProductProperty function retrieves product properties. These properties are in the product database.
     * @param {MSIHANDLE} hProduct Handle to the product obtained from 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szProperty Specifies the property to retrieve. This is case-sensitive.
     * @param {PSTR} lpValueBuf Pointer to a buffer that receives the property value. The value is truncated and null-terminated if <i>lpValueBuf</i> is too small. This parameter can be null.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.
     * @returns {Integer} The 
     * 					<b>MsiGetProductProperty</b> function return the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid handle was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the entire property value.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetproductpropertya
     * @since windows8.0
     */
    static MsiGetProductPropertyA(hProduct, szProperty, lpValueBuf, pcchValueBuf) {
        hProduct := hProduct is Win32Handle ? NumGet(hProduct, "ptr") : hProduct
        szProperty := szProperty is String ? StrPtr(szProperty) : szProperty
        lpValueBuf := lpValueBuf is String ? StrPtr(lpValueBuf) : lpValueBuf

        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetProductPropertyA", "ptr", hProduct, "ptr", szProperty, "ptr", lpValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * The MsiGetProductProperty function retrieves product properties. These properties are in the product database.
     * @param {MSIHANDLE} hProduct Handle to the product obtained from 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szProperty Specifies the property to retrieve. This is case-sensitive.
     * @param {PWSTR} lpValueBuf Pointer to a buffer that receives the property value. The value is truncated and null-terminated if <i>lpValueBuf</i> is too small. This parameter can be null.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.
     * @returns {Integer} The 
     * 					<b>MsiGetProductProperty</b> function return the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid handle was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the entire property value.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetproductpropertyw
     * @since windows8.0
     */
    static MsiGetProductPropertyW(hProduct, szProperty, lpValueBuf, pcchValueBuf) {
        hProduct := hProduct is Win32Handle ? NumGet(hProduct, "ptr") : hProduct
        szProperty := szProperty is String ? StrPtr(szProperty) : szProperty
        lpValueBuf := lpValueBuf is String ? StrPtr(lpValueBuf) : lpValueBuf

        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetProductPropertyW", "ptr", hProduct, "ptr", szProperty, "ptr", lpValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * The MsiVerifyPackage function verifies that the given file is an installation package.
     * @param {PSTR} szPackagePath Specifies the path and file name of the package.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file is not a valid package.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The parameter is not valid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file is a package.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiverifypackagea
     * @since windows8.0
     */
    static MsiVerifyPackageA(szPackagePath) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath

        result := DllCall("msi.dll\MsiVerifyPackageA", "ptr", szPackagePath, "uint")
        return result
    }

    /**
     * The MsiVerifyPackage function verifies that the given file is an installation package.
     * @param {PWSTR} szPackagePath Specifies the path and file name of the package.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_PACKAGE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file is not a valid package.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file could not be opened.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The parameter is not valid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file is a package.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiverifypackagew
     * @since windows8.0
     */
    static MsiVerifyPackageW(szPackagePath) {
        szPackagePath := szPackagePath is String ? StrPtr(szPackagePath) : szPackagePath

        result := DllCall("msi.dll\MsiVerifyPackageW", "ptr", szPackagePath, "uint")
        return result
    }

    /**
     * Returns descriptive information for a feature.
     * @param {MSIHANDLE} hProduct Handle to the product that owns the feature. This handle is obtained from 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szFeature Feature code for the feature about which information should be returned.
     * @param {Pointer<Integer>} lpAttributes Pointer to a location containing one or more of the following Attribute flags.
     * @param {PSTR} lpTitleBuf Pointer to a buffer to receive the localized name of the feature, which corresponds to the Title field in the <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature Table</a>.
     * 
     * This parameter is optional and can be null.
     * @param {Pointer<Integer>} pcchTitleBuf As input, the size of <i>lpTitleBuf</i>. As output, the number of characters returned in <i>lpTitleBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer that is passed in is too small, the count returned does not include the terminating null character.
     * @param {PSTR} lpHelpBuf Pointer to a buffer to receive the localized description of the feature, which corresponds to the Description field for the feature in the  <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a>.
     * This parameter is optional and can be null.
     * @param {Pointer<Integer>} pcchHelpBuf As input, the size of <i>lpHelpBuf</i>. As output, the number of characters returned in <i>lpHelpBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product handle is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the parameters is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function returns successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_FEATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not known.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetfeatureinfoa
     * @since windows8.0
     */
    static MsiGetFeatureInfoA(hProduct, szFeature, lpAttributes, lpTitleBuf, pcchTitleBuf, lpHelpBuf, pcchHelpBuf) {
        hProduct := hProduct is Win32Handle ? NumGet(hProduct, "ptr") : hProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature
        lpTitleBuf := lpTitleBuf is String ? StrPtr(lpTitleBuf) : lpTitleBuf
        lpHelpBuf := lpHelpBuf is String ? StrPtr(lpHelpBuf) : lpHelpBuf

        lpAttributesMarshal := lpAttributes is VarRef ? "uint*" : "ptr"
        pcchTitleBufMarshal := pcchTitleBuf is VarRef ? "uint*" : "ptr"
        pcchHelpBufMarshal := pcchHelpBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetFeatureInfoA", "ptr", hProduct, "ptr", szFeature, lpAttributesMarshal, lpAttributes, "ptr", lpTitleBuf, pcchTitleBufMarshal, pcchTitleBuf, "ptr", lpHelpBuf, pcchHelpBufMarshal, pcchHelpBuf, "uint")
        return result
    }

    /**
     * Returns descriptive information for a feature.
     * @param {MSIHANDLE} hProduct Handle to the product that owns the feature. This handle is obtained from 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szFeature Feature code for the feature about which information should be returned.
     * @param {Pointer<Integer>} lpAttributes Pointer to a location containing one or more of the following Attribute flags.
     * @param {PWSTR} lpTitleBuf Pointer to a buffer to receive the localized name of the feature, which corresponds to the Title field in the <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature Table</a>.
     * 
     * This parameter is optional and can be null.
     * @param {Pointer<Integer>} pcchTitleBuf As input, the size of <i>lpTitleBuf</i>. As output, the number of characters returned in <i>lpTitleBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer that is passed in is too small, the count returned does not include the terminating null character.
     * @param {PWSTR} lpHelpBuf Pointer to a buffer to receive the localized description of the feature, which corresponds to the Description field for the feature in the  <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a>.
     * This parameter is optional and can be null.
     * @param {Pointer<Integer>} pcchHelpBuf As input, the size of <i>lpHelpBuf</i>. As output, the number of characters returned in <i>lpHelpBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product handle is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the parameters is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function returns successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_FEATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is not known.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetfeatureinfow
     * @since windows8.0
     */
    static MsiGetFeatureInfoW(hProduct, szFeature, lpAttributes, lpTitleBuf, pcchTitleBuf, lpHelpBuf, pcchHelpBuf) {
        hProduct := hProduct is Win32Handle ? NumGet(hProduct, "ptr") : hProduct
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature
        lpTitleBuf := lpTitleBuf is String ? StrPtr(lpTitleBuf) : lpTitleBuf
        lpHelpBuf := lpHelpBuf is String ? StrPtr(lpHelpBuf) : lpHelpBuf

        lpAttributesMarshal := lpAttributes is VarRef ? "uint*" : "ptr"
        pcchTitleBufMarshal := pcchTitleBuf is VarRef ? "uint*" : "ptr"
        pcchHelpBufMarshal := pcchHelpBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetFeatureInfoW", "ptr", hProduct, "ptr", szFeature, lpAttributesMarshal, lpAttributes, "ptr", lpTitleBuf, pcchTitleBufMarshal, pcchTitleBuf, "ptr", lpHelpBuf, pcchHelpBufMarshal, pcchHelpBuf, "uint")
        return result
    }

    /**
     * The MsiInstallMissingComponent function installs files that are unexpectedly missing.
     * @param {PSTR} szProduct Specifies the product code for the product that owns the component to be installed.
     * @param {PSTR} szComponent Identifies the component to be installed.
     * @param {Integer} eInstallState 
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SOURCE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was unavailable.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SUSPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation was suspended.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_USEREXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user exited the installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the parameters is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code is unrecognized.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information about error messages, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiinstallmissingcomponenta
     * @since windows8.0
     */
    static MsiInstallMissingComponentA(szProduct, szComponent, eInstallState) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent

        result := DllCall("msi.dll\MsiInstallMissingComponentA", "ptr", szProduct, "ptr", szComponent, "int", eInstallState, "uint")
        return result
    }

    /**
     * The MsiInstallMissingComponent function installs files that are unexpectedly missing.
     * @param {PWSTR} szProduct Specifies the product code for the product that owns the component to be installed.
     * @param {PWSTR} szComponent Identifies the component to be installed.
     * @param {Integer} eInstallState 
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SOURCE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was unavailable.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SUSPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation was suspended.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_USEREXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user exited the installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the parameters is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code is unrecognized.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information about error messages, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiinstallmissingcomponentw
     * @since windows8.0
     */
    static MsiInstallMissingComponentW(szProduct, szComponent, eInstallState) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent

        result := DllCall("msi.dll\MsiInstallMissingComponentW", "ptr", szProduct, "ptr", szComponent, "int", eInstallState, "uint")
        return result
    }

    /**
     * The MsiInstallMissingFile function installs files that are unexpectedly missing.
     * @param {PSTR} szProduct Specifies the product code for the product that owns the file to be installed.
     * @param {PSTR} szFile Specifies the file to be installed.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SOURCE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was unavailable.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SUSPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation was suspended.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_USEREXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user exited the installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A parameter was invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code is unrecognized.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information about error messages, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiinstallmissingfilea
     * @since windows8.0
     */
    static MsiInstallMissingFileA(szProduct, szFile) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFile := szFile is String ? StrPtr(szFile) : szFile

        result := DllCall("msi.dll\MsiInstallMissingFileA", "ptr", szProduct, "ptr", szFile, "uint")
        return result
    }

    /**
     * The MsiInstallMissingFile function installs files that are unexpectedly missing.
     * @param {PWSTR} szProduct Specifies the product code for the product that owns the file to be installed.
     * @param {PWSTR} szFile Specifies the file to be installed.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SOURCE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was unavailable.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SUSPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation was suspended.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_USEREXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user exited the installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A parameter was invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code is unrecognized.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information about error messages, see 
     * <a href="/windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiinstallmissingfilew
     * @since windows8.0
     */
    static MsiInstallMissingFileW(szProduct, szFile) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szFile := szFile is String ? StrPtr(szFile) : szFile

        result := DllCall("msi.dll\MsiInstallMissingFileW", "ptr", szProduct, "ptr", szFile, "uint")
        return result
    }

    /**
     * The MsiLocateComponent function returns the full path to an installed component without a product code.
     * @param {PSTR} szComponent Specifies the component ID of the component to be located.
     * @param {PSTR} lpPathBuf Pointer to a variable that receives the path to the component. The variable includes the terminating null character.
     * @param {Pointer<Integer>} pcchBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. Upon success of the 
     * <b>MsiLocateComponent</b> function, the variable pointed to by <i>pcchBuf</i> contains the count of characters not including the terminating null character. If the size of the buffer passed in is too small, the function returns INSTALLSTATE_MOREDATA. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_NOTUSED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component being requested is disabled on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is not installed. See Remarks.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the function parameters is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_MOREDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The buffer provided was too small.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed to run from source.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCEABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component source is inaccessible.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code or component ID is unknown. See Remarks.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msilocatecomponenta
     * @since windows8.0
     */
    static MsiLocateComponentA(szComponent, lpPathBuf, pcchBuf) {
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchBufMarshal := pcchBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiLocateComponentA", "ptr", szComponent, "ptr", lpPathBuf, pcchBufMarshal, pcchBuf, "int")
        return result
    }

    /**
     * The MsiLocateComponent function returns the full path to an installed component without a product code.
     * @param {PWSTR} szComponent Specifies the component ID of the component to be located.
     * @param {PWSTR} lpPathBuf Pointer to a variable that receives the path to the component. The variable includes the terminating null character.
     * @param {Pointer<Integer>} pcchBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. Upon success of the 
     * <b>MsiLocateComponent</b> function, the variable pointed to by <i>pcchBuf</i> contains the count of characters not including the terminating null character. If the size of the buffer passed in is too small, the function returns INSTALLSTATE_MOREDATA. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_NOTUSED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component being requested is disabled on the computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_ABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is not installed. See Remarks.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * One of the function parameters is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_MOREDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The buffer provided was too small.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed to run from source.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_SOURCEABSENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component source is inaccessible.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>INSTALLSTATE_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product code or component ID is unknown. See Remarks.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msilocatecomponentw
     * @since windows8.0
     */
    static MsiLocateComponentW(szComponent, lpPathBuf, pcchBuf) {
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        lpPathBuf := lpPathBuf is String ? StrPtr(lpPathBuf) : lpPathBuf

        pcchBufMarshal := pcchBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiLocateComponentW", "ptr", szComponent, "ptr", lpPathBuf, pcchBufMarshal, pcchBuf, "int")
        return result
    }

    /**
     * The MsiSourceListClearAll function removes all network sources from the source list of a patch or product in a specified context. For more information, see Source Resiliency.
     * @param {PSTR} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {PSTR} szUserName The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).  
     * 
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @returns {Integer} The <b>MsiSourceListClearAll</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to clear the source list for this product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_USERNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not resolve the user name.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function did not succeed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not access installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistclearalla
     * @since windows8.0
     */
    static MsiSourceListClearAllA(szProduct, szUserName) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szUserName := szUserName is String ? StrPtr(szUserName) : szUserName

        result := DllCall("msi.dll\MsiSourceListClearAllA", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved, "uint")
        return result
    }

    /**
     * The MsiSourceListClearAll function removes all network sources from the source list of a patch or product in a specified context. For more information, see Source Resiliency.
     * @param {PWSTR} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {PWSTR} szUserName The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).  
     * 
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @returns {Integer} The <b>MsiSourceListClearAll</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to clear the source list for this product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_USERNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not resolve the user name.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function did not succeed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not access installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistclearallw
     * @since windows8.0
     */
    static MsiSourceListClearAllW(szProduct, szUserName) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szUserName := szUserName is String ? StrPtr(szUserName) : szUserName

        result := DllCall("msi.dll\MsiSourceListClearAllW", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved, "uint")
        return result
    }

    /**
     * Adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.
     * @param {PSTR} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {PSTR} szUserName The user name for a per-user installation. On Windows 2000 or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @param {PSTR} szSource Pointer to the string specifying the source.
     * @returns {Integer} <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to add a source.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_USERNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not resolve the user name.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function did not succeed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not access installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was added.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistaddsourcea
     * @since windows8.0
     */
    static MsiSourceListAddSourceA(szProduct, szUserName, szSource) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szUserName := szUserName is String ? StrPtr(szUserName) : szUserName
        szSource := szSource is String ? StrPtr(szSource) : szSource

        result := DllCall("msi.dll\MsiSourceListAddSourceA", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved, "ptr", szSource, "uint")
        return result
    }

    /**
     * Adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.
     * @param {PWSTR} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {PWSTR} szUserName The user name for a per-user installation. On Windows 2000 or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @param {PWSTR} szSource Pointer to the string specifying the source.
     * @returns {Integer} <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to add a source.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_USERNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not resolve the user name.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function did not succeed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not access installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was added.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistaddsourcew
     * @since windows8.0
     */
    static MsiSourceListAddSourceW(szProduct, szUserName, szSource) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szUserName := szUserName is String ? StrPtr(szUserName) : szUserName
        szSource := szSource is String ? StrPtr(szSource) : szSource

        result := DllCall("msi.dll\MsiSourceListAddSourceW", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved, "ptr", szSource, "uint")
        return result
    }

    /**
     * The MsiSourceListForceResolution function forces the installer to search the source list for a valid product source the next time a source is required.
     * @param {PSTR} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {PSTR} szUserName The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user). 
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @returns {Integer} The <b>MsiSourceListForceResolution</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The caller does not have sufficient access to force resolution for the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_USER_NAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified user is not a valid user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function could not complete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistforceresolutiona
     * @since windows8.0
     */
    static MsiSourceListForceResolutionA(szProduct, szUserName) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szUserName := szUserName is String ? StrPtr(szUserName) : szUserName

        result := DllCall("msi.dll\MsiSourceListForceResolutionA", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved, "uint")
        return result
    }

    /**
     * The MsiSourceListForceResolution function forces the installer to search the source list for a valid product source the next time a source is required.
     * @param {PWSTR} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {PWSTR} szUserName The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user). 
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @returns {Integer} The <b>MsiSourceListForceResolution</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The caller does not have sufficient access to force resolution for the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_USER_NAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified user is not a valid user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function could not complete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistforceresolutionw
     * @since windows8.0
     */
    static MsiSourceListForceResolutionW(szProduct, szUserName) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct
        szUserName := szUserName is String ? StrPtr(szUserName) : szUserName

        result := DllCall("msi.dll\MsiSourceListForceResolutionW", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved, "uint")
        return result
    }

    /**
     * Adds or reorders the set of sources of a patch or product in a specified context. It can also create a source list for a patch that does not exist in the specified context.
     * @param {PSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szSource Source to add or move. This parameter is expected to contain only the path without the filename. 
     * The filename is already registered as "PackageName" and can be manipulated through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistsetinfoa">MsiSourceListSetInfo</a>. This argument is required.
     * @param {Integer} dwIndex This parameter provides the new index for the source. All sources are indexed in the source list from 1 to <i>N</i>, where <i>N</i> is the count of sources in the list. Every source in the list has a unique index.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to 0 (zero), the new source is appended to the existing list. If <i>dwIndex</i> is set to 0 and the source already exists in the list, no update is done on the list.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to a  non-zero value less than count (<i>N</i>), the new source is placed at the specified index and the other sources  are re-indexed. If the source already exists, it is moved to the specified index and the other sources are re-indexed.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to a  non-zero value greater than the count of sources (<i>N</i>), the new source is appended to the existing list.  If the source already exists, it is moved to the end of the list and the other sources are re-indexed.
     * @returns {Integer} The <b>MsiSourceListAddSourceEx</b> function  returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to add or move a source. Does not indicate whether the product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not access the Windows Installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was inserted or updated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified patch is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistaddsourceexa
     * @since windows8.0
     */
    static MsiSourceListAddSourceExA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource, dwIndex) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szSource := szSource is String ? StrPtr(szSource) : szSource

        result := DllCall("msi.dll\MsiSourceListAddSourceExA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szSource, "uint", dwIndex, "uint")
        return result
    }

    /**
     * Adds or reorders the set of sources of a patch or product in a specified context. It can also create a source list for a patch that does not exist in the specified context.
     * @param {PWSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szSource Source to add or move. This parameter is expected to contain only the path without the filename. 
     * The filename is already registered as "PackageName" and can be manipulated through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistsetinfoa">MsiSourceListSetInfo</a>. This argument is required.
     * @param {Integer} dwIndex This parameter provides the new index for the source. All sources are indexed in the source list from 1 to <i>N</i>, where <i>N</i> is the count of sources in the list. Every source in the list has a unique index.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to 0 (zero), the new source is appended to the existing list. If <i>dwIndex</i> is set to 0 and the source already exists in the list, no update is done on the list.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to a  non-zero value less than count (<i>N</i>), the new source is placed at the specified index and the other sources  are re-indexed. If the source already exists, it is moved to the specified index and the other sources are re-indexed.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to a  non-zero value greater than the count of sources (<i>N</i>), the new source is appended to the existing list.  If the source already exists, it is moved to the end of the list and the other sources are re-indexed.
     * @returns {Integer} The <b>MsiSourceListAddSourceEx</b> function  returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to add or move a source. Does not indicate whether the product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not access the Windows Installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was inserted or updated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified patch is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistaddsourceexw
     * @since windows8.0
     */
    static MsiSourceListAddSourceExW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource, dwIndex) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szSource := szSource is String ? StrPtr(szSource) : szSource

        result := DllCall("msi.dll\MsiSourceListAddSourceExW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szSource, "uint", dwIndex, "uint")
        return result
    }

    /**
     * The MsiSourceListAddMediaDisk function adds or updates a disk of the media source of a registered product or patch.
     * @param {PSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM .</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwDiskId This parameter provides the ID of the disk being added or updated.
     * @param {PSTR} szVolumeLabel The <i>szVolumeLabel</i> provides the label of the disk being added or updated. An update  overwrites the existing volume label in the registry. To change the disk prompt only, get the existing volume label from the registry and provide it in this call along with the new disk prompt.  Passing a <b>NULL</b> or empty string for <i>szVolumeLabel</i> registers an empty string (0 bytes in length) as the volume label.
     * @param {PSTR} szDiskPrompt On entry to <b>MsiSourceListAddMediaDisk</b>, <i>szDiskPrompt</i> provides the disk prompt of the disk being added or updated. An update overwrites the registered disk prompt.  
     * To change the volume label  only, get the existing disk prompt that is registered and provide it when calling <b>MsiSourceListAddMediaDisk</b> along with the new volume label. Passing <b>NULL</b> or an empty string registers an empty string (0 bytes in length) as the disk prompt.
     * @returns {Integer} The <b>MsiSourceListAddMediaDisk</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The Windows Installer service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value was successfully reordered.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistaddmediadiska
     * @since windows8.0
     */
    static MsiSourceListAddMediaDiskA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId, szVolumeLabel, szDiskPrompt) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szVolumeLabel := szVolumeLabel is String ? StrPtr(szVolumeLabel) : szVolumeLabel
        szDiskPrompt := szDiskPrompt is String ? StrPtr(szDiskPrompt) : szDiskPrompt

        result := DllCall("msi.dll\MsiSourceListAddMediaDiskA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwDiskId, "ptr", szVolumeLabel, "ptr", szDiskPrompt, "uint")
        return result
    }

    /**
     * The MsiSourceListAddMediaDisk function adds or updates a disk of the media source of a registered product or patch.
     * @param {PWSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM .</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwDiskId This parameter provides the ID of the disk being added or updated.
     * @param {PWSTR} szVolumeLabel The <i>szVolumeLabel</i> provides the label of the disk being added or updated. An update  overwrites the existing volume label in the registry. To change the disk prompt only, get the existing volume label from the registry and provide it in this call along with the new disk prompt.  Passing a <b>NULL</b> or empty string for <i>szVolumeLabel</i> registers an empty string (0 bytes in length) as the volume label.
     * @param {PWSTR} szDiskPrompt On entry to <b>MsiSourceListAddMediaDisk</b>, <i>szDiskPrompt</i> provides the disk prompt of the disk being added or updated. An update overwrites the registered disk prompt.  
     * To change the volume label  only, get the existing disk prompt that is registered and provide it when calling <b>MsiSourceListAddMediaDisk</b> along with the new volume label. Passing <b>NULL</b> or an empty string registers an empty string (0 bytes in length) as the disk prompt.
     * @returns {Integer} The <b>MsiSourceListAddMediaDisk</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The Windows Installer service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value was successfully reordered.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistaddmediadiskw
     * @since windows8.0
     */
    static MsiSourceListAddMediaDiskW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId, szVolumeLabel, szDiskPrompt) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szVolumeLabel := szVolumeLabel is String ? StrPtr(szVolumeLabel) : szVolumeLabel
        szDiskPrompt := szDiskPrompt is String ? StrPtr(szDiskPrompt) : szDiskPrompt

        result := DllCall("msi.dll\MsiSourceListAddMediaDiskW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwDiskId, "ptr", szVolumeLabel, "ptr", szDiskPrompt, "uint")
        return result
    }

    /**
     * Removes an existing source for a product or patch in a specified context.
     * @param {PSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string "S-1-1-0" (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szSource Source to remove. This parameter is expected to contain only the path without the filename. 
     * The filename is already registered as "PackageName" and can be manipulated through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistsetinfoa">MsiSourceListSetInfo</a>. This argument is required.
     * @returns {Integer} The <b>MsiSourceListClearSource</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to remove a source. Does not indicate whether the product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not access the Windows Installer service
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was removed or not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified patch is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistclearsourcea
     * @since windows8.0
     */
    static MsiSourceListClearSourceA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szSource := szSource is String ? StrPtr(szSource) : szSource

        result := DllCall("msi.dll\MsiSourceListClearSourceA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szSource, "uint")
        return result
    }

    /**
     * Removes an existing source for a product or patch in a specified context.
     * @param {PWSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string "S-1-1-0" (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szSource Source to remove. This parameter is expected to contain only the path without the filename. 
     * The filename is already registered as "PackageName" and can be manipulated through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistsetinfoa">MsiSourceListSetInfo</a>. This argument is required.
     * @returns {Integer} The <b>MsiSourceListClearSource</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to remove a source. Does not indicate whether the product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not access the Windows Installer service
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source was removed or not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified patch is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistclearsourcew
     * @since windows8.0
     */
    static MsiSourceListClearSourceW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szSource := szSource is String ? StrPtr(szSource) : szSource

        result := DllCall("msi.dll\MsiSourceListClearSourceW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szSource, "uint")
        return result
    }

    /**
     * The MsiSourceListClearMediaDisk function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.
     * @param {PSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwDiskId This parameter provides the ID of the disk being removed.
     * @returns {Integer} The <b>MsiSourceListClearMediaDisk</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The Windows Installer service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value was successfully removed or not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistclearmediadiska
     * @since windows8.0
     */
    static MsiSourceListClearMediaDiskA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid

        result := DllCall("msi.dll\MsiSourceListClearMediaDiskA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwDiskId, "uint")
        return result
    }

    /**
     * The MsiSourceListClearMediaDisk function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.
     * @param {PWSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwDiskId This parameter provides the ID of the disk being removed.
     * @returns {Integer} The <b>MsiSourceListClearMediaDisk</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The Windows Installer service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value was successfully removed or not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistclearmediadiskw
     * @since windows8.0
     */
    static MsiSourceListClearMediaDiskW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid

        result := DllCall("msi.dll\MsiSourceListClearMediaDiskW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwDiskId, "uint")
        return result
    }

    /**
     * The MsiSourceListClearAllEx function removes all the existing sources of a given source type for the specified product or patch instance.
     * @param {PSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="_MSISOURCETYPE_MEDIA"></a><a id="_msisourcetype_media"></a><dl>
     * <dt><b> MSISOURCETYPE_MEDIA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is media.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to add or move a source. Does not indicate whether the product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Cannot access the Windows Installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * All sources of the specified type were removed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified patch is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistclearallexa
     * @since windows8.0
     */
    static MsiSourceListClearAllExA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid

        result := DllCall("msi.dll\MsiSourceListClearAllExA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint")
        return result
    }

    /**
     * The MsiSourceListClearAllEx function removes all the existing sources of a given source type for the specified product or patch instance.
     * @param {PWSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="_MSISOURCETYPE_MEDIA"></a><a id="_msisourcetype_media"></a><dl>
     * <dt><b> MSISOURCETYPE_MEDIA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is media.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to add or move a source. Does not indicate whether the product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Cannot access the Windows Installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * All sources of the specified type were removed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified patch is unknown.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistclearallexw
     * @since windows8.0
     */
    static MsiSourceListClearAllExW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid

        result := DllCall("msi.dll\MsiSourceListClearAllExW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint")
        return result
    }

    /**
     * The MsiSourceListForceResolutionEx function removes the registration of the property called &quot;LastUsedSource&quot;.
     * @param {PSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value . 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} The <b>MsiSourceListForceResolutionEx</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to modify the specified source list. Does not indicate whether the product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not access the Windows Installer service
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The "LastUsedSource" registration was cleared. 
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     *  The patch was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product or patch was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistforceresolutionexa
     * @since windows8.0
     */
    static MsiSourceListForceResolutionExA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid

        result := DllCall("msi.dll\MsiSourceListForceResolutionExA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint")
        return result
    }

    /**
     * The MsiSourceListForceResolutionEx function removes the registration of the property called &quot;LastUsedSource&quot;.
     * @param {PWSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value . 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} The <b>MsiSourceListForceResolutionEx</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to modify the specified source list. Does not indicate whether the product or patch was found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Could not access the Windows Installer service
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The "LastUsedSource" registration was cleared. 
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     *  The patch was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The specified product or patch was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistforceresolutionexw
     * @since windows8.0
     */
    static MsiSourceListForceResolutionExW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid

        result := DllCall("msi.dll\MsiSourceListForceResolutionExW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint")
        return result
    }

    /**
     * Sets information about the source list for a product or patch in a specific context.
     * @param {PSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns "ERROR_INVALID_PARAMETER".</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string "S-1-1-0" (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * If the property being set is "LastUsedSource", this parameter also specifies the type of source as network or URL. In this case, the <i>dwOptions</i> parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szProperty 
     * @param {PSTR} szValue The new value of the property. No validation of the new value is performed. This value cannot be <b>NULL</b>. It can be an empty string.
     * @returns {Integer} The <b>MsiSourceListSetInfo</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to set the source list for the specified product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The Windows Installer service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property was set.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source property was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistsetinfoa
     * @since windows8.0
     */
    static MsiSourceListSetInfoA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szProperty := szProperty is String ? StrPtr(szProperty) : szProperty
        szValue := szValue is String ? StrPtr(szValue) : szValue

        result := DllCall("msi.dll\MsiSourceListSetInfoA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szProperty, "ptr", szValue, "uint")
        return result
    }

    /**
     * Sets information about the source list for a product or patch in a specific context.
     * @param {PWSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns "ERROR_INVALID_PARAMETER".</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string "S-1-1-0" (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * If the property being set is "LastUsedSource", this parameter also specifies the type of source as network or URL. In this case, the <i>dwOptions</i> parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szProperty 
     * @param {PWSTR} szValue The new value of the property. No validation of the new value is performed. This value cannot be <b>NULL</b>. It can be an empty string.
     * @returns {Integer} The <b>MsiSourceListSetInfo</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to set the source list for the specified product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The Windows Installer service could not be accessed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property was set.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source property was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistsetinfow
     * @since windows8.0
     */
    static MsiSourceListSetInfoW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szProperty := szProperty is String ? StrPtr(szProperty) : szProperty
        szValue := szValue is String ? StrPtr(szValue) : szValue

        result := DllCall("msi.dll\MsiSourceListSetInfoW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szProperty, "ptr", szValue, "uint")
        return result
    }

    /**
     * The MsiSourceListGetInfo function retrieves information about the source list for a product or patch in a specific context.
     * @param {PSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szUserSid This parameter can be a string security identifier (SID) that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PSTR} szProperty 
     * @param {PSTR} szValue An output buffer that receives  the information. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If the <i>szValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters. 
     * 
     * If <i>szValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchValue A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szValue</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiSourceListGetInfo</b> function returns the following values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The provided buffer is not sufficient to contain the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property is retrieved successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source property is not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistgetinfoa
     * @since windows8.0
     */
    static MsiSourceListGetInfoA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue, pcchValue) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szProperty := szProperty is String ? StrPtr(szProperty) : szProperty
        szValue := szValue is String ? StrPtr(szValue) : szValue

        pcchValueMarshal := pcchValue is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiSourceListGetInfoA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szProperty, "ptr", szValue, pcchValueMarshal, pcchValue, "uint")
        return result
    }

    /**
     * The MsiSourceListGetInfo function retrieves information about the source list for a product or patch in a specific context.
     * @param {PWSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szUserSid This parameter can be a string security identifier (SID) that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {PWSTR} szProperty 
     * @param {PWSTR} szValue An output buffer that receives  the information. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If the <i>szValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters. 
     * 
     * If <i>szValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchValue A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szValue</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiSourceListGetInfo</b> function returns the following values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The provided buffer is not sufficient to contain the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The property is retrieved successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source property is not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistgetinfow
     * @since windows8.0
     */
    static MsiSourceListGetInfoW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue, pcchValue) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szProperty := szProperty is String ? StrPtr(szProperty) : szProperty
        szValue := szValue is String ? StrPtr(szValue) : szValue

        pcchValueMarshal := pcchValue is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiSourceListGetInfoW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szProperty, "ptr", szValue, pcchValueMarshal, pcchValue, "uint")
        return result
    }

    /**
     * The MsiSourceListEnumSources function enumerates the sources in the source list of a specified patch or product.
     * @param {PSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szUserSid A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A <b>NULL</b> indicates the current user who is logged on. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumSources</b> function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.  The index should be incremented only if the previous call returned ERROR_SUCCESS.
     * @param {PSTR} szSource A pointer to a  buffer that receives the path to the source that is  being enumerated. This buffer should be large enough to contain the received value. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szSource</i> is set to <b>NULL</b> and <i>pcchSource</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szSource</i> buffer large enough to contain *<i>pcchSource</i> + 1 characters. 
     * 
     * If <i>szSource</i> and <i>pcchSource</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchSource A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSource</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSource</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiSourceListEnumSources</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The provided buffer is not sufficient to contain the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more sources in the specified list to enumerate.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A source is enumerated successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch specified is not installed on the computer in the specified contexts.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product specified is not installed on the computer in the specified contexts.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistenumsourcesa
     * @since windows8.0
     */
    static MsiSourceListEnumSourcesA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, szSource, pcchSource) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szSource := szSource is String ? StrPtr(szSource) : szSource

        pcchSourceMarshal := pcchSource is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiSourceListEnumSourcesA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwIndex, "ptr", szSource, pcchSourceMarshal, pcchSource, "uint")
        return result
    }

    /**
     * The MsiSourceListEnumSources function enumerates the sources in the source list of a specified patch or product.
     * @param {PWSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szUserSid A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A <b>NULL</b> indicates the current user who is logged on. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumSources</b> function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.  The index should be incremented only if the previous call returned ERROR_SUCCESS.
     * @param {PWSTR} szSource A pointer to a  buffer that receives the path to the source that is  being enumerated. This buffer should be large enough to contain the received value. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szSource</i> is set to <b>NULL</b> and <i>pcchSource</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szSource</i> buffer large enough to contain *<i>pcchSource</i> + 1 characters. 
     * 
     * If <i>szSource</i> and <i>pcchSource</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchSource A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSource</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSource</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiSourceListEnumSources</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The provided buffer is not sufficient to contain the requested data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more sources in the specified list to enumerate.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A source is enumerated successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch specified is not installed on the computer in the specified contexts.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product specified is not installed on the computer in the specified contexts.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistenumsourcesw
     * @since windows8.0
     */
    static MsiSourceListEnumSourcesW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, szSource, pcchSource) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szSource := szSource is String ? StrPtr(szSource) : szSource

        pcchSourceMarshal := pcchSource is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiSourceListEnumSourcesW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwIndex, "ptr", szSource, pcchSourceMarshal, pcchSource, "uint")
        return result
    }

    /**
     * The MsiSourceListEnumMediaDisks function enumerates the list of disks registered for the media source for a patch or product.
     * @param {PSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PSTR} szUserSid A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value that  specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumMediaDisks</b>  function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.
     * @param {Pointer<Integer>} pdwDiskId On entry to <b>MsiSourceListEnumMediaDisks</b> this parameter provides a pointer to a <b>DWORD</b> to receive the ID of the disk that is being enumerated.   This parameter is optional.
     * @param {PSTR} szVolumeLabel An output buffer that receives  the volume label of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchVolumeLabel</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szVolumeLabel</i> and <i>pcchVolumeLabel</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchVolumeLabel A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szVolumeLabel</i> buffer. When the function returns, this parameter is the number of <b>TCHAR</b> in the received  value,  not including the terminating null character. 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szVolumeLabel</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @param {PSTR} szDiskPrompt An output buffer that receives  the disk prompt of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If the <i>szDiskPrompt</i> is set to <b>NULL</b> and <i>pcchDiskPrompt</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szDiskPrompt</i> buffer large enough to contain *<i>pcchDiskPrompt</i> + 1 characters.
     * 
     * If <i>szDiskPrompt</i> and <i>pcchDiskPrompt</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchDiskPrompt A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szDiskPrompt</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szDiskPrompt</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiSourceListEnumMediaDisks</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product, or patch is found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more disks registered for this product or patch.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value is enumerated successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The buffer that is provided is too small to contain the requested information.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistenummediadisksa
     * @since windows8.0
     */
    static MsiSourceListEnumMediaDisksA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, pdwDiskId, szVolumeLabel, pcchVolumeLabel, szDiskPrompt, pcchDiskPrompt) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szVolumeLabel := szVolumeLabel is String ? StrPtr(szVolumeLabel) : szVolumeLabel
        szDiskPrompt := szDiskPrompt is String ? StrPtr(szDiskPrompt) : szDiskPrompt

        pdwDiskIdMarshal := pdwDiskId is VarRef ? "uint*" : "ptr"
        pcchVolumeLabelMarshal := pcchVolumeLabel is VarRef ? "uint*" : "ptr"
        pcchDiskPromptMarshal := pcchDiskPrompt is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiSourceListEnumMediaDisksA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwIndex, pdwDiskIdMarshal, pdwDiskId, "ptr", szVolumeLabel, pcchVolumeLabelMarshal, pcchVolumeLabel, "ptr", szDiskPrompt, pcchDiskPromptMarshal, pcchDiskPrompt, "uint")
        return result
    }

    /**
     * The MsiSourceListEnumMediaDisks function enumerates the list of disks registered for the media source for a patch or product.
     * @param {PWSTR} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {PWSTR} szUserSid A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value that  specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumMediaDisks</b>  function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.
     * @param {Pointer<Integer>} pdwDiskId On entry to <b>MsiSourceListEnumMediaDisks</b> this parameter provides a pointer to a <b>DWORD</b> to receive the ID of the disk that is being enumerated.   This parameter is optional.
     * @param {PWSTR} szVolumeLabel An output buffer that receives  the volume label of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchVolumeLabel</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szVolumeLabel</i> and <i>pcchVolumeLabel</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchVolumeLabel A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szVolumeLabel</i> buffer. When the function returns, this parameter is the number of <b>TCHAR</b> in the received  value,  not including the terminating null character. 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szVolumeLabel</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @param {PWSTR} szDiskPrompt An output buffer that receives  the disk prompt of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If the <i>szDiskPrompt</i> is set to <b>NULL</b> and <i>pcchDiskPrompt</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szDiskPrompt</i> buffer large enough to contain *<i>pcchDiskPrompt</i> + 1 characters.
     * 
     * If <i>szDiskPrompt</i> and <i>pcchDiskPrompt</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<Integer>} pcchDiskPrompt A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szDiskPrompt</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szDiskPrompt</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {Integer} The <b>MsiSourceListEnumMediaDisks</b> function returns the following values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product, or patch is found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more disks registered for this product or patch.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value is enumerated successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The buffer that is provided is too small to contain the requested information.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected internal failure.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msisourcelistenummediadisksw
     * @since windows8.0
     */
    static MsiSourceListEnumMediaDisksW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, pdwDiskId, szVolumeLabel, pcchVolumeLabel, szDiskPrompt, pcchDiskPrompt) {
        szProductCodeOrPatchCode := szProductCodeOrPatchCode is String ? StrPtr(szProductCodeOrPatchCode) : szProductCodeOrPatchCode
        szUserSid := szUserSid is String ? StrPtr(szUserSid) : szUserSid
        szVolumeLabel := szVolumeLabel is String ? StrPtr(szVolumeLabel) : szVolumeLabel
        szDiskPrompt := szDiskPrompt is String ? StrPtr(szDiskPrompt) : szDiskPrompt

        pdwDiskIdMarshal := pdwDiskId is VarRef ? "uint*" : "ptr"
        pcchVolumeLabelMarshal := pcchVolumeLabel is VarRef ? "uint*" : "ptr"
        pcchDiskPromptMarshal := pcchDiskPrompt is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiSourceListEnumMediaDisksW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwIndex, pdwDiskIdMarshal, pdwDiskId, "ptr", szVolumeLabel, pcchVolumeLabelMarshal, pcchVolumeLabel, "ptr", szDiskPrompt, pcchDiskPromptMarshal, pcchDiskPrompt, "uint")
        return result
    }

    /**
     * The MsiGetFileVersion returns the version string and language string in the format that the installer expects to find them in the database.
     * @param {PSTR} szFilePath Specifies the path to the file.
     * @param {PSTR} lpVersionBuf Returns the file version. 
     * 
     * Set to 0 for language information only.
     * @param {Pointer<Integer>} pcchVersionBuf In and out buffer count as the number of <b>TCHAR</b>. 
     * 
     * Set to 0 (zero) for language information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @param {PSTR} lpLangBuf Returns the file language. 
     * 
     * Set to 0 (zero) for version information only.
     * @param {Pointer<Integer>} pcchLangBuf In and out buffer count as the number of <b>TCHAR</b>. 
     * 
     * Set to 0 (zero) for version information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Successful completion.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * File does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * File cannot be opened to get version information.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * File does not contain version information.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The version information is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>E_FAIL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected error.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetfileversiona
     * @since windows8.0
     */
    static MsiGetFileVersionA(szFilePath, lpVersionBuf, pcchVersionBuf, lpLangBuf, pcchLangBuf) {
        szFilePath := szFilePath is String ? StrPtr(szFilePath) : szFilePath
        lpVersionBuf := lpVersionBuf is String ? StrPtr(lpVersionBuf) : lpVersionBuf
        lpLangBuf := lpLangBuf is String ? StrPtr(lpLangBuf) : lpLangBuf

        pcchVersionBufMarshal := pcchVersionBuf is VarRef ? "uint*" : "ptr"
        pcchLangBufMarshal := pcchLangBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetFileVersionA", "ptr", szFilePath, "ptr", lpVersionBuf, pcchVersionBufMarshal, pcchVersionBuf, "ptr", lpLangBuf, pcchLangBufMarshal, pcchLangBuf, "uint")
        return result
    }

    /**
     * The MsiGetFileVersion returns the version string and language string in the format that the installer expects to find them in the database.
     * @param {PWSTR} szFilePath Specifies the path to the file.
     * @param {PWSTR} lpVersionBuf Returns the file version. 
     * 
     * Set to 0 for language information only.
     * @param {Pointer<Integer>} pcchVersionBuf In and out buffer count as the number of <b>TCHAR</b>. 
     * 
     * Set to 0 (zero) for language information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @param {PWSTR} lpLangBuf Returns the file language. 
     * 
     * Set to 0 (zero) for version information only.
     * @param {Pointer<Integer>} pcchLangBuf In and out buffer count as the number of <b>TCHAR</b>. 
     * 
     * Set to 0 (zero) for version information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Successful completion.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * File does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * File cannot be opened to get version information.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_INVALID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * File does not contain version information.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The version information is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>E_FAIL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected error.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetfileversionw
     * @since windows8.0
     */
    static MsiGetFileVersionW(szFilePath, lpVersionBuf, pcchVersionBuf, lpLangBuf, pcchLangBuf) {
        szFilePath := szFilePath is String ? StrPtr(szFilePath) : szFilePath
        lpVersionBuf := lpVersionBuf is String ? StrPtr(lpVersionBuf) : lpVersionBuf
        lpLangBuf := lpLangBuf is String ? StrPtr(lpLangBuf) : lpLangBuf

        pcchVersionBufMarshal := pcchVersionBuf is VarRef ? "uint*" : "ptr"
        pcchLangBufMarshal := pcchLangBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetFileVersionW", "ptr", szFilePath, "ptr", lpVersionBuf, pcchVersionBufMarshal, pcchVersionBuf, "ptr", lpLangBuf, pcchLangBufMarshal, pcchLangBuf, "uint")
        return result
    }

    /**
     * The MsiGetFileHash function takes the path to a file and returns a 128-bit hash of that file. Authoring tools may use MsiGetFileHash to obtain the file hash needed to populate the MsiFileHash table.
     * @param {PSTR} szFilePath Path to file that is to be hashed.
     * @param {Integer} dwOptions The value in this column must be 0. This parameter is reserved for future use.
     * @param {Pointer<MSIFILEHASHINFO>} pHash Pointer to the returned file hash information.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file could not be opened to get version information.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>E_FAIL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected error has occurred.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetfilehasha
     * @since windows8.0
     */
    static MsiGetFileHashA(szFilePath, dwOptions, pHash) {
        szFilePath := szFilePath is String ? StrPtr(szFilePath) : szFilePath

        result := DllCall("msi.dll\MsiGetFileHashA", "ptr", szFilePath, "uint", dwOptions, "ptr", pHash, "uint")
        return result
    }

    /**
     * The MsiGetFileHash function takes the path to a file and returns a 128-bit hash of that file. Authoring tools may use MsiGetFileHash to obtain the file hash needed to populate the MsiFileHash table.
     * @param {PWSTR} szFilePath Path to file that is to be hashed.
     * @param {Integer} dwOptions The value in this column must be 0. This parameter is reserved for future use.
     * @param {Pointer<MSIFILEHASHINFO>} pHash Pointer to the returned file hash information.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FILE_NOT_FOUND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file could not be opened to get version information.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>E_FAIL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Unexpected error has occurred.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetfilehashw
     * @since windows8.0
     */
    static MsiGetFileHashW(szFilePath, dwOptions, pHash) {
        szFilePath := szFilePath is String ? StrPtr(szFilePath) : szFilePath

        result := DllCall("msi.dll\MsiGetFileHashW", "ptr", szFilePath, "uint", dwOptions, "ptr", pHash, "uint")
        return result
    }

    /**
     * The MsiGetFileSignatureInformation function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.
     * @param {PSTR} szSignedObjectPath Pointer to a null-terminated string specifying the full path to the file that contains the digital signature.
     * @param {Integer} dwFlags Special error case flags. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSI_INVALID_HASH_IS_FATAL"></a><a id="msi_invalid_hash_is_fatal"></a><dl>
     * <dt><b>MSI_INVALID_HASH_IS_FATAL</b></dt>
     * <dt>0x1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Without this flag set, and when requesting only the certificate context, an invalid hash in the digital signature does not cause 
     * <b>MsiGetFileSignatureInformation</b> to return a fatal error. 
     * 
     * 
     * 
     * 
     * To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Pointer<CERT_CONTEXT>>} ppcCertContext Returned signer certificate context
     * @param {Pointer} pbHashData Returned hash buffer. This parameter can be <b>NULL</b> if the hash data is not being requested.
     * @param {Pointer<Integer>} pcbHashData Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbHashData</i> parameter. This parameter cannot be <b>NULL</b> if <i>pbHashData</i> is non-<b>NULL</b>. If ERROR_MORE_DATA is returned, <i>pbHashData</i> gives the size of the buffer required to hold the hash data. If ERROR_SUCCESS is returned, it gives the number of bytes written to the hash buffer. The <i>pcbHashData</i> parameter is ignored if <i>pbHashData</i> is <b>NULL</b>.
     * @returns {HRESULT} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS/S_OK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Successful completion.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Invalid parameter was specified.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 
     * <a href="/windows/desktop/api/wintrust/nf-wintrust-winverifytrust">WinVerifyTrust</a> is not available on the system. 
     * <b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data. If ERROR_MORE_DATA is returned, <i>pcbHashData</i> gives the size of the buffer required to hold the hash data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_NOSIGNATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * File is not signed
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_BAD_DIGEST</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file's current hash is invalid according to the hash stored in the file's digital signature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>CERT_E_REVOKED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file's signer certificate has been revoked. The file's digital signature is compromised.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_SUBJECT_NOT_TRUSTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The subject failed the specified verification action. Most trust providers return a more detailed error code that describes the reason for the failure.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_PROVIDER_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider is not recognized on this system.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_ACTION_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider does not support the specified action.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_SUBJECT_FORM_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider does not support the form specified for the subject.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * 
     * 
     * <b>MsiGetFileSignatureInformation</b> also returns all the Win32 error values mapped to their equivalent <b>HRESULT</b> data type by 
     * <b>HRESULT_FROM_WIN32</b>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetfilesignatureinformationa
     * @since windows8.0
     */
    static MsiGetFileSignatureInformationA(szSignedObjectPath, dwFlags, ppcCertContext, pbHashData, pcbHashData) {
        szSignedObjectPath := szSignedObjectPath is String ? StrPtr(szSignedObjectPath) : szSignedObjectPath

        pcbHashDataMarshal := pcbHashData is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetFileSignatureInformationA", "ptr", szSignedObjectPath, "uint", dwFlags, "ptr*", ppcCertContext, "ptr", pbHashData, pcbHashDataMarshal, pcbHashData, "int")
        if(result != 0)
            throw OSError(result)

        return result
    }

    /**
     * The MsiGetFileSignatureInformation function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.
     * @param {PWSTR} szSignedObjectPath Pointer to a null-terminated string specifying the full path to the file that contains the digital signature.
     * @param {Integer} dwFlags Special error case flags. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSI_INVALID_HASH_IS_FATAL"></a><a id="msi_invalid_hash_is_fatal"></a><dl>
     * <dt><b>MSI_INVALID_HASH_IS_FATAL</b></dt>
     * <dt>0x1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Without this flag set, and when requesting only the certificate context, an invalid hash in the digital signature does not cause 
     * <b>MsiGetFileSignatureInformation</b> to return a fatal error. 
     * 
     * 
     * 
     * 
     * To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Pointer<CERT_CONTEXT>>} ppcCertContext Returned signer certificate context
     * @param {Pointer} pbHashData Returned hash buffer. This parameter can be <b>NULL</b> if the hash data is not being requested.
     * @param {Pointer<Integer>} pcbHashData Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbHashData</i> parameter. This parameter cannot be <b>NULL</b> if <i>pbHashData</i> is non-<b>NULL</b>. If ERROR_MORE_DATA is returned, <i>pbHashData</i> gives the size of the buffer required to hold the hash data. If ERROR_SUCCESS is returned, it gives the number of bytes written to the hash buffer. The <i>pcbHashData</i> parameter is ignored if <i>pbHashData</i> is <b>NULL</b>.
     * @returns {HRESULT} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS/S_OK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Successful completion.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Invalid parameter was specified.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 
     * <a href="/windows/desktop/api/wintrust/nf-wintrust-winverifytrust">WinVerifyTrust</a> is not available on the system. 
     * <b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data. If ERROR_MORE_DATA is returned, <i>pcbHashData</i> gives the size of the buffer required to hold the hash data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_NOSIGNATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * File is not signed
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_BAD_DIGEST</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file's current hash is invalid according to the hash stored in the file's digital signature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>CERT_E_REVOKED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file's signer certificate has been revoked. The file's digital signature is compromised.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_SUBJECT_NOT_TRUSTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The subject failed the specified verification action. Most trust providers return a more detailed error code that describes the reason for the failure.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_PROVIDER_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider is not recognized on this system.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_ACTION_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider does not support the specified action.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_SUBJECT_FORM_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider does not support the form specified for the subject.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * 
     * 
     * <b>MsiGetFileSignatureInformation</b> also returns all the Win32 error values mapped to their equivalent <b>HRESULT</b> data type by 
     * <b>HRESULT_FROM_WIN32</b>.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetfilesignatureinformationw
     * @since windows8.0
     */
    static MsiGetFileSignatureInformationW(szSignedObjectPath, dwFlags, ppcCertContext, pbHashData, pcbHashData) {
        szSignedObjectPath := szSignedObjectPath is String ? StrPtr(szSignedObjectPath) : szSignedObjectPath

        pcbHashDataMarshal := pcbHashData is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetFileSignatureInformationW", "ptr", szSignedObjectPath, "uint", dwFlags, "ptr*", ppcCertContext, "ptr", pbHashData, pcbHashDataMarshal, pcbHashData, "int")
        if(result != 0)
            throw OSError(result)

        return result
    }

    /**
     * The MsiGetShortcutTarget function examines a shortcut and returns its product, feature name, and component if available.
     * @param {PSTR} szShortcutPath A null-terminated string specifying the full path to a shortcut.
     * @param {PSTR} szProductCode A GUID for the product code of the shortcut. This string buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.
     * @param {PSTR} szFeatureId The feature name of the shortcut. The string buffer must be MAX_FEATURE_CHARS+1 characters long. This parameter can be null.
     * @param {PSTR} szComponentCode A GUID of the component code. This string buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetshortcuttargeta
     * @since windows8.0
     */
    static MsiGetShortcutTargetA(szShortcutPath, szProductCode, szFeatureId, szComponentCode) {
        szShortcutPath := szShortcutPath is String ? StrPtr(szShortcutPath) : szShortcutPath
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szFeatureId := szFeatureId is String ? StrPtr(szFeatureId) : szFeatureId
        szComponentCode := szComponentCode is String ? StrPtr(szComponentCode) : szComponentCode

        result := DllCall("msi.dll\MsiGetShortcutTargetA", "ptr", szShortcutPath, "ptr", szProductCode, "ptr", szFeatureId, "ptr", szComponentCode, "uint")
        return result
    }

    /**
     * The MsiGetShortcutTarget function examines a shortcut and returns its product, feature name, and component if available.
     * @param {PWSTR} szShortcutPath A null-terminated string specifying the full path to a shortcut.
     * @param {PWSTR} szProductCode A GUID for the product code of the shortcut. This string buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.
     * @param {PWSTR} szFeatureId The feature name of the shortcut. The string buffer must be MAX_FEATURE_CHARS+1 characters long. This parameter can be null.
     * @param {PWSTR} szComponentCode A GUID of the component code. This string buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msigetshortcuttargetw
     * @since windows8.0
     */
    static MsiGetShortcutTargetW(szShortcutPath, szProductCode, szFeatureId, szComponentCode) {
        szShortcutPath := szShortcutPath is String ? StrPtr(szShortcutPath) : szShortcutPath
        szProductCode := szProductCode is String ? StrPtr(szProductCode) : szProductCode
        szFeatureId := szFeatureId is String ? StrPtr(szFeatureId) : szFeatureId
        szComponentCode := szComponentCode is String ? StrPtr(szComponentCode) : szComponentCode

        result := DllCall("msi.dll\MsiGetShortcutTargetW", "ptr", szShortcutPath, "ptr", szProductCode, "ptr", szFeatureId, "ptr", szComponentCode, "uint")
        return result
    }

    /**
     * The MsiIsProductElevated function returns whether or not the product is managed.
     * @param {PSTR} szProduct The full product code GUID of the product. 
     * 
     * This parameter is required and cannot be <b>NULL</b> or empty.
     * @param {Pointer<BOOL>} pfElevated A pointer to a BOOL for the result. 
     * 
     * This parameter cannot be <b>NULL</b>.
     * @returns {Integer} If the function succeeds, the return value is ERROR_SUCCESS, and <i>pfElevated</i> is set to <b>TRUE</b> if the product is a managed application.
     * 
     * If the function fails, the return value is one of the error codes identified in the following table.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is not currently known.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid argument is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information for the product is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function is not available for a specific platform. 
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiisproductelevateda
     * @since windows8.0
     */
    static MsiIsProductElevatedA(szProduct, pfElevated) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiIsProductElevatedA", "ptr", szProduct, "ptr", pfElevated, "uint")
        return result
    }

    /**
     * The MsiIsProductElevated function returns whether or not the product is managed.
     * @param {PWSTR} szProduct The full product code GUID of the product. 
     * 
     * This parameter is required and cannot be <b>NULL</b> or empty.
     * @param {Pointer<BOOL>} pfElevated A pointer to a BOOL for the result. 
     * 
     * This parameter cannot be <b>NULL</b>.
     * @returns {Integer} If the function succeeds, the return value is ERROR_SUCCESS, and <i>pfElevated</i> is set to <b>TRUE</b> if the product is a managed application.
     * 
     * If the function fails, the return value is one of the error codes identified in the following table.
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product is not currently known.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid argument is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_CONFIGURATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration information for the product is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_CALL_NOT_IMPLEMENTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function is not available for a specific platform. 
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiisproductelevatedw
     * @since windows8.0
     */
    static MsiIsProductElevatedW(szProduct, pfElevated) {
        szProduct := szProduct is String ? StrPtr(szProduct) : szProduct

        result := DllCall("msi.dll\MsiIsProductElevatedW", "ptr", szProduct, "ptr", pfElevated, "uint")
        return result
    }

    /**
     * The MsiNotifySidChange function notifies and updates the Windows Installer internal information with changes to user SIDs.
     * @param {PSTR} pOldSid Null-terminated string that specifies the string value of the previous security identifier(SID).
     * @param {PSTR} pNewSid Null-terminated string that specifies the string value of the new security identifier(SID).
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function. This error returned if any of the parameters is <b>NULL</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_OUTOFMEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Insufficient memory was available.
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Internal failure during execution.
     * 
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msinotifysidchangea
     * @since windows8.0
     */
    static MsiNotifySidChangeA(pOldSid, pNewSid) {
        pOldSid := pOldSid is String ? StrPtr(pOldSid) : pOldSid
        pNewSid := pNewSid is String ? StrPtr(pNewSid) : pNewSid

        result := DllCall("msi.dll\MsiNotifySidChangeA", "ptr", pOldSid, "ptr", pNewSid, "uint")
        return result
    }

    /**
     * The MsiNotifySidChange function notifies and updates the Windows Installer internal information with changes to user SIDs.
     * @param {PWSTR} pOldSid Null-terminated string that specifies the string value of the previous security identifier(SID).
     * @param {PWSTR} pNewSid Null-terminated string that specifies the string value of the new security identifier(SID).
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function. This error returned if any of the parameters is <b>NULL</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_OUTOFMEMORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Insufficient memory was available.
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Internal failure during execution.
     * 
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msinotifysidchangew
     * @since windows8.0
     */
    static MsiNotifySidChangeW(pOldSid, pNewSid) {
        pOldSid := pOldSid is String ? StrPtr(pOldSid) : pOldSid
        pNewSid := pNewSid is String ? StrPtr(pNewSid) : pNewSid

        result := DllCall("msi.dll\MsiNotifySidChangeW", "ptr", pOldSid, "ptr", pNewSid, "uint")
        return result
    }

    /**
     * The MsiBeginTransaction function starts transaction processing of a multiple-package installation and returns an identifier for the transaction.
     * @param {PSTR} szName Name of the multiple-package installation.
     * @param {Integer} dwTransactionAttributes Attributes of the multiple-package installation. 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * When 0 or no value is set it Windows Installer closes the UI from the previous installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTION_CHAIN_EMBEDDEDUI</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<MSIHANDLE>} phTransactionHandle Transaction ID is a <b>MSIHANDLE</b> value that identifies the transaction. Only one process can own a transaction at a  time.
     * @param {Pointer<HANDLE>} phChangeOfOwnerEvent This parameter returns a handle to an event that  is set when the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msijointransaction">MsiJoinTransaction</a> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.
     * @returns {Integer} The <b>MsiBeginTransaction</b> function returns the following values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation service could not be accessed. This function requires the Windows Installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_ALREADY_RUNNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Only one transaction can be open on a system at a time. The function returns this error if  called while another transaction is running.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ROLLBACK_DISABLED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 
     * <a href="/windows/desktop/Msi/rollback-installation">Rollback Installations</a> have been disabled by the <a href="/windows/desktop/Msi/-disablerollback">DISABLEROLLBACK</a> property or <a href="/windows/desktop/Msi/disablerollback">DisableRollback</a> policy.     
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msibegintransactiona
     * @since windows8.0
     */
    static MsiBeginTransactionA(szName, dwTransactionAttributes, phTransactionHandle, phChangeOfOwnerEvent) {
        szName := szName is String ? StrPtr(szName) : szName

        result := DllCall("msi.dll\MsiBeginTransactionA", "ptr", szName, "uint", dwTransactionAttributes, "ptr", phTransactionHandle, "ptr", phChangeOfOwnerEvent, "uint")
        return result
    }

    /**
     * The MsiBeginTransaction function starts transaction processing of a multiple-package installation and returns an identifier for the transaction.
     * @param {PWSTR} szName Name of the multiple-package installation.
     * @param {Integer} dwTransactionAttributes Attributes of the multiple-package installation. 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * When 0 or no value is set it Windows Installer closes the UI from the previous installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTION_CHAIN_EMBEDDEDUI</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<MSIHANDLE>} phTransactionHandle Transaction ID is a <b>MSIHANDLE</b> value that identifies the transaction. Only one process can own a transaction at a  time.
     * @param {Pointer<HANDLE>} phChangeOfOwnerEvent This parameter returns a handle to an event that  is set when the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msijointransaction">MsiJoinTransaction</a> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.
     * @returns {Integer} The <b>MsiBeginTransaction</b> function returns the following values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_SERVICE_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation service could not be accessed. This function requires the Windows Installer service.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_ALREADY_RUNNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Only one transaction can be open on a system at a time. The function returns this error if  called while another transaction is running.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ROLLBACK_DISABLED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 
     * <a href="/windows/desktop/Msi/rollback-installation">Rollback Installations</a> have been disabled by the <a href="/windows/desktop/Msi/-disablerollback">DISABLEROLLBACK</a> property or <a href="/windows/desktop/Msi/disablerollback">DisableRollback</a> policy.     
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msibegintransactionw
     * @since windows8.0
     */
    static MsiBeginTransactionW(szName, dwTransactionAttributes, phTransactionHandle, phChangeOfOwnerEvent) {
        szName := szName is String ? StrPtr(szName) : szName

        result := DllCall("msi.dll\MsiBeginTransactionW", "ptr", szName, "uint", dwTransactionAttributes, "ptr", phTransactionHandle, "ptr", phChangeOfOwnerEvent, "uint")
        return result
    }

    /**
     * The MsiEndTransaction function can commit or roll back all the installations belonging to the transaction opened by the MsiBeginTransaction function.
     * @param {Integer} dwTransactionState The value of this parameter determines whether the installer commits or rolls back all the installations belonging to the transaction. The value can be one of the following.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTIONSTATE_ROLLBACK</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Performs a <a href="https://docs.microsoft.com/windows/desktop/Msi/rollback-installation">Rollback Installation</a> to undo changes to the system belonging to the transaction opened by the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msibegintransactiona">MsiBeginTransaction</a> function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTIONSTATE_COMMIT</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Commits all changes to the system belonging to the transaction. Runs any <a href="https://docs.microsoft.com/windows/desktop/Msi/commit-custom-actions">Commit Custom Actions</a> and commits to the system any changes to Win32 or common language runtime assemblies. Deletes the rollback script, and after using this option, the transaction's changes can no longer be undone with a  <a href="https://docs.microsoft.com/windows/desktop/Msi/rollback-installation">Rollback Installation</a>.  
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} The <b>MsiEndTransaction</b> function returns the following values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A transaction can be ended only by the current owner.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_FAILURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An installation belonging to the transaction could not be completed. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_ALREADY_RUNNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An installation belonging to the transaction is still in progress.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ROLLBACK_DISABLED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An installation belonging to the transaction did not complete. During the installation, the <a href="/windows/desktop/Msi/disablerollback-action">DisableRollback</a> action disabled <a href="/windows/desktop/Msi/rollback-installation">rollback installations</a> of the package. The installer rolls back the installation up to the point where rollback was disabled, and the function returns this error.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msiendtransaction
     * @since windows8.0
     */
    static MsiEndTransaction(dwTransactionState) {
        result := DllCall("msi.dll\MsiEndTransaction", "uint", dwTransactionState, "uint")
        return result
    }

    /**
     * The MsiJoinTransaction function requests that the Windows Installer make the current process the owner of the transaction installing the multiple-package installation.
     * @param {MSIHANDLE} hTransactionHandle The transaction ID, which identifies the transaction and is the identifier returned by the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msibegintransactiona">MsiBeginTransaction</a> function.
     * @param {Integer} dwTransactionAttributes Attributes of the multiple-package installation.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * When 0 or no value is set, Windows Installer closes the UI from the previous installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTION_CHAIN_EMBEDDEDUI</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTION_JOIN_EXISTING_EMBEDDEDUI</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set this attribute to request that the Windows Installer transfer the embedded UI from the original installation. If the original installation has no embedded UI, setting this attribute does nothing.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<HANDLE>} phChangeOfOwnerEvent This parameter returns a handle to an event that  is set when the <b>MsiJoinTransaction</b> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.
     * @returns {Integer} The <b>MsiJoinTransaction</b> function can return the following values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_ACCESS_DENIED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user that owns the transaction and the user that joins the transaction are not the same. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A parameter that is not valid is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INSTALL_ALREADY_RUNNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The owner cannot be changed while an active installation is in progress.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE_STATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The transaction ID provided is not valid.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msi/nf-msi-msijointransaction
     * @since windows8.0
     */
    static MsiJoinTransaction(hTransactionHandle, dwTransactionAttributes, phChangeOfOwnerEvent) {
        hTransactionHandle := hTransactionHandle is Win32Handle ? NumGet(hTransactionHandle, "ptr") : hTransactionHandle

        result := DllCall("msi.dll\MsiJoinTransaction", "ptr", hTransactionHandle, "uint", dwTransactionAttributes, "ptr", phChangeOfOwnerEvent, "uint")
        return result
    }

    /**
     * The MsiDatabaseOpenView function prepares a database query and creates a view object. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {MSIHANDLE} hDatabase Handle to the database to which you want to open a view object. You can get the handle as described in <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {PSTR} szQuery Specifies a SQL query string for querying the database. For correct syntax, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/sql-syntax">SQL Syntax</a>.
     * @param {Pointer<MSIHANDLE>} phView Pointer to a handle for the returned view.
     * @returns {Integer} The 
     * <b>MsiDatabaseOpenView</b> function  returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabaseopenviewa
     * @since windows8.0
     */
    static MsiDatabaseOpenViewA(hDatabase, szQuery, phView) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szQuery := szQuery is String ? StrPtr(szQuery) : szQuery

        result := DllCall("msi.dll\MsiDatabaseOpenViewA", "ptr", hDatabase, "ptr", szQuery, "ptr", phView, "uint")
        return result
    }

    /**
     * The MsiDatabaseOpenView function prepares a database query and creates a view object. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {MSIHANDLE} hDatabase Handle to the database to which you want to open a view object. You can get the handle as described in <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {PWSTR} szQuery Specifies a SQL query string for querying the database. For correct syntax, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/sql-syntax">SQL Syntax</a>.
     * @param {Pointer<MSIHANDLE>} phView Pointer to a handle for the returned view.
     * @returns {Integer} The 
     * <b>MsiDatabaseOpenView</b> function  returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabaseopenvieww
     * @since windows8.0
     */
    static MsiDatabaseOpenViewW(hDatabase, szQuery, phView) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szQuery := szQuery is String ? StrPtr(szQuery) : szQuery

        result := DllCall("msi.dll\MsiDatabaseOpenViewW", "ptr", hDatabase, "ptr", szQuery, "ptr", phView, "uint")
        return result
    }

    /**
     * The MsiViewGetError function returns the error that occurred in the MsiViewModify function.
     * @param {MSIHANDLE} hView Handle to the view.
     * @param {PSTR} szColumnNameBuffer Pointer to the buffer that receives the null-terminated column name. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szColumnName</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns MSIDBERROR_MOREDATA and <i>pcchBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of MSIDBERROR_NOERROR, <i>pcchBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.
     * @param {Pointer<Integer>} pcchBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szColumnNameBuffer</i>. When the function returns MSIDBERROR_NOERROR, this variable contains the size of the data copied to <i>szColumnNameBuffer</i>, not including the terminating null character. If <i>szColumnNameBuffer</i> is not large enough, the function returns MSIDBERROR_MOREDATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchBuf</i>.
     * @returns {Integer} This function returns one of the following values.
     * 
     * <table>
     * <tr>
     * <th>Error code</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An argument was invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_MOREDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The buffer was too small to receive data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_FUNCTIONERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_NOERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully with no errors.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_DUPLICATEKEY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The new record duplicates primary keys of the existing record in a table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_REQUIRED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no null values allowed; or the column is about to be deleted, but is referenced by another row.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADLINK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The corresponding record in a foreign table was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_OVERFLOW</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data is greater than the maximum value allowed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_UNDERFLOW</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data is less than the minimum value allowed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_NOTINSET</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data is not a member of the values permitted in the set.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADVERSION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid version string was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADCASE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The case was invalid. The case must be all uppercase or all lowercase.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADGUID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid GUID was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADWILDCARD</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid wildcard file name was supplied, or the use of wildcards was invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADIDENTIFIER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid identifier was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADLANGUAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Invalid language IDs were supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADFILENAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid file name was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADPATH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid path was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADCONDITION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid conditional statement was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADFORMATTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid format string was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADTEMPLATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid template string was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADDEFAULTDIR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid string was supplied in the DefaultDir column of the 
     * <a href="/windows/desktop/Msi/directory-table">Directory</a> table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADREGPATH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid registry path string was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADCUSTOMSOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid string was supplied in the CustomSource column of the 
     * <a href="/windows/desktop/Msi/customaction-table">CustomAction</a> table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADPROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid property string was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_MISSINGDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The 
     * <a href="/windows/desktop/Msi/-validation-table">_Validation</a> table is missing a reference to a column.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADCATEGORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The category column of the <a href="/windows/desktop/Msi/-validation-table">_Validation</a> table for the column is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADCABINET</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid cabinet name was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADKEYTABLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The table in the Keytable column of the <a href="/windows/desktop/Msi/-validation-table">_Validation</a> table was not found or loaded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADMAXMINVALUES</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value in the MaxValue column of the <a href="/windows/desktop/Msi/-validation-table">_Validation</a> table is less than the value in the MinValue column.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADSHORTCUT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid shortcut target name was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_STRINGOVERFLOW</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The string is too long for the length specified by the column definition.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADLOCALIZEATTRIB</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid localization attribute was supplied. (Primary keys cannot be localized.)
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * 
     * 
     * Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiviewgeterrora
     * @since windows8.0
     */
    static MsiViewGetErrorA(hView, szColumnNameBuffer, pcchBuf) {
        hView := hView is Win32Handle ? NumGet(hView, "ptr") : hView
        szColumnNameBuffer := szColumnNameBuffer is String ? StrPtr(szColumnNameBuffer) : szColumnNameBuffer

        pcchBufMarshal := pcchBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiViewGetErrorA", "ptr", hView, "ptr", szColumnNameBuffer, pcchBufMarshal, pcchBuf, "int")
        return result
    }

    /**
     * The MsiViewGetError function returns the error that occurred in the MsiViewModify function.
     * @param {MSIHANDLE} hView Handle to the view.
     * @param {PWSTR} szColumnNameBuffer Pointer to the buffer that receives the null-terminated column name. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szColumnName</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns MSIDBERROR_MOREDATA and <i>pcchBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of MSIDBERROR_NOERROR, <i>pcchBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.
     * @param {Pointer<Integer>} pcchBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szColumnNameBuffer</i>. When the function returns MSIDBERROR_NOERROR, this variable contains the size of the data copied to <i>szColumnNameBuffer</i>, not including the terminating null character. If <i>szColumnNameBuffer</i> is not large enough, the function returns MSIDBERROR_MOREDATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchBuf</i>.
     * @returns {Integer} This function returns one of the following values.
     * 
     * <table>
     * <tr>
     * <th>Error code</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_INVALIDARG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An argument was invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_MOREDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The buffer was too small to receive data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_FUNCTIONERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function failed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_NOERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function completed successfully with no errors.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_DUPLICATEKEY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The new record duplicates primary keys of the existing record in a table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_REQUIRED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no null values allowed; or the column is about to be deleted, but is referenced by another row.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADLINK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The corresponding record in a foreign table was not found.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_OVERFLOW</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data is greater than the maximum value allowed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_UNDERFLOW</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data is less than the minimum value allowed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_NOTINSET</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data is not a member of the values permitted in the set.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADVERSION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid version string was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADCASE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The case was invalid. The case must be all uppercase or all lowercase.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADGUID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid GUID was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADWILDCARD</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid wildcard file name was supplied, or the use of wildcards was invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADIDENTIFIER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid identifier was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADLANGUAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Invalid language IDs were supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADFILENAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid file name was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADPATH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid path was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADCONDITION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid conditional statement was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADFORMATTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid format string was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADTEMPLATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid template string was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADDEFAULTDIR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid string was supplied in the DefaultDir column of the 
     * <a href="/windows/desktop/Msi/directory-table">Directory</a> table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADREGPATH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid registry path string was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADCUSTOMSOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid string was supplied in the CustomSource column of the 
     * <a href="/windows/desktop/Msi/customaction-table">CustomAction</a> table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADPROPERTY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid property string was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_MISSINGDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The 
     * <a href="/windows/desktop/Msi/-validation-table">_Validation</a> table is missing a reference to a column.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADCATEGORY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The category column of the <a href="/windows/desktop/Msi/-validation-table">_Validation</a> table for the column is invalid.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADCABINET</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid cabinet name was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADKEYTABLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The table in the Keytable column of the <a href="/windows/desktop/Msi/-validation-table">_Validation</a> table was not found or loaded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADMAXMINVALUES</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The value in the MaxValue column of the <a href="/windows/desktop/Msi/-validation-table">_Validation</a> table is less than the value in the MinValue column.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADSHORTCUT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid shortcut target name was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_STRINGOVERFLOW</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The string is too long for the length specified by the column definition.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>MSIDBERROR_BADLOCALIZEATTRIB</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid localization attribute was supplied. (Primary keys cannot be localized.)
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * 
     * 
     * Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiviewgeterrorw
     * @since windows8.0
     */
    static MsiViewGetErrorW(hView, szColumnNameBuffer, pcchBuf) {
        hView := hView is Win32Handle ? NumGet(hView, "ptr") : hView
        szColumnNameBuffer := szColumnNameBuffer is String ? StrPtr(szColumnNameBuffer) : szColumnNameBuffer

        pcchBufMarshal := pcchBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiViewGetErrorW", "ptr", hView, "ptr", szColumnNameBuffer, pcchBufMarshal, pcchBuf, "int")
        return result
    }

    /**
     * The MsiViewExecute function executes a SQL view query and supplies any required parameters.
     * @param {MSIHANDLE} hView Handle to the view upon which to execute the query.
     * @param {MSIHANDLE} hRecord Handle to a record that supplies the parameters. This parameter contains values to replace the parameter tokens in the SQL query. It is optional, so <i>hRecord</i> can be zero. For a reference on syntax, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/sql-syntax">SQL Syntax</a>.
     * @returns {Integer} Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiviewexecute
     * @since windows8.0
     */
    static MsiViewExecute(hView, hRecord) {
        hView := hView is Win32Handle ? NumGet(hView, "ptr") : hView
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord

        result := DllCall("msi.dll\MsiViewExecute", "ptr", hView, "ptr", hRecord, "uint")
        return result
    }

    /**
     * The MsiViewFetch function fetches the next sequential record from the view. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {MSIHANDLE} hView Handle to the view to fetch from.
     * @param {Pointer<MSIHANDLE>} phRecord Pointer to the handle for the fetched record.
     * @returns {Integer} Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiviewfetch
     * @since windows8.0
     */
    static MsiViewFetch(hView, phRecord) {
        hView := hView is Win32Handle ? NumGet(hView, "ptr") : hView

        result := DllCall("msi.dll\MsiViewFetch", "ptr", hView, "ptr", phRecord, "uint")
        return result
    }

    /**
     * The MsiViewModify function updates a fetched record.
     * @param {MSIHANDLE} hView Handle to a view.
     * @param {Integer} eModifyMode 
     * @param {MSIHANDLE} hRecord Handle to the record to modify.
     * @returns {Integer} The 
     * <b>MsiViewModify</b> function returns the following values:
     * 
     * Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiviewmodify
     * @since windows8.0
     */
    static MsiViewModify(hView, eModifyMode, hRecord) {
        hView := hView is Win32Handle ? NumGet(hView, "ptr") : hView
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord

        result := DllCall("msi.dll\MsiViewModify", "ptr", hView, "int", eModifyMode, "ptr", hRecord, "uint")
        return result
    }

    /**
     * The MsiViewGetColumnInfo function returns a record containing column names or definitions. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {MSIHANDLE} hView Handle to the view from which to obtain column information.
     * @param {Integer} eColumnInfo 
     * @param {Pointer<MSIHANDLE>} phRecord Pointer to a handle to receive the column information data record.
     * @returns {Integer} Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiviewgetcolumninfo
     * @since windows8.0
     */
    static MsiViewGetColumnInfo(hView, eColumnInfo, phRecord) {
        hView := hView is Win32Handle ? NumGet(hView, "ptr") : hView

        result := DllCall("msi.dll\MsiViewGetColumnInfo", "ptr", hView, "int", eColumnInfo, "ptr", phRecord, "uint")
        return result
    }

    /**
     * The MsiViewClose function releases the result set for an executed view.
     * @param {MSIHANDLE} hView Handle to a view that is set to release.
     * @returns {Integer} Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiviewclose
     * @since windows8.0
     */
    static MsiViewClose(hView) {
        hView := hView is Win32Handle ? NumGet(hView, "ptr") : hView

        result := DllCall("msi.dll\MsiViewClose", "ptr", hView, "uint")
        return result
    }

    /**
     * The MsiDatabaseGetPrimaryKeys function returns a record containing the names of all the primary key columns for a specified table. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {MSIHANDLE} hDatabase Handle to the database. See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {PSTR} szTableName Specifies the name of the table from which to obtain primary key names.
     * @param {Pointer<MSIHANDLE>} phRecord Pointer to the handle of the record that holds the primary key names.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabasegetprimarykeysa
     * @since windows8.0
     */
    static MsiDatabaseGetPrimaryKeysA(hDatabase, szTableName, phRecord) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szTableName := szTableName is String ? StrPtr(szTableName) : szTableName

        result := DllCall("msi.dll\MsiDatabaseGetPrimaryKeysA", "ptr", hDatabase, "ptr", szTableName, "ptr", phRecord, "uint")
        return result
    }

    /**
     * The MsiDatabaseGetPrimaryKeys function returns a record containing the names of all the primary key columns for a specified table. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {MSIHANDLE} hDatabase Handle to the database. See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {PWSTR} szTableName Specifies the name of the table from which to obtain primary key names.
     * @param {Pointer<MSIHANDLE>} phRecord Pointer to the handle of the record that holds the primary key names.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabasegetprimarykeysw
     * @since windows8.0
     */
    static MsiDatabaseGetPrimaryKeysW(hDatabase, szTableName, phRecord) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szTableName := szTableName is String ? StrPtr(szTableName) : szTableName

        result := DllCall("msi.dll\MsiDatabaseGetPrimaryKeysW", "ptr", hDatabase, "ptr", szTableName, "ptr", phRecord, "uint")
        return result
    }

    /**
     * The MsiDatabaseIsTablePersistent function returns an enumeration that describes the state of a specific table.
     * @param {MSIHANDLE} hDatabase Handle to the database that belongs to the relevant table. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {PSTR} szTableName Specifies the name of the relevant table.
     * @returns {Integer} This function returns MSICONDITION.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabaseistablepersistenta
     * @since windows8.0
     */
    static MsiDatabaseIsTablePersistentA(hDatabase, szTableName) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szTableName := szTableName is String ? StrPtr(szTableName) : szTableName

        result := DllCall("msi.dll\MsiDatabaseIsTablePersistentA", "ptr", hDatabase, "ptr", szTableName, "int")
        return result
    }

    /**
     * The MsiDatabaseIsTablePersistent function returns an enumeration that describes the state of a specific table.
     * @param {MSIHANDLE} hDatabase Handle to the database that belongs to the relevant table. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {PWSTR} szTableName Specifies the name of the relevant table.
     * @returns {Integer} This function returns MSICONDITION.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabaseistablepersistentw
     * @since windows8.0
     */
    static MsiDatabaseIsTablePersistentW(hDatabase, szTableName) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szTableName := szTableName is String ? StrPtr(szTableName) : szTableName

        result := DllCall("msi.dll\MsiDatabaseIsTablePersistentW", "ptr", hDatabase, "ptr", szTableName, "int")
        return result
    }

    /**
     * The MsiGetSummaryInformation function obtains a handle to the _SummaryInformation stream for an installer database. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {MSIHANDLE} hDatabase Handle to the database.
     * @param {PSTR} szDatabasePath Specifies the path to the database.
     * @param {Integer} uiUpdateCount Specifies the maximum number of updated values.
     * @param {Pointer<MSIHANDLE>} phSummaryInfo Pointer to the location from which to receive the summary information handle.
     * @returns {Integer} The 
     * <b>MsiGetSummaryInformation</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetsummaryinformationa
     * @since windows8.0
     */
    static MsiGetSummaryInformationA(hDatabase, szDatabasePath, uiUpdateCount, phSummaryInfo) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szDatabasePath := szDatabasePath is String ? StrPtr(szDatabasePath) : szDatabasePath

        result := DllCall("msi.dll\MsiGetSummaryInformationA", "ptr", hDatabase, "ptr", szDatabasePath, "uint", uiUpdateCount, "ptr", phSummaryInfo, "uint")
        return result
    }

    /**
     * The MsiGetSummaryInformation function obtains a handle to the _SummaryInformation stream for an installer database. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {MSIHANDLE} hDatabase Handle to the database.
     * @param {PWSTR} szDatabasePath Specifies the path to the database.
     * @param {Integer} uiUpdateCount Specifies the maximum number of updated values.
     * @param {Pointer<MSIHANDLE>} phSummaryInfo Pointer to the location from which to receive the summary information handle.
     * @returns {Integer} The 
     * <b>MsiGetSummaryInformation</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetsummaryinformationw
     * @since windows8.0
     */
    static MsiGetSummaryInformationW(hDatabase, szDatabasePath, uiUpdateCount, phSummaryInfo) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szDatabasePath := szDatabasePath is String ? StrPtr(szDatabasePath) : szDatabasePath

        result := DllCall("msi.dll\MsiGetSummaryInformationW", "ptr", hDatabase, "ptr", szDatabasePath, "uint", uiUpdateCount, "ptr", phSummaryInfo, "uint")
        return result
    }

    /**
     * The MsiSummaryInfoGetPropertyCount function returns the number of existing properties in the summary information stream.
     * @param {MSIHANDLE} hSummaryInfo Handle to summary information.
     * @param {Pointer<Integer>} puiPropertyCount Location to receive the total property count.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisummaryinfogetpropertycount
     * @since windows8.0
     */
    static MsiSummaryInfoGetPropertyCount(hSummaryInfo, puiPropertyCount) {
        hSummaryInfo := hSummaryInfo is Win32Handle ? NumGet(hSummaryInfo, "ptr") : hSummaryInfo

        puiPropertyCountMarshal := puiPropertyCount is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiSummaryInfoGetPropertyCount", "ptr", hSummaryInfo, puiPropertyCountMarshal, puiPropertyCount, "uint")
        return result
    }

    /**
     * The MsiSummaryInfoSetProperty function sets a single summary information property.
     * @param {MSIHANDLE} hSummaryInfo Handle to summary information.
     * @param {Integer} uiProperty Specifies the property ID of the summary property being set. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not set values for PID_DICTIONARY OR PID_THUMBNAIL property.
     * @param {Integer} uiDataType Specifies the type of property to set. This parameter can be a type listed in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.
     * @param {Integer} iValue Specifies the integer value.
     * @param {Pointer<FILETIME>} pftValue Specifies the file-time value.
     * @param {PSTR} szValue Specifies the text value.
     * @returns {Integer} The 
     * <b>MsiSummaryInfoSetProperty</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisummaryinfosetpropertya
     * @since windows8.0
     */
    static MsiSummaryInfoSetPropertyA(hSummaryInfo, uiProperty, uiDataType, iValue, pftValue, szValue) {
        hSummaryInfo := hSummaryInfo is Win32Handle ? NumGet(hSummaryInfo, "ptr") : hSummaryInfo
        szValue := szValue is String ? StrPtr(szValue) : szValue

        result := DllCall("msi.dll\MsiSummaryInfoSetPropertyA", "ptr", hSummaryInfo, "uint", uiProperty, "uint", uiDataType, "int", iValue, "ptr", pftValue, "ptr", szValue, "uint")
        return result
    }

    /**
     * The MsiSummaryInfoSetProperty function sets a single summary information property.
     * @param {MSIHANDLE} hSummaryInfo Handle to summary information.
     * @param {Integer} uiProperty Specifies the property ID of the summary property being set. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not set values for PID_DICTIONARY OR PID_THUMBNAIL property.
     * @param {Integer} uiDataType Specifies the type of property to set. This parameter can be a type listed in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.
     * @param {Integer} iValue Specifies the integer value.
     * @param {Pointer<FILETIME>} pftValue Specifies the file-time value.
     * @param {PWSTR} szValue Specifies the text value.
     * @returns {Integer} The 
     * <b>MsiSummaryInfoSetProperty</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisummaryinfosetpropertyw
     * @since windows8.0
     */
    static MsiSummaryInfoSetPropertyW(hSummaryInfo, uiProperty, uiDataType, iValue, pftValue, szValue) {
        hSummaryInfo := hSummaryInfo is Win32Handle ? NumGet(hSummaryInfo, "ptr") : hSummaryInfo
        szValue := szValue is String ? StrPtr(szValue) : szValue

        result := DllCall("msi.dll\MsiSummaryInfoSetPropertyW", "ptr", hSummaryInfo, "uint", uiProperty, "uint", uiDataType, "int", iValue, "ptr", pftValue, "ptr", szValue, "uint")
        return result
    }

    /**
     * The MsiSummaryInfoGetProperty function gets a single property from the summary information stream.
     * @param {MSIHANDLE} hSummaryInfo Handle to summary information.
     * @param {Integer} uiProperty Specifies the property ID of the summary property. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not return values for PID_DICTIONARY OR PID_THUMBNAIL property.
     * @param {Pointer<Integer>} puiDataType Receives the returned property type. This  parameter can be a type listed in the  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.
     * @param {Pointer<Integer>} piValue Receives the returned integer property data.
     * @param {Pointer<FILETIME>} pftValue Pointer to a file value.
     * @param {PSTR} szValueBuf Pointer to the buffer that receives the null terminated summary information property value. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchValueBuf</i> contains the required buffer size in <b>TCHARs</b>, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.
     * @returns {Integer} The 
     * <b>MsiSummaryInfoGetProperty</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisummaryinfogetpropertya
     * @since windows8.0
     */
    static MsiSummaryInfoGetPropertyA(hSummaryInfo, uiProperty, puiDataType, piValue, pftValue, szValueBuf, pcchValueBuf) {
        hSummaryInfo := hSummaryInfo is Win32Handle ? NumGet(hSummaryInfo, "ptr") : hSummaryInfo
        szValueBuf := szValueBuf is String ? StrPtr(szValueBuf) : szValueBuf

        puiDataTypeMarshal := puiDataType is VarRef ? "uint*" : "ptr"
        piValueMarshal := piValue is VarRef ? "int*" : "ptr"
        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiSummaryInfoGetPropertyA", "ptr", hSummaryInfo, "uint", uiProperty, puiDataTypeMarshal, puiDataType, piValueMarshal, piValue, "ptr", pftValue, "ptr", szValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * The MsiSummaryInfoGetProperty function gets a single property from the summary information stream.
     * @param {MSIHANDLE} hSummaryInfo Handle to summary information.
     * @param {Integer} uiProperty Specifies the property ID of the summary property. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not return values for PID_DICTIONARY OR PID_THUMBNAIL property.
     * @param {Pointer<Integer>} puiDataType Receives the returned property type. This  parameter can be a type listed in the  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.
     * @param {Pointer<Integer>} piValue Receives the returned integer property data.
     * @param {Pointer<FILETIME>} pftValue Pointer to a file value.
     * @param {PWSTR} szValueBuf Pointer to the buffer that receives the null terminated summary information property value. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchValueBuf</i> contains the required buffer size in <b>TCHARs</b>, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.
     * @returns {Integer} The 
     * <b>MsiSummaryInfoGetProperty</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisummaryinfogetpropertyw
     * @since windows8.0
     */
    static MsiSummaryInfoGetPropertyW(hSummaryInfo, uiProperty, puiDataType, piValue, pftValue, szValueBuf, pcchValueBuf) {
        hSummaryInfo := hSummaryInfo is Win32Handle ? NumGet(hSummaryInfo, "ptr") : hSummaryInfo
        szValueBuf := szValueBuf is String ? StrPtr(szValueBuf) : szValueBuf

        puiDataTypeMarshal := puiDataType is VarRef ? "uint*" : "ptr"
        piValueMarshal := piValue is VarRef ? "int*" : "ptr"
        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiSummaryInfoGetPropertyW", "ptr", hSummaryInfo, "uint", uiProperty, puiDataTypeMarshal, puiDataType, piValueMarshal, piValue, "ptr", pftValue, "ptr", szValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * The MsiSummaryInfoPersist function writes changed summary information back to the summary information stream.
     * @param {MSIHANDLE} hSummaryInfo Handle to summary information.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisummaryinfopersist
     * @since windows8.0
     */
    static MsiSummaryInfoPersist(hSummaryInfo) {
        hSummaryInfo := hSummaryInfo is Win32Handle ? NumGet(hSummaryInfo, "ptr") : hSummaryInfo

        result := DllCall("msi.dll\MsiSummaryInfoPersist", "ptr", hSummaryInfo, "uint")
        return result
    }

    /**
     * The MsiOpenDatabase function opens a database file for data access. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {PSTR} szDatabasePath Specifies the full path or relative path to the database file.
     * @param {PSTR} szPersist Receives the full path to the file or the persistence mode. You can use the <i>szPersist</i> parameter to direct the persistent output to a new file or to specify one of the following predefined persistence modes.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_CREATEDIRECT"></a><a id="msidbopen_createdirect"></a><dl>
     * <dt><b>MSIDBOPEN_CREATEDIRECT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create a new database, direct mode read/write.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_CREATE"></a><a id="msidbopen_create"></a><dl>
     * <dt><b>MSIDBOPEN_CREATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create a new database, transact mode read/write.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_DIRECT"></a><a id="msidbopen_direct"></a><dl>
     * <dt><b>MSIDBOPEN_DIRECT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database direct read/write without transaction.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_READONLY"></a><a id="msidbopen_readonly"></a><dl>
     * <dt><b>MSIDBOPEN_READONLY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database read-only, no persistent changes.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_TRANSACT"></a><a id="msidbopen_transact"></a><dl>
     * <dt><b>MSIDBOPEN_TRANSACT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database read/write in transaction mode.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_PATCHFILE"></a><a id="msidbopen_patchfile"></a><dl>
     * <dt><b>MSIDBOPEN_PATCHFILE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Add this flag to indicate a patch file.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<MSIHANDLE>} phDatabase Pointer to the location of the returned database handle.
     * @returns {Integer} The 
     * <b>MsiOpenDatabase</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiopendatabasea
     * @since windows8.0
     */
    static MsiOpenDatabaseA(szDatabasePath, szPersist, phDatabase) {
        szDatabasePath := szDatabasePath is String ? StrPtr(szDatabasePath) : szDatabasePath
        szPersist := szPersist is String ? StrPtr(szPersist) : szPersist

        result := DllCall("msi.dll\MsiOpenDatabaseA", "ptr", szDatabasePath, "ptr", szPersist, "ptr", phDatabase, "uint")
        return result
    }

    /**
     * The MsiOpenDatabase function opens a database file for data access. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {PWSTR} szDatabasePath Specifies the full path or relative path to the database file.
     * @param {PWSTR} szPersist Receives the full path to the file or the persistence mode. You can use the <i>szPersist</i> parameter to direct the persistent output to a new file or to specify one of the following predefined persistence modes.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_CREATEDIRECT"></a><a id="msidbopen_createdirect"></a><dl>
     * <dt><b>MSIDBOPEN_CREATEDIRECT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create a new database, direct mode read/write.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_CREATE"></a><a id="msidbopen_create"></a><dl>
     * <dt><b>MSIDBOPEN_CREATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create a new database, transact mode read/write.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_DIRECT"></a><a id="msidbopen_direct"></a><dl>
     * <dt><b>MSIDBOPEN_DIRECT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database direct read/write without transaction.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_READONLY"></a><a id="msidbopen_readonly"></a><dl>
     * <dt><b>MSIDBOPEN_READONLY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database read-only, no persistent changes.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_TRANSACT"></a><a id="msidbopen_transact"></a><dl>
     * <dt><b>MSIDBOPEN_TRANSACT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database read/write in transaction mode.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_PATCHFILE"></a><a id="msidbopen_patchfile"></a><dl>
     * <dt><b>MSIDBOPEN_PATCHFILE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Add this flag to indicate a patch file.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<MSIHANDLE>} phDatabase Pointer to the location of the returned database handle.
     * @returns {Integer} The 
     * <b>MsiOpenDatabase</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiopendatabasew
     * @since windows8.0
     */
    static MsiOpenDatabaseW(szDatabasePath, szPersist, phDatabase) {
        szDatabasePath := szDatabasePath is String ? StrPtr(szDatabasePath) : szDatabasePath
        szPersist := szPersist is String ? StrPtr(szPersist) : szPersist

        result := DllCall("msi.dll\MsiOpenDatabaseW", "ptr", szDatabasePath, "ptr", szPersist, "ptr", phDatabase, "uint")
        return result
    }

    /**
     * The MsiDatabaseImport function imports an installer text archive file into an open database table.
     * @param {MSIHANDLE} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {PSTR} szFolderPath Specifies the path to the folder that contains archive files.
     * @param {PSTR} szFileName Specifies the name of the file to import.
     * @returns {Integer} The 
     * <b>MsiDatabaseImport</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabaseimporta
     * @since windows8.0
     */
    static MsiDatabaseImportA(hDatabase, szFolderPath, szFileName) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szFolderPath := szFolderPath is String ? StrPtr(szFolderPath) : szFolderPath
        szFileName := szFileName is String ? StrPtr(szFileName) : szFileName

        result := DllCall("msi.dll\MsiDatabaseImportA", "ptr", hDatabase, "ptr", szFolderPath, "ptr", szFileName, "uint")
        return result
    }

    /**
     * The MsiDatabaseImport function imports an installer text archive file into an open database table.
     * @param {MSIHANDLE} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {PWSTR} szFolderPath Specifies the path to the folder that contains archive files.
     * @param {PWSTR} szFileName Specifies the name of the file to import.
     * @returns {Integer} The 
     * <b>MsiDatabaseImport</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabaseimportw
     * @since windows8.0
     */
    static MsiDatabaseImportW(hDatabase, szFolderPath, szFileName) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szFolderPath := szFolderPath is String ? StrPtr(szFolderPath) : szFolderPath
        szFileName := szFileName is String ? StrPtr(szFileName) : szFileName

        result := DllCall("msi.dll\MsiDatabaseImportW", "ptr", hDatabase, "ptr", szFolderPath, "ptr", szFileName, "uint")
        return result
    }

    /**
     * The MsiDatabaseExport function exports a Microsoft Installer table from an open database to a Text Archive File.
     * @param {MSIHANDLE} hDatabase The handle to a database  from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {PSTR} szTableName The name of the table to export.
     * @param {PSTR} szFolderPath The name of the folder that contains archive files.
     * @param {PSTR} szFileName The name of the exported table archive file.
     * @returns {Integer} The 
     * <b>MsiDatabaseExport</b> function returns one of the following values:
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_PATHNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid path is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function fails.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid or inactive handle is supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeds.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabaseexporta
     * @since windows8.0
     */
    static MsiDatabaseExportA(hDatabase, szTableName, szFolderPath, szFileName) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szTableName := szTableName is String ? StrPtr(szTableName) : szTableName
        szFolderPath := szFolderPath is String ? StrPtr(szFolderPath) : szFolderPath
        szFileName := szFileName is String ? StrPtr(szFileName) : szFileName

        result := DllCall("msi.dll\MsiDatabaseExportA", "ptr", hDatabase, "ptr", szTableName, "ptr", szFolderPath, "ptr", szFileName, "uint")
        return result
    }

    /**
     * The MsiDatabaseExport function exports a Microsoft Installer table from an open database to a Text Archive File.
     * @param {MSIHANDLE} hDatabase The handle to a database  from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {PWSTR} szTableName The name of the table to export.
     * @param {PWSTR} szFolderPath The name of the folder that contains archive files.
     * @param {PWSTR} szFileName The name of the exported table archive file.
     * @returns {Integer} The 
     * <b>MsiDatabaseExport</b> function returns one of the following values:
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_BAD_PATHNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid path is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function fails.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid or inactive handle is supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter is passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeds.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabaseexportw
     * @since windows8.0
     */
    static MsiDatabaseExportW(hDatabase, szTableName, szFolderPath, szFileName) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szTableName := szTableName is String ? StrPtr(szTableName) : szTableName
        szFolderPath := szFolderPath is String ? StrPtr(szFolderPath) : szFolderPath
        szFileName := szFileName is String ? StrPtr(szFileName) : szFileName

        result := DllCall("msi.dll\MsiDatabaseExportW", "ptr", hDatabase, "ptr", szTableName, "ptr", szFolderPath, "ptr", szFileName, "uint")
        return result
    }

    /**
     * The MsiDatabaseMerge function merges two databases together, which allows duplicate rows.
     * @param {MSIHANDLE} hDatabase The handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {MSIHANDLE} hDatabaseMerge The handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> to merge into the base database.
     * @param {PSTR} szTableName The name of the table to receive merge conflict information.
     * @returns {Integer} The 
     * <b>MsiDatabaseMerge</b> function returns one of the following values:
     * 					
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Row merge conflicts were reported.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid or inactive handle was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_TABLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid table was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_DATATYPE_MISMATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Schema difference between the two databases.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabasemergea
     * @since windows8.0
     */
    static MsiDatabaseMergeA(hDatabase, hDatabaseMerge, szTableName) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        hDatabaseMerge := hDatabaseMerge is Win32Handle ? NumGet(hDatabaseMerge, "ptr") : hDatabaseMerge
        szTableName := szTableName is String ? StrPtr(szTableName) : szTableName

        result := DllCall("msi.dll\MsiDatabaseMergeA", "ptr", hDatabase, "ptr", hDatabaseMerge, "ptr", szTableName, "uint")
        return result
    }

    /**
     * The MsiDatabaseMerge function merges two databases together, which allows duplicate rows.
     * @param {MSIHANDLE} hDatabase The handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {MSIHANDLE} hDatabaseMerge The handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> to merge into the base database.
     * @param {PWSTR} szTableName The name of the table to receive merge conflict information.
     * @returns {Integer} The 
     * <b>MsiDatabaseMerge</b> function returns one of the following values:
     * 					
     * 
     * <table>
     * <tr>
     * <th>Return code</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Row merge conflicts were reported.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid or inactive handle was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_TABLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid table was supplied.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The function succeeded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_DATATYPE_MISMATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Schema difference between the two databases.
     * 
     * </td>
     * </tr>
     * </table>
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabasemergew
     * @since windows8.0
     */
    static MsiDatabaseMergeW(hDatabase, hDatabaseMerge, szTableName) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        hDatabaseMerge := hDatabaseMerge is Win32Handle ? NumGet(hDatabaseMerge, "ptr") : hDatabaseMerge
        szTableName := szTableName is String ? StrPtr(szTableName) : szTableName

        result := DllCall("msi.dll\MsiDatabaseMergeW", "ptr", hDatabase, "ptr", hDatabaseMerge, "ptr", szTableName, "uint")
        return result
    }

    /**
     * The MsiDatabaseGenerateTransform function generates a transform file of differences between two databases.
     * @param {MSIHANDLE} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> that includes the changes.
     * @param {MSIHANDLE} hDatabaseReference Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> that does not include the changes.
     * @param {PSTR} szTransformFile A null-terminated string that specifies the name of the transform file being generated. This parameter can be null. If <i>szTransformFile</i> is null, you can use 
     * <b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform. If the databases are identical, the function returns ERROR_NO_DATA. If the databases are different the function returns NOERROR.
     * @param {Integer} iReserved1 This is a reserved argument and must be set to 0.
     * @param {Integer} iReserved2 This is a reserved argument and must be set to 0.
     * @returns {Integer} The 
     * <b>MsiDatabaseGenerateTransform</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabasegeneratetransforma
     * @since windows8.0
     */
    static MsiDatabaseGenerateTransformA(hDatabase, hDatabaseReference, szTransformFile, iReserved1, iReserved2) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        hDatabaseReference := hDatabaseReference is Win32Handle ? NumGet(hDatabaseReference, "ptr") : hDatabaseReference
        szTransformFile := szTransformFile is String ? StrPtr(szTransformFile) : szTransformFile

        result := DllCall("msi.dll\MsiDatabaseGenerateTransformA", "ptr", hDatabase, "ptr", hDatabaseReference, "ptr", szTransformFile, "int", iReserved1, "int", iReserved2, "uint")
        return result
    }

    /**
     * The MsiDatabaseGenerateTransform function generates a transform file of differences between two databases.
     * @param {MSIHANDLE} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> that includes the changes.
     * @param {MSIHANDLE} hDatabaseReference Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> that does not include the changes.
     * @param {PWSTR} szTransformFile A null-terminated string that specifies the name of the transform file being generated. This parameter can be null. If <i>szTransformFile</i> is null, you can use 
     * <b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform. If the databases are identical, the function returns ERROR_NO_DATA. If the databases are different the function returns NOERROR.
     * @param {Integer} iReserved1 This is a reserved argument and must be set to 0.
     * @param {Integer} iReserved2 This is a reserved argument and must be set to 0.
     * @returns {Integer} The 
     * <b>MsiDatabaseGenerateTransform</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabasegeneratetransformw
     * @since windows8.0
     */
    static MsiDatabaseGenerateTransformW(hDatabase, hDatabaseReference, szTransformFile, iReserved1, iReserved2) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        hDatabaseReference := hDatabaseReference is Win32Handle ? NumGet(hDatabaseReference, "ptr") : hDatabaseReference
        szTransformFile := szTransformFile is String ? StrPtr(szTransformFile) : szTransformFile

        result := DllCall("msi.dll\MsiDatabaseGenerateTransformW", "ptr", hDatabase, "ptr", hDatabaseReference, "ptr", szTransformFile, "int", iReserved1, "int", iReserved2, "uint")
        return result
    }

    /**
     * The MsiDatabaseApplyTransform function applies a transform to a database.
     * @param {MSIHANDLE} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> to the transform.
     * @param {PSTR} szTransformFile Specifies the name of the transform file to apply.
     * @param {Integer} iErrorConditions Error conditions that should be suppressed. This parameter is a bit field that can contain the following bits. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Error condition</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_ADDEXISTINGROW"></a><a id="msitransform_error_addexistingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b></dt>
     * <dt>0x0001</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Adding a row that already exists.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_DELMISSINGROW"></a><a id="msitransform_error_delmissingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_DELMISSINGROW</b></dt>
     * <dt>0x0002</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Deleting a row that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_ADDEXISTINGTABLE"></a><a id="msitransform_error_addexistingtable"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b></dt>
     * <dt>0x0004</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Adding a table that already exists.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_DELMISSINGTABLE"></a><a id="msitransform_error_delmissingtable"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b></dt>
     * <dt>0x0008</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Deleting a table that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_UPDATEMISSINGROW"></a><a id="msitransform_error_updatemissingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b></dt>
     * <dt>0x0010</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Updating a row that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_CHANGECODEPAGE"></a><a id="msitransform_error_changecodepage"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b></dt>
     * <dt>0x0020</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Transform and database code pages do not match and neither has a neutral code page.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_VIEWTRANSFORM"></a><a id="msitransform_error_viewtransform"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_VIEWTRANSFORM</b></dt>
     * <dt>0x0100</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create the temporary 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/-transformview-table">_TransformView table</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} The 
     * <b>MsiDatabaseApplyTransform</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabaseapplytransforma
     * @since windows8.0
     */
    static MsiDatabaseApplyTransformA(hDatabase, szTransformFile, iErrorConditions) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szTransformFile := szTransformFile is String ? StrPtr(szTransformFile) : szTransformFile

        result := DllCall("msi.dll\MsiDatabaseApplyTransformA", "ptr", hDatabase, "ptr", szTransformFile, "int", iErrorConditions, "uint")
        return result
    }

    /**
     * The MsiDatabaseApplyTransform function applies a transform to a database.
     * @param {MSIHANDLE} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> to the transform.
     * @param {PWSTR} szTransformFile Specifies the name of the transform file to apply.
     * @param {Integer} iErrorConditions Error conditions that should be suppressed. This parameter is a bit field that can contain the following bits. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Error condition</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_ADDEXISTINGROW"></a><a id="msitransform_error_addexistingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b></dt>
     * <dt>0x0001</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Adding a row that already exists.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_DELMISSINGROW"></a><a id="msitransform_error_delmissingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_DELMISSINGROW</b></dt>
     * <dt>0x0002</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Deleting a row that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_ADDEXISTINGTABLE"></a><a id="msitransform_error_addexistingtable"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b></dt>
     * <dt>0x0004</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Adding a table that already exists.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_DELMISSINGTABLE"></a><a id="msitransform_error_delmissingtable"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b></dt>
     * <dt>0x0008</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Deleting a table that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_UPDATEMISSINGROW"></a><a id="msitransform_error_updatemissingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b></dt>
     * <dt>0x0010</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Updating a row that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_CHANGECODEPAGE"></a><a id="msitransform_error_changecodepage"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b></dt>
     * <dt>0x0020</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Transform and database code pages do not match and neither has a neutral code page.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_VIEWTRANSFORM"></a><a id="msitransform_error_viewtransform"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_VIEWTRANSFORM</b></dt>
     * <dt>0x0100</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create the temporary 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/-transformview-table">_TransformView table</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} The 
     * <b>MsiDatabaseApplyTransform</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabaseapplytransformw
     * @since windows8.0
     */
    static MsiDatabaseApplyTransformW(hDatabase, szTransformFile, iErrorConditions) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        szTransformFile := szTransformFile is String ? StrPtr(szTransformFile) : szTransformFile

        result := DllCall("msi.dll\MsiDatabaseApplyTransformW", "ptr", hDatabase, "ptr", szTransformFile, "int", iErrorConditions, "uint")
        return result
    }

    /**
     * The MsiCreateTransformSummaryInfo function creates summary information of an existing transform to include validation and error conditions. Execution of this function sets the error record, which is accessible by using MsiGetLastErrorRecord.
     * @param {MSIHANDLE} hDatabase The handle to the database that contains the new database summary information.
     * @param {MSIHANDLE} hDatabaseReference The handle to the database that contains the original summary information.
     * @param {PSTR} szTransformFile The name of the transform to which the summary information is added.
     * @param {Integer} iErrorConditions 
     * @param {Integer} iValidation 
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msicreatetransformsummaryinfoa
     * @since windows8.0
     */
    static MsiCreateTransformSummaryInfoA(hDatabase, hDatabaseReference, szTransformFile, iErrorConditions, iValidation) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        hDatabaseReference := hDatabaseReference is Win32Handle ? NumGet(hDatabaseReference, "ptr") : hDatabaseReference
        szTransformFile := szTransformFile is String ? StrPtr(szTransformFile) : szTransformFile

        result := DllCall("msi.dll\MsiCreateTransformSummaryInfoA", "ptr", hDatabase, "ptr", hDatabaseReference, "ptr", szTransformFile, "int", iErrorConditions, "int", iValidation, "uint")
        return result
    }

    /**
     * The MsiCreateTransformSummaryInfo function creates summary information of an existing transform to include validation and error conditions. Execution of this function sets the error record, which is accessible by using MsiGetLastErrorRecord.
     * @param {MSIHANDLE} hDatabase The handle to the database that contains the new database summary information.
     * @param {MSIHANDLE} hDatabaseReference The handle to the database that contains the original summary information.
     * @param {PWSTR} szTransformFile The name of the transform to which the summary information is added.
     * @param {Integer} iErrorConditions 
     * @param {Integer} iValidation 
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msicreatetransformsummaryinfow
     * @since windows8.0
     */
    static MsiCreateTransformSummaryInfoW(hDatabase, hDatabaseReference, szTransformFile, iErrorConditions, iValidation) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase
        hDatabaseReference := hDatabaseReference is Win32Handle ? NumGet(hDatabaseReference, "ptr") : hDatabaseReference
        szTransformFile := szTransformFile is String ? StrPtr(szTransformFile) : szTransformFile

        result := DllCall("msi.dll\MsiCreateTransformSummaryInfoW", "ptr", hDatabase, "ptr", hDatabaseReference, "ptr", szTransformFile, "int", iErrorConditions, "int", iValidation, "uint")
        return result
    }

    /**
     * The MsiDatabaseCommit function commits changes to a database.
     * @param {MSIHANDLE} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @returns {Integer} The 
     * <b>MsiDatabaseCommit</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidatabasecommit
     * @since windows8.0
     */
    static MsiDatabaseCommit(hDatabase) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase

        result := DllCall("msi.dll\MsiDatabaseCommit", "ptr", hDatabase, "uint")
        return result
    }

    /**
     * The MsiGetDatabaseState function returns the state of the database.
     * @param {MSIHANDLE} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @returns {Integer} This function returns MSIDBSTATE.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetdatabasestate
     * @since windows8.0
     */
    static MsiGetDatabaseState(hDatabase) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase

        result := DllCall("msi.dll\MsiGetDatabaseState", "ptr", hDatabase, "int")
        return result
    }

    /**
     * The MsiCreateRecord function creates a new record object with the specified number of fields. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {Integer} cParams Specifies the number of fields the record will have. The maximum number of fields in a record is limited to 65535.
     * @returns {MSIHANDLE} If the function succeeds, the return value is handle to a new record object.
     * 
     * If the function fails, the return value is null.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msicreaterecord
     * @since windows8.0
     */
    static MsiCreateRecord(cParams) {
        result := DllCall("msi.dll\MsiCreateRecord", "uint", cParams, "ptr")
        return MSIHANDLE({Value: result}, True)
    }

    /**
     * Reports a null record field.
     * @param {MSIHANDLE} hRecord Handle to a record.
     * @param {Integer} iField Specifies the field to check.
     * @returns {BOOL} This function returns BOOL.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordisnull
     * @since windows8.0
     */
    static MsiRecordIsNull(hRecord, iField) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord

        result := DllCall("msi.dll\MsiRecordIsNull", "ptr", hRecord, "uint", iField, "int")
        return result
    }

    /**
     * The MsiRecordDataSize function returns the length of a record field. The count does not include the terminating null character.
     * @param {MSIHANDLE} hRecord Handle to the record.
     * @param {Integer} iField Specifies a field of the record.
     * @returns {Integer} The 
     * <b>MsiRecordDataSize</b> function returns 0 if the field is null, nonexistent, or an internal object pointer. The function also returns 0 if the handle is not a valid record handle.
     * 
     * If the data is in integer format, the function returns sizeof(int).
     * 
     * If the data is in string format, the function returns the character count (not including the null character).
     * 
     * If the data is in stream format, the function returns the byte count.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecorddatasize
     * @since windows8.0
     */
    static MsiRecordDataSize(hRecord, iField) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord

        result := DllCall("msi.dll\MsiRecordDataSize", "ptr", hRecord, "uint", iField, "uint")
        return result
    }

    /**
     * Sets a record field to an integer field.
     * @param {MSIHANDLE} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record to set.
     * @param {Integer} iValue Specifies the value to which to set the field.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordsetinteger
     * @since windows8.0
     */
    static MsiRecordSetInteger(hRecord, iField, iValue) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord

        result := DllCall("msi.dll\MsiRecordSetInteger", "ptr", hRecord, "uint", iField, "int", iValue, "uint")
        return result
    }

    /**
     * The MsiRecordSetString function copies a string into the designated field.
     * @param {MSIHANDLE} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record to set.
     * @param {PSTR} szValue Specifies the string value of the field.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordsetstringa
     * @since windows8.0
     */
    static MsiRecordSetStringA(hRecord, iField, szValue) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord
        szValue := szValue is String ? StrPtr(szValue) : szValue

        result := DllCall("msi.dll\MsiRecordSetStringA", "ptr", hRecord, "uint", iField, "ptr", szValue, "uint")
        return result
    }

    /**
     * The MsiRecordSetString function copies a string into the designated field.
     * @param {MSIHANDLE} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record to set.
     * @param {PWSTR} szValue Specifies the string value of the field.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordsetstringw
     * @since windows8.0
     */
    static MsiRecordSetStringW(hRecord, iField, szValue) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord
        szValue := szValue is String ? StrPtr(szValue) : szValue

        result := DllCall("msi.dll\MsiRecordSetStringW", "ptr", hRecord, "uint", iField, "ptr", szValue, "uint")
        return result
    }

    /**
     * The MsiRecordGetInteger function returns the integer value from a record field.
     * @param {MSIHANDLE} hRecord Handle to a record.
     * @param {Integer} iField Specifies the field of the record from which to obtain the value.
     * @returns {Integer} If the function succeeds, the return value is the integer value of the field.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordgetinteger
     * @since windows8.0
     */
    static MsiRecordGetInteger(hRecord, iField) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord

        result := DllCall("msi.dll\MsiRecordGetInteger", "ptr", hRecord, "uint", iField, "int")
        return result
    }

    /**
     * The MsiRecordGetString function returns the string value of a record field.
     * @param {MSIHANDLE} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field requested.
     * @param {PSTR} szValueBuf Pointer to the buffer that receives the null terminated string containing the value of the record field. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchValueBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.
     * @returns {Integer} The 
     * <b>MsiRecordGetString</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordgetstringa
     * @since windows8.0
     */
    static MsiRecordGetStringA(hRecord, iField, szValueBuf, pcchValueBuf) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord
        szValueBuf := szValueBuf is String ? StrPtr(szValueBuf) : szValueBuf

        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiRecordGetStringA", "ptr", hRecord, "uint", iField, "ptr", szValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * The MsiRecordGetString function returns the string value of a record field.
     * @param {MSIHANDLE} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field requested.
     * @param {PWSTR} szValueBuf Pointer to the buffer that receives the null terminated string containing the value of the record field. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchValueBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.
     * @returns {Integer} The 
     * <b>MsiRecordGetString</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordgetstringw
     * @since windows8.0
     */
    static MsiRecordGetStringW(hRecord, iField, szValueBuf, pcchValueBuf) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord
        szValueBuf := szValueBuf is String ? StrPtr(szValueBuf) : szValueBuf

        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiRecordGetStringW", "ptr", hRecord, "uint", iField, "ptr", szValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * Returns the number of fields in a record.
     * @param {MSIHANDLE} hRecord Handle to a record.
     * @returns {Integer} If the function succeeds, the return value is the number of fields in the record.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordgetfieldcount
     * @since windows8.0
     */
    static MsiRecordGetFieldCount(hRecord) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord

        result := DllCall("msi.dll\MsiRecordGetFieldCount", "ptr", hRecord, "uint")
        return result
    }

    /**
     * The MsiRecordSetStream function sets a record stream field from a file. Stream data cannot be inserted into temporary fields.
     * @param {MSIHANDLE} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record to set.
     * @param {PSTR} szFilePath Specifies the path to the file containing the stream.
     * @returns {Integer} The 
     * <b>MsiRecordSetStream</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordsetstreama
     * @since windows8.0
     */
    static MsiRecordSetStreamA(hRecord, iField, szFilePath) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord
        szFilePath := szFilePath is String ? StrPtr(szFilePath) : szFilePath

        result := DllCall("msi.dll\MsiRecordSetStreamA", "ptr", hRecord, "uint", iField, "ptr", szFilePath, "uint")
        return result
    }

    /**
     * The MsiRecordSetStream function sets a record stream field from a file. Stream data cannot be inserted into temporary fields.
     * @param {MSIHANDLE} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record to set.
     * @param {PWSTR} szFilePath Specifies the path to the file containing the stream.
     * @returns {Integer} The 
     * <b>MsiRecordSetStream</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordsetstreamw
     * @since windows8.0
     */
    static MsiRecordSetStreamW(hRecord, iField, szFilePath) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord
        szFilePath := szFilePath is String ? StrPtr(szFilePath) : szFilePath

        result := DllCall("msi.dll\MsiRecordSetStreamW", "ptr", hRecord, "uint", iField, "ptr", szFilePath, "uint")
        return result
    }

    /**
     * The MsiRecordReadStream function reads bytes from a record stream field into a buffer.
     * @param {MSIHANDLE} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record.
     * @param {Pointer} szDataBuf A buffer to receive the stream field. You should ensure the destination buffer is the same size or larger than the source buffer. See the Remarks section.
     * @param {Pointer<Integer>} pcbDataBuf Specifies the in and out buffer count. On input, this is the full size of the buffer. On output, this is the number of bytes that were actually written to the buffer. See the Remarks section.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordreadstream
     * @since windows8.0
     */
    static MsiRecordReadStream(hRecord, iField, szDataBuf, pcbDataBuf) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord

        pcbDataBufMarshal := pcbDataBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiRecordReadStream", "ptr", hRecord, "uint", iField, "ptr", szDataBuf, pcbDataBufMarshal, pcbDataBuf, "uint")
        return result
    }

    /**
     * The MsiRecordClearData function sets all fields in a record to null.
     * @param {MSIHANDLE} hRecord Handle to the record.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msirecordcleardata
     * @since windows8.0
     */
    static MsiRecordClearData(hRecord) {
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord

        result := DllCall("msi.dll\MsiRecordClearData", "ptr", hRecord, "uint")
        return result
    }

    /**
     * The MsiGetActiveDatabase function returns the active database for the installation. This function returns a read-only handle that should be closed using MsiCloseHandle.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @returns {MSIHANDLE} If the function succeeds, it returns a read-only handle to the database currently in use by the installer. If the function fails, the function returns zero, 0.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetactivedatabase
     * @since windows8.0
     */
    static MsiGetActiveDatabase(hInstall) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall

        result := DllCall("msi.dll\MsiGetActiveDatabase", "ptr", hInstall, "ptr")
        return MSIHANDLE({Value: result}, True)
    }

    /**
     * The MsiSetProperty function sets the value for an installation property.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szName Specifies the name of the property.
     * @param {PSTR} szValue Specifies the value of the property.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisetpropertya
     * @since windows8.0
     */
    static MsiSetPropertyA(hInstall, szName, szValue) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szName := szName is String ? StrPtr(szName) : szName
        szValue := szValue is String ? StrPtr(szValue) : szValue

        result := DllCall("msi.dll\MsiSetPropertyA", "ptr", hInstall, "ptr", szName, "ptr", szValue, "uint")
        return result
    }

    /**
     * The MsiSetProperty function sets the value for an installation property.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szName Specifies the name of the property.
     * @param {PWSTR} szValue Specifies the value of the property.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisetpropertyw
     * @since windows8.0
     */
    static MsiSetPropertyW(hInstall, szName, szValue) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szName := szName is String ? StrPtr(szName) : szName
        szValue := szValue is String ? StrPtr(szValue) : szValue

        result := DllCall("msi.dll\MsiSetPropertyW", "ptr", hInstall, "ptr", szName, "ptr", szValue, "uint")
        return result
    }

    /**
     * The MsiGetProperty function gets the value for an installer property.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szName A null-terminated string that specifies the name of the property.
     * @param {PSTR} szValueBuf Pointer to the buffer that receives the null terminated string containing the value of the property. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return ERROR_MORE_DATA and <i>pchValueBuf </i>will contain the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf </i>contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf </i>is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pchValueBuf</i>.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetpropertya
     * @since windows8.0
     */
    static MsiGetPropertyA(hInstall, szName, szValueBuf, pcchValueBuf) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szName := szName is String ? StrPtr(szName) : szName
        szValueBuf := szValueBuf is String ? StrPtr(szValueBuf) : szValueBuf

        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetPropertyA", "ptr", hInstall, "ptr", szName, "ptr", szValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * The MsiGetProperty function gets the value for an installer property.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szName A null-terminated string that specifies the name of the property.
     * @param {PWSTR} szValueBuf Pointer to the buffer that receives the null terminated string containing the value of the property. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return ERROR_MORE_DATA and <i>pchValueBuf </i>will contain the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf </i>contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<Integer>} pcchValueBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf </i>is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pchValueBuf</i>.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetpropertyw
     * @since windows8.0
     */
    static MsiGetPropertyW(hInstall, szName, szValueBuf, pcchValueBuf) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szName := szName is String ? StrPtr(szName) : szName
        szValueBuf := szValueBuf is String ? StrPtr(szValueBuf) : szValueBuf

        pcchValueBufMarshal := pcchValueBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetPropertyW", "ptr", hInstall, "ptr", szName, "ptr", szValueBuf, pcchValueBufMarshal, pcchValueBuf, "uint")
        return result
    }

    /**
     * The MsiGetLanguage function returns the numeric language of the installation that is currently running.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @returns {Integer} If the function succeeds, the return value is the numeric LANGID for the install.
     * 
     * If the function fails, the return value can be the following value.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetlanguage
     * @since windows8.0
     */
    static MsiGetLanguage(hInstall) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall

        result := DllCall("msi.dll\MsiGetLanguage", "ptr", hInstall, "ushort")
        return result
    }

    /**
     * The MsiGetMode function is used to determine whether the installer is currently running in a specified mode, as listed in the table.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Integer} eRunMode 
     * @returns {BOOL} <b>TRUE</b> indicates the specific property passed into the function is currently set.
     * 
     * <b>FALSE</b> indicates the specific property passed into the function is currently not set.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetmode
     * @since windows8.0
     */
    static MsiGetMode(hInstall, eRunMode) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall

        result := DllCall("msi.dll\MsiGetMode", "ptr", hInstall, "int", eRunMode, "int")
        return result
    }

    /**
     * The MsiSetMode function sets an internal engine Boolean state.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Integer} eRunMode 
     * @param {BOOL} fState Specifies the state to set to <b>TRUE</b> or <b>FALSE</b>.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisetmode
     * @since windows8.0
     */
    static MsiSetMode(hInstall, eRunMode, fState) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall

        result := DllCall("msi.dll\MsiSetMode", "ptr", hInstall, "int", eRunMode, "int", fState, "uint")
        return result
    }

    /**
     * The MsiFormatRecord function formats record field data and properties using a format string.
     * @param {MSIHANDLE} hInstall Handle to the installation. This may be omitted, in which case only the record field parameters are processed and properties are not available for substitution.
     * @param {MSIHANDLE} hRecord Handle to the record to format. The template string must be stored in record field 0 followed by referenced data parameters.
     * @param {PSTR} szResultBuf Pointer to the buffer that receives the null terminated formatted string. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szResultBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchResultBuf</i> contains the required buffer size in <b>TCHAR</b>s, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchResultBuf</i> contains the number of <b>TCHAR</b>s written to the buffer, not including the terminating null character.
     * @param {Pointer<Integer>} pcchResultBuf Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szResultBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szResultBuf</i>, not including the terminating null character. If <i>szResultBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchResultBuf</i>.
     * @returns {Integer} The 
     * <b>MsiFormatRecord</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiformatrecorda
     * @since windows8.0
     */
    static MsiFormatRecordA(hInstall, hRecord, szResultBuf, pcchResultBuf) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord
        szResultBuf := szResultBuf is String ? StrPtr(szResultBuf) : szResultBuf

        pcchResultBufMarshal := pcchResultBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiFormatRecordA", "ptr", hInstall, "ptr", hRecord, "ptr", szResultBuf, pcchResultBufMarshal, pcchResultBuf, "uint")
        return result
    }

    /**
     * The MsiFormatRecord function formats record field data and properties using a format string.
     * @param {MSIHANDLE} hInstall Handle to the installation. This may be omitted, in which case only the record field parameters are processed and properties are not available for substitution.
     * @param {MSIHANDLE} hRecord Handle to the record to format. The template string must be stored in record field 0 followed by referenced data parameters.
     * @param {PWSTR} szResultBuf Pointer to the buffer that receives the null terminated formatted string. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szResultBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchResultBuf</i> contains the required buffer size in <b>TCHAR</b>s, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchResultBuf</i> contains the number of <b>TCHAR</b>s written to the buffer, not including the terminating null character.
     * @param {Pointer<Integer>} pcchResultBuf Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szResultBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szResultBuf</i>, not including the terminating null character. If <i>szResultBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchResultBuf</i>.
     * @returns {Integer} The 
     * <b>MsiFormatRecord</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiformatrecordw
     * @since windows8.0
     */
    static MsiFormatRecordW(hInstall, hRecord, szResultBuf, pcchResultBuf) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord
        szResultBuf := szResultBuf is String ? StrPtr(szResultBuf) : szResultBuf

        pcchResultBufMarshal := pcchResultBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiFormatRecordW", "ptr", hInstall, "ptr", hRecord, "ptr", szResultBuf, pcchResultBufMarshal, pcchResultBuf, "uint")
        return result
    }

    /**
     * The MsiDoAction function executes a built-in action, custom action, or user-interface wizard action.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szAction Specifies the action to execute.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidoactiona
     * @since windows8.0
     */
    static MsiDoActionA(hInstall, szAction) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szAction := szAction is String ? StrPtr(szAction) : szAction

        result := DllCall("msi.dll\MsiDoActionA", "ptr", hInstall, "ptr", szAction, "uint")
        return result
    }

    /**
     * The MsiDoAction function executes a built-in action, custom action, or user-interface wizard action.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szAction Specifies the action to execute.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msidoactionw
     * @since windows8.0
     */
    static MsiDoActionW(hInstall, szAction) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szAction := szAction is String ? StrPtr(szAction) : szAction

        result := DllCall("msi.dll\MsiDoActionW", "ptr", hInstall, "ptr", szAction, "uint")
        return result
    }

    /**
     * The MsiSequence function executes another action sequence, as described in the specified table.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szTable Specifies the name of the table containing the action sequence.
     * @param {Integer} iSequenceMode This parameter is currently unimplemented. It is reserved for future use and must be 0.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisequencea
     * @since windows8.0
     */
    static MsiSequenceA(hInstall, szTable, iSequenceMode) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szTable := szTable is String ? StrPtr(szTable) : szTable

        result := DllCall("msi.dll\MsiSequenceA", "ptr", hInstall, "ptr", szTable, "int", iSequenceMode, "uint")
        return result
    }

    /**
     * The MsiSequence function executes another action sequence, as described in the specified table.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szTable Specifies the name of the table containing the action sequence.
     * @param {Integer} iSequenceMode This parameter is currently unimplemented. It is reserved for future use and must be 0.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisequencew
     * @since windows8.0
     */
    static MsiSequenceW(hInstall, szTable, iSequenceMode) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szTable := szTable is String ? StrPtr(szTable) : szTable

        result := DllCall("msi.dll\MsiSequenceW", "ptr", hInstall, "ptr", szTable, "int", iSequenceMode, "uint")
        return result
    }

    /**
     * The MsiProcessMessage function sends an error record to the installer for processing.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Integer} eMessageType The <i>eMessage</i> parameter must be a value specifying one of the following message types. To display a message box with push buttons or icons, use OR-operators to add INSTALLMESSAGE_ERROR, INSTALLMESSAGE_WARNING, or INSTALLMESSAGE_USER to the standard message box styles used by 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-messagebox">MessageBox</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-messageboxexa">MessageBoxEx</a> functions. For more information, see the Remarks below. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_FATALEXIT"></a><a id="installmessage_fatalexit"></a><dl>
     * <dt><b>INSTALLMESSAGE_FATALEXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Premature termination, possibly fatal out of memory.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_ERROR"></a><a id="installmessage_error"></a><dl>
     * <dt><b>INSTALLMESSAGE_ERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Formatted error message,<div> </div>[1] is message number in 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/error-table">Error table</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_WARNING"></a><a id="installmessage_warning"></a><dl>
     * <dt><b>INSTALLMESSAGE_WARNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Formatted warning message,<div> </div>[1] is message number in Error table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_USER"></a><a id="installmessage_user"></a><dl>
     * <dt><b>INSTALLMESSAGE_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * User request message,<div> </div>[1] is message number in Error table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_INFO"></a><a id="installmessage_info"></a><dl>
     * <dt><b>INSTALLMESSAGE_INFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Informative message for log,<div> </div>not to be displayed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_FILESINUSE"></a><a id="installmessage_filesinuse"></a><dl>
     * <dt><b>INSTALLMESSAGE_FILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * List of files currently in use that must be closed before being replaced. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_RESOLVESOURCE"></a><a id="installmessage_resolvesource"></a><dl>
     * <dt><b>INSTALLMESSAGE_RESOLVESOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Request to determine a valid source location.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_RMFILESINUSE"></a><a id="installmessage_rmfilesinuse"></a><dl>
     * <dt><b>INSTALLMESSAGE_RMFILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * List of files currently in use that must be closed before being replaced. Available beginning with Windows Installer version 4.0. For more information about this message see <a href="https://docs.microsoft.com/windows/desktop/Msi/using-restart-manager-with-an-external-ui-">Using Restart Manager with an External UI</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_OUTOFDISKSPACE"></a><a id="installmessage_outofdiskspace"></a><dl>
     * <dt><b>INSTALLMESSAGE_OUTOFDISKSPACE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Insufficient disk space message.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_ACTIONSTART"></a><a id="installmessage_actionstart"></a><dl>
     * <dt><b>INSTALLMESSAGE_ACTIONSTART</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Progress: start of action,<div> </div>[1] action name,<div> </div>[2] description,<div> </div>[3] template for ACTIONDATA messages.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_ACTIONDATA"></a><a id="installmessage_actiondata"></a><dl>
     * <dt><b>INSTALLMESSAGE_ACTIONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Action data. Record fields correspond to the template of ACTIONSTART message.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_PROGRESS"></a><a id="installmessage_progress"></a><dl>
     * <dt><b>INSTALLMESSAGE_PROGRESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Progress bar information. See the description of record fields below.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_COMMONDATA"></a><a id="installmessage_commondata"></a><dl>
     * <dt><b>INSTALLMESSAGE_COMMONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * To enable the Cancel button set [1] to 2 and [2] to 1. 
     * 
     * 
     * 
     * 
     * To disable the Cancel button set [1] to 2 and [2] to 0
     * 
     * </td>
     * </tr>
     * </table>
     * @param {MSIHANDLE} hRecord Handle to a record containing message format and data.
     * @returns {Integer} This function returns int.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiprocessmessage
     * @since windows8.0
     */
    static MsiProcessMessage(hInstall, eMessageType, hRecord) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        hRecord := hRecord is Win32Handle ? NumGet(hRecord, "ptr") : hRecord

        result := DllCall("msi.dll\MsiProcessMessage", "ptr", hInstall, "int", eMessageType, "ptr", hRecord, "int")
        return result
    }

    /**
     * The MsiEvaluateCondition function evaluates a conditional expression containing property names and values.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szCondition Specifies the conditional expression. This parameter must not be <b>NULL</b>. For the syntax of conditional expressions see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/conditional-statement-syntax">Conditional Statement Syntax</a>.
     * @returns {Integer} This function returns MSICONDITION.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msievaluateconditiona
     * @since windows8.0
     */
    static MsiEvaluateConditionA(hInstall, szCondition) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szCondition := szCondition is String ? StrPtr(szCondition) : szCondition

        result := DllCall("msi.dll\MsiEvaluateConditionA", "ptr", hInstall, "ptr", szCondition, "int")
        return result
    }

    /**
     * The MsiEvaluateCondition function evaluates a conditional expression containing property names and values.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szCondition Specifies the conditional expression. This parameter must not be <b>NULL</b>. For the syntax of conditional expressions see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/conditional-statement-syntax">Conditional Statement Syntax</a>.
     * @returns {Integer} This function returns MSICONDITION.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msievaluateconditionw
     * @since windows8.0
     */
    static MsiEvaluateConditionW(hInstall, szCondition) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szCondition := szCondition is String ? StrPtr(szCondition) : szCondition

        result := DllCall("msi.dll\MsiEvaluateConditionW", "ptr", hInstall, "ptr", szCondition, "int")
        return result
    }

    /**
     * The MsiGetFeatureState function gets the requested state of a feature.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szFeature Specifies the feature name within the product.
     * @param {Pointer<Integer>} piInstalled 
     * @param {Pointer<Integer>} piAction Receives the action taken during the installation session. This parameter must not be null. For return values, see <i>piInstalled</i>.
     * @returns {Integer} The 
     * <b>MsiGetFeatureState</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetfeaturestatea
     * @since windows8.0
     */
    static MsiGetFeatureStateA(hInstall, szFeature, piInstalled, piAction) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        piInstalledMarshal := piInstalled is VarRef ? "int*" : "ptr"
        piActionMarshal := piAction is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiGetFeatureStateA", "ptr", hInstall, "ptr", szFeature, piInstalledMarshal, piInstalled, piActionMarshal, piAction, "uint")
        return result
    }

    /**
     * The MsiGetFeatureState function gets the requested state of a feature.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szFeature Specifies the feature name within the product.
     * @param {Pointer<Integer>} piInstalled 
     * @param {Pointer<Integer>} piAction Receives the action taken during the installation session. This parameter must not be null. For return values, see <i>piInstalled</i>.
     * @returns {Integer} The 
     * <b>MsiGetFeatureState</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetfeaturestatew
     * @since windows8.0
     */
    static MsiGetFeatureStateW(hInstall, szFeature, piInstalled, piAction) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        piInstalledMarshal := piInstalled is VarRef ? "int*" : "ptr"
        piActionMarshal := piAction is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiGetFeatureStateW", "ptr", hInstall, "ptr", szFeature, piInstalledMarshal, piInstalled, piActionMarshal, piAction, "uint")
        return result
    }

    /**
     * The MsiSetFeatureState function sets a feature to a specified state.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szFeature Specifies the name of the feature.
     * @param {Integer} iState 
     * @returns {Integer} The 
     * <b>MsiSetFeatureState</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisetfeaturestatea
     * @since windows8.0
     */
    static MsiSetFeatureStateA(hInstall, szFeature, iState) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiSetFeatureStateA", "ptr", hInstall, "ptr", szFeature, "int", iState, "uint")
        return result
    }

    /**
     * The MsiSetFeatureState function sets a feature to a specified state.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szFeature Specifies the name of the feature.
     * @param {Integer} iState 
     * @returns {Integer} The 
     * <b>MsiSetFeatureState</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisetfeaturestatew
     * @since windows8.0
     */
    static MsiSetFeatureStateW(hInstall, szFeature, iState) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiSetFeatureStateW", "ptr", hInstall, "ptr", szFeature, "int", iState, "uint")
        return result
    }

    /**
     * The MsiSetFeatureAttributes function can modify the default attributes of a feature at runtime. Note that the default attributes of features are authored in the Attributes column of the Feature table.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szFeature Specifies the feature name within the product.
     * @param {Integer} dwAttributes Feature attributes specified at run time as a set of bit flags: 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Constant</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORLOCAL"></a><a id="installfeatureattribute_favorlocal"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORLOCAL</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorLocal at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORSOURCE"></a><a id="installfeatureattribute_favorsource"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORSOURCE</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorSource at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FOLLOWPARENT"></a><a id="installfeatureattribute_followparent"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFollowParent at run time. Note that this is not a valid attribute to be set for top-level features. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORADVERTISE"></a><a id="installfeatureattribute_favoradvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE</b></dt>
     * <dt>8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE"></a><a id="installfeatureattribute_disallowadvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE</b></dt>
     * <dt>16</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesDisallowAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE"></a><a id="installfeatureattribute_nounsupportedadvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE</b></dt>
     * <dt>32</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesNoUnsupportedAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisetfeatureattributesa
     * @since windows8.0
     */
    static MsiSetFeatureAttributesA(hInstall, szFeature, dwAttributes) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiSetFeatureAttributesA", "ptr", hInstall, "ptr", szFeature, "uint", dwAttributes, "uint")
        return result
    }

    /**
     * The MsiSetFeatureAttributes function can modify the default attributes of a feature at runtime. Note that the default attributes of features are authored in the Attributes column of the Feature table.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szFeature Specifies the feature name within the product.
     * @param {Integer} dwAttributes Feature attributes specified at run time as a set of bit flags: 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Constant</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORLOCAL"></a><a id="installfeatureattribute_favorlocal"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORLOCAL</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorLocal at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORSOURCE"></a><a id="installfeatureattribute_favorsource"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORSOURCE</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorSource at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FOLLOWPARENT"></a><a id="installfeatureattribute_followparent"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFollowParent at run time. Note that this is not a valid attribute to be set for top-level features. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORADVERTISE"></a><a id="installfeatureattribute_favoradvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE</b></dt>
     * <dt>8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE"></a><a id="installfeatureattribute_disallowadvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE</b></dt>
     * <dt>16</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesDisallowAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE"></a><a id="installfeatureattribute_nounsupportedadvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE</b></dt>
     * <dt>32</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesNoUnsupportedAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisetfeatureattributesw
     * @since windows8.0
     */
    static MsiSetFeatureAttributesW(hInstall, szFeature, dwAttributes) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        result := DllCall("msi.dll\MsiSetFeatureAttributesW", "ptr", hInstall, "ptr", szFeature, "uint", dwAttributes, "uint")
        return result
    }

    /**
     * The MsiGetComponentState function obtains the state of a component.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szComponent A null-terminated string that specifies the component name within the product.
     * @param {Pointer<Integer>} piInstalled 
     * @param {Pointer<Integer>} piAction Receives the action taken during the installation. This parameter must not be null. For return values, see <i>piInstalled</i>.
     * @returns {Integer} The 
     * <b>MsiGetComponentState</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetcomponentstatea
     * @since windows8.0
     */
    static MsiGetComponentStateA(hInstall, szComponent, piInstalled, piAction) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent

        piInstalledMarshal := piInstalled is VarRef ? "int*" : "ptr"
        piActionMarshal := piAction is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiGetComponentStateA", "ptr", hInstall, "ptr", szComponent, piInstalledMarshal, piInstalled, piActionMarshal, piAction, "uint")
        return result
    }

    /**
     * The MsiGetComponentState function obtains the state of a component.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szComponent A null-terminated string that specifies the component name within the product.
     * @param {Pointer<Integer>} piInstalled 
     * @param {Pointer<Integer>} piAction Receives the action taken during the installation. This parameter must not be null. For return values, see <i>piInstalled</i>.
     * @returns {Integer} The 
     * <b>MsiGetComponentState</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetcomponentstatew
     * @since windows8.0
     */
    static MsiGetComponentStateW(hInstall, szComponent, piInstalled, piAction) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent

        piInstalledMarshal := piInstalled is VarRef ? "int*" : "ptr"
        piActionMarshal := piAction is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiGetComponentStateW", "ptr", hInstall, "ptr", szComponent, piInstalledMarshal, piInstalled, piActionMarshal, piAction, "uint")
        return result
    }

    /**
     * The MsiSetComponentState function sets a component to the requested state.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szComponent Specifies the name of the component.
     * @param {Integer} iState 
     * @returns {Integer} The 
     * <b>MsiSetComponentState</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisetcomponentstatea
     * @since windows8.0
     */
    static MsiSetComponentStateA(hInstall, szComponent, iState) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent

        result := DllCall("msi.dll\MsiSetComponentStateA", "ptr", hInstall, "ptr", szComponent, "int", iState, "uint")
        return result
    }

    /**
     * The MsiSetComponentState function sets a component to the requested state.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szComponent Specifies the name of the component.
     * @param {Integer} iState 
     * @returns {Integer} The 
     * <b>MsiSetComponentState</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisetcomponentstatew
     * @since windows8.0
     */
    static MsiSetComponentStateW(hInstall, szComponent, iState) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent

        result := DllCall("msi.dll\MsiSetComponentStateW", "ptr", hInstall, "ptr", szComponent, "int", iState, "uint")
        return result
    }

    /**
     * The MsiGetFeatureCost function returns the disk space required by a feature and its selected children and parent features.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szFeature Specifies the name of the feature.
     * @param {Integer} iCostTree 
     * @param {Integer} iState 
     * @param {Pointer<Integer>} piCost Receives the disk space requirements in units of 512 bytes. This parameter must not be null.
     * @returns {Integer} The 
     * <b>MsiGetFeatureCost</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetfeaturecosta
     * @since windows8.0
     */
    static MsiGetFeatureCostA(hInstall, szFeature, iCostTree, iState, piCost) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        piCostMarshal := piCost is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiGetFeatureCostA", "ptr", hInstall, "ptr", szFeature, "int", iCostTree, "int", iState, piCostMarshal, piCost, "uint")
        return result
    }

    /**
     * The MsiGetFeatureCost function returns the disk space required by a feature and its selected children and parent features.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szFeature Specifies the name of the feature.
     * @param {Integer} iCostTree 
     * @param {Integer} iState 
     * @param {Pointer<Integer>} piCost Receives the disk space requirements in units of 512 bytes. This parameter must not be null.
     * @returns {Integer} The 
     * <b>MsiGetFeatureCost</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetfeaturecostw
     * @since windows8.0
     */
    static MsiGetFeatureCostW(hInstall, szFeature, iCostTree, iState, piCost) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        piCostMarshal := piCost is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiGetFeatureCostW", "ptr", hInstall, "ptr", szFeature, "int", iCostTree, "int", iState, piCostMarshal, piCost, "uint")
        return result
    }

    /**
     * The MsiEnumComponentCosts function enumerates the disk-space per drive required to install a component.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szComponent A null-terminated string specifying the component's name as it is listed in the Component column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component table</a>. This parameter can be null. If <i>szComponent</i> is null or an empty string, 
     * <b>MsiEnumComponentCosts</b> enumerates the total disk-space per drive used during the installation. In this case, <i>iState</i> is ignored. The costs of the installer include those costs for caching the database in the secure folder as well as the cost to create the installation script. Note that the total disk-space used during the installation may be larger than the space used after the component is installed.
     * @param {Integer} dwIndex 0-based index for drives. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponentCosts</b> function and then incremented for subsequent calls.
     * @param {Integer} iState Requested component state to be enumerated. If <i>szComponent</i> is passed as Null or an empty string, the installer ignores the <i>iState</i> parameter.
     * @param {PSTR} szDriveBuf Buffer that holds the drive name including the null terminator. This is an empty string in case of an error.
     * @param {Pointer<Integer>} pcchDriveBuf Pointer to a variable that specifies the size, in TCHARs, of the buffer pointed to by the <i>lpDriveBuf</i> parameter. This size should include the terminating null character. If the buffer provided is too small, the variable pointed to by <i>pcchDriveBuf</i> contains the count of characters not including the null terminator.
     * @param {Pointer<Integer>} piCost Cost of the component per drive expressed in multiples of 512 bytes. This value is 0 if an error has occurred. The value returned in <i>piCost</i> is final disk-space used by the component after installation. If <i>szComponent</i> is passed as Null or an empty string, the installer sets the value at <i>piCost</i> to 0.
     * @param {Pointer<Integer>} piTempCost The component cost per drive for the duration of the installation, or 0 if an error occurred. The value in *<i>piTempCost</i> represents the temporary space requirements for the duration of the installation. This temporary space requirement is space needed only for the duration of the installation. This does not affect the final disk space requirement.
     * @returns {Integer} <table>
     * <tr>
     * <th>Return Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE_STATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more drives to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is missing.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_NOT_CALLED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Costing is not complete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Buffer not large enough for the drive name.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The supplied handle is invalid or inactive.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msienumcomponentcostsa
     * @since windows8.0
     */
    static MsiEnumComponentCostsA(hInstall, szComponent, dwIndex, iState, szDriveBuf, pcchDriveBuf, piCost, piTempCost) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        szDriveBuf := szDriveBuf is String ? StrPtr(szDriveBuf) : szDriveBuf

        pcchDriveBufMarshal := pcchDriveBuf is VarRef ? "uint*" : "ptr"
        piCostMarshal := piCost is VarRef ? "int*" : "ptr"
        piTempCostMarshal := piTempCost is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiEnumComponentCostsA", "ptr", hInstall, "ptr", szComponent, "uint", dwIndex, "int", iState, "ptr", szDriveBuf, pcchDriveBufMarshal, pcchDriveBuf, piCostMarshal, piCost, piTempCostMarshal, piTempCost, "uint")
        return result
    }

    /**
     * The MsiEnumComponentCosts function enumerates the disk-space per drive required to install a component.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szComponent A null-terminated string specifying the component's name as it is listed in the Component column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component table</a>. This parameter can be null. If <i>szComponent</i> is null or an empty string, 
     * <b>MsiEnumComponentCosts</b> enumerates the total disk-space per drive used during the installation. In this case, <i>iState</i> is ignored. The costs of the installer include those costs for caching the database in the secure folder as well as the cost to create the installation script. Note that the total disk-space used during the installation may be larger than the space used after the component is installed.
     * @param {Integer} dwIndex 0-based index for drives. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponentCosts</b> function and then incremented for subsequent calls.
     * @param {Integer} iState Requested component state to be enumerated. If <i>szComponent</i> is passed as Null or an empty string, the installer ignores the <i>iState</i> parameter.
     * @param {PWSTR} szDriveBuf Buffer that holds the drive name including the null terminator. This is an empty string in case of an error.
     * @param {Pointer<Integer>} pcchDriveBuf Pointer to a variable that specifies the size, in TCHARs, of the buffer pointed to by the <i>lpDriveBuf</i> parameter. This size should include the terminating null character. If the buffer provided is too small, the variable pointed to by <i>pcchDriveBuf</i> contains the count of characters not including the null terminator.
     * @param {Pointer<Integer>} piCost Cost of the component per drive expressed in multiples of 512 bytes. This value is 0 if an error has occurred. The value returned in <i>piCost</i> is final disk-space used by the component after installation. If <i>szComponent</i> is passed as Null or an empty string, the installer sets the value at <i>piCost</i> to 0.
     * @param {Pointer<Integer>} piTempCost The component cost per drive for the duration of the installation, or 0 if an error occurred. The value in *<i>piTempCost</i> represents the temporary space requirements for the duration of the installation. This temporary space requirement is space needed only for the duration of the installation. This does not affect the final disk space requirement.
     * @returns {Integer} <table>
     * <tr>
     * <th>Return Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE_STATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The configuration data is corrupt.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An invalid parameter was passed to the function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_NO_MORE_ITEMS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There are no more drives to return.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A value was enumerated.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_UNKNOWN_COMPONENT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is missing.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_NOT_CALLED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Costing is not complete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Buffer not large enough for the drive name.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_HANDLE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The supplied handle is invalid or inactive.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msienumcomponentcostsw
     * @since windows8.0
     */
    static MsiEnumComponentCostsW(hInstall, szComponent, dwIndex, iState, szDriveBuf, pcchDriveBuf, piCost, piTempCost) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szComponent := szComponent is String ? StrPtr(szComponent) : szComponent
        szDriveBuf := szDriveBuf is String ? StrPtr(szDriveBuf) : szDriveBuf

        pcchDriveBufMarshal := pcchDriveBuf is VarRef ? "uint*" : "ptr"
        piCostMarshal := piCost is VarRef ? "int*" : "ptr"
        piTempCostMarshal := piTempCost is VarRef ? "int*" : "ptr"

        result := DllCall("msi.dll\MsiEnumComponentCostsW", "ptr", hInstall, "ptr", szComponent, "uint", dwIndex, "int", iState, "ptr", szDriveBuf, pcchDriveBufMarshal, pcchDriveBuf, piCostMarshal, piCost, piTempCostMarshal, piTempCost, "uint")
        return result
    }

    /**
     * The MsiSetInstallLevel function sets the installation level for a full product installation.
     * @param {MSIHANDLE} hInstall Handle to the installation that is provided to a DLL custom action or obtained by using <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Integer} iInstallLevel The installation level.
     * @returns {Integer} The 
     * <b>MsiSetInstallLevel</b> function returns one of the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisetinstalllevel
     * @since windows8.0
     */
    static MsiSetInstallLevel(hInstall, iInstallLevel) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall

        result := DllCall("msi.dll\MsiSetInstallLevel", "ptr", hInstall, "int", iInstallLevel, "uint")
        return result
    }

    /**
     * The MsiGetFeatureValidStates function returns a valid installation state.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szFeature Specifies the feature name.
     * @param {Pointer<Integer>} lpInstallStates 
     * @returns {Integer} The 
     * <b>MsiGetFeatureValidStates</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetfeaturevalidstatesa
     * @since windows8.0
     */
    static MsiGetFeatureValidStatesA(hInstall, szFeature, lpInstallStates) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        lpInstallStatesMarshal := lpInstallStates is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetFeatureValidStatesA", "ptr", hInstall, "ptr", szFeature, lpInstallStatesMarshal, lpInstallStates, "uint")
        return result
    }

    /**
     * The MsiGetFeatureValidStates function returns a valid installation state.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szFeature Specifies the feature name.
     * @param {Pointer<Integer>} lpInstallStates 
     * @returns {Integer} The 
     * <b>MsiGetFeatureValidStates</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetfeaturevalidstatesw
     * @since windows8.0
     */
    static MsiGetFeatureValidStatesW(hInstall, szFeature, lpInstallStates) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFeature := szFeature is String ? StrPtr(szFeature) : szFeature

        lpInstallStatesMarshal := lpInstallStates is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetFeatureValidStatesW", "ptr", hInstall, "ptr", szFeature, lpInstallStatesMarshal, lpInstallStates, "uint")
        return result
    }

    /**
     * The MsiGetSourcePath function returns the full source path for a folder in the Directory table.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szFolder A null-terminated string that specifies a record of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.
     * @param {PSTR} szPathBuf Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szPathBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.
     * @returns {Integer} The 
     * <b>MsiGetSourcePath</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetsourcepatha
     * @since windows8.0
     */
    static MsiGetSourcePathA(hInstall, szFolder, szPathBuf, pcchPathBuf) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFolder := szFolder is String ? StrPtr(szFolder) : szFolder
        szPathBuf := szPathBuf is String ? StrPtr(szPathBuf) : szPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetSourcePathA", "ptr", hInstall, "ptr", szFolder, "ptr", szPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiGetSourcePath function returns the full source path for a folder in the Directory table.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szFolder A null-terminated string that specifies a record of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.
     * @param {PWSTR} szPathBuf Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szPathBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.
     * @returns {Integer} The 
     * <b>MsiGetSourcePath</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetsourcepathw
     * @since windows8.0
     */
    static MsiGetSourcePathW(hInstall, szFolder, szPathBuf, pcchPathBuf) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFolder := szFolder is String ? StrPtr(szFolder) : szFolder
        szPathBuf := szPathBuf is String ? StrPtr(szPathBuf) : szPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetSourcePathW", "ptr", hInstall, "ptr", szFolder, "ptr", szPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiGetTargetPath function returns the full target path for a folder in the Directory table.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szFolder A null-terminated string that specifies a record of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.
     * @param {PSTR} szPathBuf Pointer to the buffer that receives the null terminated full target path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szPathBuf</i> When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.
     * @returns {Integer} The 
     * <b>MsiGetTargetPath</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigettargetpatha
     * @since windows8.0
     */
    static MsiGetTargetPathA(hInstall, szFolder, szPathBuf, pcchPathBuf) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFolder := szFolder is String ? StrPtr(szFolder) : szFolder
        szPathBuf := szPathBuf is String ? StrPtr(szPathBuf) : szPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetTargetPathA", "ptr", hInstall, "ptr", szFolder, "ptr", szPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiGetTargetPath function returns the full target path for a folder in the Directory table.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szFolder A null-terminated string that specifies a record of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.
     * @param {PWSTR} szPathBuf Pointer to the buffer that receives the null terminated full target path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<Integer>} pcchPathBuf Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szPathBuf</i> When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.
     * @returns {Integer} The 
     * <b>MsiGetTargetPath</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigettargetpathw
     * @since windows8.0
     */
    static MsiGetTargetPathW(hInstall, szFolder, szPathBuf, pcchPathBuf) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFolder := szFolder is String ? StrPtr(szFolder) : szFolder
        szPathBuf := szPathBuf is String ? StrPtr(szPathBuf) : szPathBuf

        pcchPathBufMarshal := pcchPathBuf is VarRef ? "uint*" : "ptr"

        result := DllCall("msi.dll\MsiGetTargetPathW", "ptr", hInstall, "ptr", szFolder, "ptr", szPathBuf, pcchPathBufMarshal, pcchPathBuf, "uint")
        return result
    }

    /**
     * The MsiSetTargetPath function sets the full target path for a folder in the Directory table.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PSTR} szFolder Specifies the folder identifier. This is a primary key in the Directory table.
     * @param {PSTR} szFolderPath Specifies the full path for the folder, ending in a directory separator.
     * @returns {Integer} The 
     * <b>MsiSetTargetPath</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisettargetpatha
     * @since windows8.0
     */
    static MsiSetTargetPathA(hInstall, szFolder, szFolderPath) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFolder := szFolder is String ? StrPtr(szFolder) : szFolder
        szFolderPath := szFolderPath is String ? StrPtr(szFolderPath) : szFolderPath

        result := DllCall("msi.dll\MsiSetTargetPathA", "ptr", hInstall, "ptr", szFolder, "ptr", szFolderPath, "uint")
        return result
    }

    /**
     * The MsiSetTargetPath function sets the full target path for a folder in the Directory table.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {PWSTR} szFolder Specifies the folder identifier. This is a primary key in the Directory table.
     * @param {PWSTR} szFolderPath Specifies the full path for the folder, ending in a directory separator.
     * @returns {Integer} The 
     * <b>MsiSetTargetPath</b> function returns the following values:
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msisettargetpathw
     * @since windows8.0
     */
    static MsiSetTargetPathW(hInstall, szFolder, szFolderPath) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall
        szFolder := szFolder is String ? StrPtr(szFolder) : szFolder
        szFolderPath := szFolderPath is String ? StrPtr(szFolderPath) : szFolderPath

        result := DllCall("msi.dll\MsiSetTargetPathW", "ptr", hInstall, "ptr", szFolder, "ptr", szFolderPath, "uint")
        return result
    }

    /**
     * The MsiVerifyDiskSpace function checks to see if sufficient disk space is present for the current installation.
     * @param {MSIHANDLE} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msiverifydiskspace
     * @since windows8.0
     */
    static MsiVerifyDiskSpace(hInstall) {
        hInstall := hInstall is Win32Handle ? NumGet(hInstall, "ptr") : hInstall

        result := DllCall("msi.dll\MsiVerifyDiskSpace", "ptr", hInstall, "uint")
        return result
    }

    /**
     * The MsiEnableUIPreview function enables preview mode of the user interface to facilitate authoring of user-interface dialog boxes. This function returns a handle that should be closed using MsiCloseHandle.
     * @param {MSIHANDLE} hDatabase Handle to the database.
     * @param {Pointer<MSIHANDLE>} phPreview Pointer to a returned handle for user-interface preview capability.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msienableuipreview
     * @since windows8.0
     */
    static MsiEnableUIPreview(hDatabase, phPreview) {
        hDatabase := hDatabase is Win32Handle ? NumGet(hDatabase, "ptr") : hDatabase

        result := DllCall("msi.dll\MsiEnableUIPreview", "ptr", hDatabase, "ptr", phPreview, "uint")
        return result
    }

    /**
     * The MsiPreviewDialog function displays a dialog box as modeless and inactive.
     * @param {MSIHANDLE} hPreview Handle to the preview.
     * @param {PSTR} szDialogName Specifies the name of the dialog box to preview.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msipreviewdialoga
     * @since windows8.0
     */
    static MsiPreviewDialogA(hPreview, szDialogName) {
        hPreview := hPreview is Win32Handle ? NumGet(hPreview, "ptr") : hPreview
        szDialogName := szDialogName is String ? StrPtr(szDialogName) : szDialogName

        result := DllCall("msi.dll\MsiPreviewDialogA", "ptr", hPreview, "ptr", szDialogName, "uint")
        return result
    }

    /**
     * The MsiPreviewDialog function displays a dialog box as modeless and inactive.
     * @param {MSIHANDLE} hPreview Handle to the preview.
     * @param {PWSTR} szDialogName Specifies the name of the dialog box to preview.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msipreviewdialogw
     * @since windows8.0
     */
    static MsiPreviewDialogW(hPreview, szDialogName) {
        hPreview := hPreview is Win32Handle ? NumGet(hPreview, "ptr") : hPreview
        szDialogName := szDialogName is String ? StrPtr(szDialogName) : szDialogName

        result := DllCall("msi.dll\MsiPreviewDialogW", "ptr", hPreview, "ptr", szDialogName, "uint")
        return result
    }

    /**
     * The MsiPreviewBillboard function displays a billboard with the host control in the displayed dialog box.
     * @param {MSIHANDLE} hPreview Handle to the preview.
     * @param {PSTR} szControlName Specifies the name of the host control.
     * @param {PSTR} szBillboard Specifies the name of the billboard to display.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msipreviewbillboarda
     * @since windows8.0
     */
    static MsiPreviewBillboardA(hPreview, szControlName, szBillboard) {
        hPreview := hPreview is Win32Handle ? NumGet(hPreview, "ptr") : hPreview
        szControlName := szControlName is String ? StrPtr(szControlName) : szControlName
        szBillboard := szBillboard is String ? StrPtr(szBillboard) : szBillboard

        result := DllCall("msi.dll\MsiPreviewBillboardA", "ptr", hPreview, "ptr", szControlName, "ptr", szBillboard, "uint")
        return result
    }

    /**
     * The MsiPreviewBillboard function displays a billboard with the host control in the displayed dialog box.
     * @param {MSIHANDLE} hPreview Handle to the preview.
     * @param {PWSTR} szControlName Specifies the name of the host control.
     * @param {PWSTR} szBillboard Specifies the name of the billboard to display.
     * @returns {Integer} This function returns UINT.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msipreviewbillboardw
     * @since windows8.0
     */
    static MsiPreviewBillboardW(hPreview, szControlName, szBillboard) {
        hPreview := hPreview is Win32Handle ? NumGet(hPreview, "ptr") : hPreview
        szControlName := szControlName is String ? StrPtr(szControlName) : szControlName
        szBillboard := szBillboard is String ? StrPtr(szBillboard) : szBillboard

        result := DllCall("msi.dll\MsiPreviewBillboardW", "ptr", hPreview, "ptr", szControlName, "ptr", szBillboard, "uint")
        return result
    }

    /**
     * The MsiGetLastErrorRecord function returns the error record that was last returned for the calling process. This function returns a handle that should be closed using MsiCloseHandle.
     * @returns {MSIHANDLE} A handle to the error record. If the last function was successful, 
     * <b>MsiGetLastErrorRecord</b> returns a null <b>MSIHANDLE</b>.
     * @see https://docs.microsoft.com/windows/win32/api//msiquery/nf-msiquery-msigetlasterrorrecord
     * @since windows8.0
     */
    static MsiGetLastErrorRecord() {
        result := DllCall("msi.dll\MsiGetLastErrorRecord", "ptr")
        return MSIHANDLE({Value: result}, True)
    }

    /**
     * Retrieves the complete list of protected files.
     * @param {HANDLE} RpcHandle This parameter must be <b>NULL</b>.
     * @param {Pointer<PROTECTED_FILE_DATA>} ProtFileData The list of protected files. The format of this structure is as follows. 
     * 
     * 
     * 
     * 
     * <pre class="syntax" xml:space="preserve"><code>typedef struct _PROTECTED_FILE_DATA {
     *     WCHAR   FileName[MAX_PATH];
     *     DWORD   FileNumber;
     * } PROTECTED_FILE_DATA, *PPROTECTED_FILE_DATA;</code></pre>
     * Before calling this function the first time, set the <b>FileNumber</b> member to zero.
     * @returns {BOOL} If the function succeeds, the return value is nonzero.
     * 
     * If there are no more protected files to enumerate, the return value is zero and 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns ERROR_NO_MORE_FILES. If the function fails, <b>GetLastError</b> will return a different error code.
     * @see https://docs.microsoft.com/windows/win32/api//sfc/nf-sfc-sfcgetnextprotectedfile
     * @since windows5.1.2600
     */
    static SfcGetNextProtectedFile(RpcHandle, ProtFileData) {
        RpcHandle := RpcHandle is Win32Handle ? NumGet(RpcHandle, "ptr") : RpcHandle

        A_LastError := 0

        result := DllCall("sfc.dll\SfcGetNextProtectedFile", "ptr", RpcHandle, "ptr", ProtFileData, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * Determines whether the specified file is protected.
     * @param {HANDLE} RpcHandle This parameter must be <b>NULL</b>.
     * @param {PWSTR} ProtFileName The name of the file.
     * @returns {BOOL} If the file is protected, the return value is a nonzero value.
     * 
     * If the file is not protected, the return value is zero.
     * @see https://docs.microsoft.com/windows/win32/api//sfc/nf-sfc-sfcisfileprotected
     * @since windows5.1.2600
     */
    static SfcIsFileProtected(RpcHandle, ProtFileName) {
        RpcHandle := RpcHandle is Win32Handle ? NumGet(RpcHandle, "ptr") : RpcHandle
        ProtFileName := ProtFileName is String ? StrPtr(ProtFileName) : ProtFileName

        result := DllCall("sfc.dll\SfcIsFileProtected", "ptr", RpcHandle, "ptr", ProtFileName, "int")
        return result
    }

    /**
     * Determines whether the specified registry key is protected.
     * @param {HKEY} KeyHandle A handle to the root registry key. This must be a handle to one of the following <a href="https://docs.microsoft.com/windows/desktop/SysInfo/predefined-keys">predefined keys</a>.
     * 
     * <p class="indent">HKEY_CLASSES_ROOT
     * 
     * <p class="indent">HKEY_CURRENT_USER
     * 
     * <p class="indent">HKEY_LOCAL_MACHINE
     * 
     * <p class="indent">HKEY_USERS
     * @param {PWSTR} SubKeyName A <b>null</b>-terminated string value containing the name of the subkey. This key must a subkey of the key identified by the <i>hKey</i> parameter. For more information about key names, see <a href="https://docs.microsoft.com/windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>. 
     * If this parameter is <b>NULL</b>, the function only checks whether the root registry key is protected.
     * @param {Integer} KeySam A constant that specifies the alternate registry view that should be used by applications that run on 64-bit Windows.  This flag is ignored on the x86 platform. For more information, see <a href="https://docs.microsoft.com/windows/desktop/WinProg64/accessing-an-alternate-registry-view">Accessing an Alternate Registry View</a>.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0x0000</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Use the 32-bit registry key from 32-bit applications and use the 64-bit registry key from 64-bit applications.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="KEY_WOW64_64KEY"></a><a id="key_wow64_64key"></a><dl>
     * <dt><b>KEY_WOW64_64KEY</b></dt>
     * <dt>0x0100</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Use the 64-bit registry key from either a 32-bit or 64-bit application.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="KEY_WOW64_32KEY"></a><a id="key_wow64_32key"></a><dl>
     * <dt><b>KEY_WOW64_32KEY</b></dt>
     * <dt>0x0200</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Use the 32-bit registry key from either a 32-bit or 64-bit application.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {BOOL} If the key is protected, the return value is a nonzero value.
     * 
     * If the key is not protected, the return value is zero.
     * @see https://docs.microsoft.com/windows/win32/api//sfc/nf-sfc-sfciskeyprotected
     * @since windows6.0.6000
     */
    static SfcIsKeyProtected(KeyHandle, SubKeyName, KeySam) {
        KeyHandle := KeyHandle is Win32Handle ? NumGet(KeyHandle, "ptr") : KeyHandle
        SubKeyName := SubKeyName is String ? StrPtr(SubKeyName) : SubKeyName

        result := DllCall("sfc.dll\SfcIsKeyProtected", "ptr", KeyHandle, "ptr", SubKeyName, "uint", KeySam, "int")
        return result
    }

    /**
     * 
     * @param {PSTR} pszFileName 
     * @param {PSTR} pszError 
     * @param {Integer} dwErrSize 
     * @returns {BOOL} 
     */
    static SfpVerifyFile(pszFileName, pszError, dwErrSize) {
        pszFileName := pszFileName is String ? StrPtr(pszFileName) : pszFileName
        pszError := pszError is String ? StrPtr(pszError) : pszError

        result := DllCall("sfc.dll\SfpVerifyFile", "ptr", pszFileName, "ptr", pszError, "uint", dwErrSize, "int")
        return result
    }

    /**
     * 
     * @param {PSTR} OldFileName 
     * @param {PSTR} NewFileName 
     * @param {PSTR} PatchFileName 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @returns {BOOL} 
     */
    static CreatePatchFileA(OldFileName, NewFileName, PatchFileName, OptionFlags, OptionData) {
        OldFileName := OldFileName is String ? StrPtr(OldFileName) : OldFileName
        NewFileName := NewFileName is String ? StrPtr(NewFileName) : NewFileName
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName

        result := DllCall("mspatchc.dll\CreatePatchFileA", "ptr", OldFileName, "ptr", NewFileName, "ptr", PatchFileName, "uint", OptionFlags, "ptr", OptionData, "int")
        return result
    }

    /**
     * 
     * @param {PWSTR} OldFileName 
     * @param {PWSTR} NewFileName 
     * @param {PWSTR} PatchFileName 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @returns {BOOL} 
     */
    static CreatePatchFileW(OldFileName, NewFileName, PatchFileName, OptionFlags, OptionData) {
        OldFileName := OldFileName is String ? StrPtr(OldFileName) : OldFileName
        NewFileName := NewFileName is String ? StrPtr(NewFileName) : NewFileName
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName

        result := DllCall("mspatchc.dll\CreatePatchFileW", "ptr", OldFileName, "ptr", NewFileName, "ptr", PatchFileName, "uint", OptionFlags, "ptr", OptionData, "int")
        return result
    }

    /**
     * 
     * @param {HANDLE} OldFileHandle 
     * @param {HANDLE} NewFileHandle 
     * @param {HANDLE} PatchFileHandle 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @returns {BOOL} 
     */
    static CreatePatchFileByHandles(OldFileHandle, NewFileHandle, PatchFileHandle, OptionFlags, OptionData) {
        OldFileHandle := OldFileHandle is Win32Handle ? NumGet(OldFileHandle, "ptr") : OldFileHandle
        NewFileHandle := NewFileHandle is Win32Handle ? NumGet(NewFileHandle, "ptr") : NewFileHandle
        PatchFileHandle := PatchFileHandle is Win32Handle ? NumGet(PatchFileHandle, "ptr") : PatchFileHandle

        result := DllCall("mspatchc.dll\CreatePatchFileByHandles", "ptr", OldFileHandle, "ptr", NewFileHandle, "ptr", PatchFileHandle, "uint", OptionFlags, "ptr", OptionData, "int")
        return result
    }

    /**
     * 
     * @param {Integer} OldFileCount 
     * @param {Pointer<PATCH_OLD_FILE_INFO_A>} OldFileInfoArray 
     * @param {PSTR} NewFileName 
     * @param {PSTR} PatchFileName 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {BOOL} 
     * @see https://learn.microsoft.com/windows/win32/DevNotes/patchapi-createpatchfileex
     */
    static CreatePatchFileExA(OldFileCount, OldFileInfoArray, NewFileName, PatchFileName, OptionFlags, OptionData, ProgressCallback, CallbackContext) {
        NewFileName := NewFileName is String ? StrPtr(NewFileName) : NewFileName
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName

        CallbackContextMarshal := CallbackContext is VarRef ? "ptr" : "ptr"

        result := DllCall("mspatchc.dll\CreatePatchFileExA", "uint", OldFileCount, "ptr", OldFileInfoArray, "ptr", NewFileName, "ptr", PatchFileName, "uint", OptionFlags, "ptr", OptionData, "ptr", ProgressCallback, CallbackContextMarshal, CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {Integer} OldFileCount 
     * @param {Pointer<PATCH_OLD_FILE_INFO_W>} OldFileInfoArray 
     * @param {PWSTR} NewFileName 
     * @param {PWSTR} PatchFileName 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {BOOL} 
     * @see https://learn.microsoft.com/windows/win32/DevNotes/patchapi-createpatchfileex
     */
    static CreatePatchFileExW(OldFileCount, OldFileInfoArray, NewFileName, PatchFileName, OptionFlags, OptionData, ProgressCallback, CallbackContext) {
        NewFileName := NewFileName is String ? StrPtr(NewFileName) : NewFileName
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName

        CallbackContextMarshal := CallbackContext is VarRef ? "ptr" : "ptr"

        result := DllCall("mspatchc.dll\CreatePatchFileExW", "uint", OldFileCount, "ptr", OldFileInfoArray, "ptr", NewFileName, "ptr", PatchFileName, "uint", OptionFlags, "ptr", OptionData, "ptr", ProgressCallback, CallbackContextMarshal, CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {Integer} OldFileCount 
     * @param {Pointer<PATCH_OLD_FILE_INFO_H>} OldFileInfoArray 
     * @param {HANDLE} NewFileHandle 
     * @param {HANDLE} PatchFileHandle 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {BOOL} 
     */
    static CreatePatchFileByHandlesEx(OldFileCount, OldFileInfoArray, NewFileHandle, PatchFileHandle, OptionFlags, OptionData, ProgressCallback, CallbackContext) {
        NewFileHandle := NewFileHandle is Win32Handle ? NumGet(NewFileHandle, "ptr") : NewFileHandle
        PatchFileHandle := PatchFileHandle is Win32Handle ? NumGet(PatchFileHandle, "ptr") : PatchFileHandle

        CallbackContextMarshal := CallbackContext is VarRef ? "ptr" : "ptr"

        result := DllCall("mspatchc.dll\CreatePatchFileByHandlesEx", "uint", OldFileCount, "ptr", OldFileInfoArray, "ptr", NewFileHandle, "ptr", PatchFileHandle, "uint", OptionFlags, "ptr", OptionData, "ptr", ProgressCallback, CallbackContextMarshal, CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {PSTR} PatchFileName 
     * @param {PSTR} PatchHeaderFileName 
     * @returns {BOOL} 
     * @see https://learn.microsoft.com/windows/win32/DevNotes/patchapi-extractpatchheadertofile
     */
    static ExtractPatchHeaderToFileA(PatchFileName, PatchHeaderFileName) {
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName
        PatchHeaderFileName := PatchHeaderFileName is String ? StrPtr(PatchHeaderFileName) : PatchHeaderFileName

        result := DllCall("mspatchc.dll\ExtractPatchHeaderToFileA", "ptr", PatchFileName, "ptr", PatchHeaderFileName, "int")
        return result
    }

    /**
     * 
     * @param {PWSTR} PatchFileName 
     * @param {PWSTR} PatchHeaderFileName 
     * @returns {BOOL} 
     * @see https://learn.microsoft.com/windows/win32/DevNotes/patchapi-extractpatchheadertofile
     */
    static ExtractPatchHeaderToFileW(PatchFileName, PatchHeaderFileName) {
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName
        PatchHeaderFileName := PatchHeaderFileName is String ? StrPtr(PatchHeaderFileName) : PatchHeaderFileName

        result := DllCall("mspatchc.dll\ExtractPatchHeaderToFileW", "ptr", PatchFileName, "ptr", PatchHeaderFileName, "int")
        return result
    }

    /**
     * 
     * @param {HANDLE} PatchFileHandle 
     * @param {HANDLE} PatchHeaderFileHandle 
     * @returns {BOOL} 
     */
    static ExtractPatchHeaderToFileByHandles(PatchFileHandle, PatchHeaderFileHandle) {
        PatchFileHandle := PatchFileHandle is Win32Handle ? NumGet(PatchFileHandle, "ptr") : PatchFileHandle
        PatchHeaderFileHandle := PatchHeaderFileHandle is Win32Handle ? NumGet(PatchHeaderFileHandle, "ptr") : PatchHeaderFileHandle

        result := DllCall("mspatchc.dll\ExtractPatchHeaderToFileByHandles", "ptr", PatchFileHandle, "ptr", PatchHeaderFileHandle, "int")
        return result
    }

    /**
     * 
     * @param {PSTR} PatchFileName 
     * @param {PSTR} OldFileName 
     * @param {Integer} ApplyOptionFlags 
     * @returns {BOOL} 
     */
    static TestApplyPatchToFileA(PatchFileName, OldFileName, ApplyOptionFlags) {
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName
        OldFileName := OldFileName is String ? StrPtr(OldFileName) : OldFileName

        result := DllCall("mspatcha.dll\TestApplyPatchToFileA", "ptr", PatchFileName, "ptr", OldFileName, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {PWSTR} PatchFileName 
     * @param {PWSTR} OldFileName 
     * @param {Integer} ApplyOptionFlags 
     * @returns {BOOL} 
     */
    static TestApplyPatchToFileW(PatchFileName, OldFileName, ApplyOptionFlags) {
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName
        OldFileName := OldFileName is String ? StrPtr(OldFileName) : OldFileName

        result := DllCall("mspatcha.dll\TestApplyPatchToFileW", "ptr", PatchFileName, "ptr", OldFileName, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {HANDLE} PatchFileHandle 
     * @param {HANDLE} OldFileHandle 
     * @param {Integer} ApplyOptionFlags 
     * @returns {BOOL} 
     */
    static TestApplyPatchToFileByHandles(PatchFileHandle, OldFileHandle, ApplyOptionFlags) {
        PatchFileHandle := PatchFileHandle is Win32Handle ? NumGet(PatchFileHandle, "ptr") : PatchFileHandle
        OldFileHandle := OldFileHandle is Win32Handle ? NumGet(OldFileHandle, "ptr") : OldFileHandle

        result := DllCall("mspatcha.dll\TestApplyPatchToFileByHandles", "ptr", PatchFileHandle, "ptr", OldFileHandle, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {Pointer} PatchFileBuffer 
     * @param {Integer} PatchFileSize 
     * @param {Pointer} OldFileBuffer 
     * @param {Integer} OldFileSize 
     * @param {Pointer<Integer>} NewFileSize 
     * @param {Integer} ApplyOptionFlags 
     * @returns {BOOL} 
     */
    static TestApplyPatchToFileByBuffers(PatchFileBuffer, PatchFileSize, OldFileBuffer, OldFileSize, NewFileSize, ApplyOptionFlags) {
        NewFileSizeMarshal := NewFileSize is VarRef ? "uint*" : "ptr"

        result := DllCall("mspatcha.dll\TestApplyPatchToFileByBuffers", "ptr", PatchFileBuffer, "uint", PatchFileSize, "ptr", OldFileBuffer, "uint", OldFileSize, NewFileSizeMarshal, NewFileSize, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {PSTR} PatchFileName 
     * @param {PSTR} OldFileName 
     * @param {PSTR} NewFileName 
     * @param {Integer} ApplyOptionFlags 
     * @returns {BOOL} 
     */
    static ApplyPatchToFileA(PatchFileName, OldFileName, NewFileName, ApplyOptionFlags) {
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName
        OldFileName := OldFileName is String ? StrPtr(OldFileName) : OldFileName
        NewFileName := NewFileName is String ? StrPtr(NewFileName) : NewFileName

        result := DllCall("mspatcha.dll\ApplyPatchToFileA", "ptr", PatchFileName, "ptr", OldFileName, "ptr", NewFileName, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {PWSTR} PatchFileName 
     * @param {PWSTR} OldFileName 
     * @param {PWSTR} NewFileName 
     * @param {Integer} ApplyOptionFlags 
     * @returns {BOOL} 
     */
    static ApplyPatchToFileW(PatchFileName, OldFileName, NewFileName, ApplyOptionFlags) {
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName
        OldFileName := OldFileName is String ? StrPtr(OldFileName) : OldFileName
        NewFileName := NewFileName is String ? StrPtr(NewFileName) : NewFileName

        result := DllCall("mspatcha.dll\ApplyPatchToFileW", "ptr", PatchFileName, "ptr", OldFileName, "ptr", NewFileName, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {HANDLE} PatchFileHandle 
     * @param {HANDLE} OldFileHandle 
     * @param {HANDLE} NewFileHandle 
     * @param {Integer} ApplyOptionFlags 
     * @returns {BOOL} 
     */
    static ApplyPatchToFileByHandles(PatchFileHandle, OldFileHandle, NewFileHandle, ApplyOptionFlags) {
        PatchFileHandle := PatchFileHandle is Win32Handle ? NumGet(PatchFileHandle, "ptr") : PatchFileHandle
        OldFileHandle := OldFileHandle is Win32Handle ? NumGet(OldFileHandle, "ptr") : OldFileHandle
        NewFileHandle := NewFileHandle is Win32Handle ? NumGet(NewFileHandle, "ptr") : NewFileHandle

        result := DllCall("mspatcha.dll\ApplyPatchToFileByHandles", "ptr", PatchFileHandle, "ptr", OldFileHandle, "ptr", NewFileHandle, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {PSTR} PatchFileName 
     * @param {PSTR} OldFileName 
     * @param {PSTR} NewFileName 
     * @param {Integer} ApplyOptionFlags 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {BOOL} 
     */
    static ApplyPatchToFileExA(PatchFileName, OldFileName, NewFileName, ApplyOptionFlags, ProgressCallback, CallbackContext) {
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName
        OldFileName := OldFileName is String ? StrPtr(OldFileName) : OldFileName
        NewFileName := NewFileName is String ? StrPtr(NewFileName) : NewFileName

        CallbackContextMarshal := CallbackContext is VarRef ? "ptr" : "ptr"

        result := DllCall("mspatcha.dll\ApplyPatchToFileExA", "ptr", PatchFileName, "ptr", OldFileName, "ptr", NewFileName, "uint", ApplyOptionFlags, "ptr", ProgressCallback, CallbackContextMarshal, CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {PWSTR} PatchFileName 
     * @param {PWSTR} OldFileName 
     * @param {PWSTR} NewFileName 
     * @param {Integer} ApplyOptionFlags 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {BOOL} 
     */
    static ApplyPatchToFileExW(PatchFileName, OldFileName, NewFileName, ApplyOptionFlags, ProgressCallback, CallbackContext) {
        PatchFileName := PatchFileName is String ? StrPtr(PatchFileName) : PatchFileName
        OldFileName := OldFileName is String ? StrPtr(OldFileName) : OldFileName
        NewFileName := NewFileName is String ? StrPtr(NewFileName) : NewFileName

        CallbackContextMarshal := CallbackContext is VarRef ? "ptr" : "ptr"

        result := DllCall("mspatcha.dll\ApplyPatchToFileExW", "ptr", PatchFileName, "ptr", OldFileName, "ptr", NewFileName, "uint", ApplyOptionFlags, "ptr", ProgressCallback, CallbackContextMarshal, CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {HANDLE} PatchFileHandle 
     * @param {HANDLE} OldFileHandle 
     * @param {HANDLE} NewFileHandle 
     * @param {Integer} ApplyOptionFlags 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {BOOL} 
     */
    static ApplyPatchToFileByHandlesEx(PatchFileHandle, OldFileHandle, NewFileHandle, ApplyOptionFlags, ProgressCallback, CallbackContext) {
        PatchFileHandle := PatchFileHandle is Win32Handle ? NumGet(PatchFileHandle, "ptr") : PatchFileHandle
        OldFileHandle := OldFileHandle is Win32Handle ? NumGet(OldFileHandle, "ptr") : OldFileHandle
        NewFileHandle := NewFileHandle is Win32Handle ? NumGet(NewFileHandle, "ptr") : NewFileHandle

        CallbackContextMarshal := CallbackContext is VarRef ? "ptr" : "ptr"

        result := DllCall("mspatcha.dll\ApplyPatchToFileByHandlesEx", "ptr", PatchFileHandle, "ptr", OldFileHandle, "ptr", NewFileHandle, "uint", ApplyOptionFlags, "ptr", ProgressCallback, CallbackContextMarshal, CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {Pointer} PatchFileMapped 
     * @param {Integer} PatchFileSize 
     * @param {Pointer} OldFileMapped 
     * @param {Integer} OldFileSize 
     * @param {Pointer} NewFileBuffer 
     * @param {Integer} NewFileBufferSize 
     * @param {Pointer<Integer>} NewFileActualSize 
     * @param {Pointer<FILETIME>} NewFileTime 
     * @param {Integer} ApplyOptionFlags 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {BOOL} 
     */
    static ApplyPatchToFileByBuffers(PatchFileMapped, PatchFileSize, OldFileMapped, OldFileSize, NewFileBuffer, NewFileBufferSize, NewFileActualSize, NewFileTime, ApplyOptionFlags, ProgressCallback, CallbackContext) {
        NewFileActualSizeMarshal := NewFileActualSize is VarRef ? "uint*" : "ptr"
        CallbackContextMarshal := CallbackContext is VarRef ? "ptr" : "ptr"

        result := DllCall("mspatcha.dll\ApplyPatchToFileByBuffers", "ptr", PatchFileMapped, "uint", PatchFileSize, "ptr", OldFileMapped, "uint", OldFileSize, "ptr", NewFileBuffer, "uint", NewFileBufferSize, NewFileActualSizeMarshal, NewFileActualSize, "ptr", NewFileTime, "uint", ApplyOptionFlags, "ptr", ProgressCallback, CallbackContextMarshal, CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {PSTR} FileName 
     * @param {Integer} OptionFlags 
     * @param {Pointer<Void>} OptionData 
     * @param {Integer} IgnoreRangeCount 
     * @param {Pointer<PATCH_IGNORE_RANGE>} IgnoreRangeArray 
     * @param {Integer} RetainRangeCount 
     * @param {Pointer<PATCH_RETAIN_RANGE>} RetainRangeArray 
     * @param {Integer} SignatureBufferSize 
     * @param {Pointer} SignatureBuffer 
     * @returns {BOOL} 
     */
    static GetFilePatchSignatureA(FileName, OptionFlags, OptionData, IgnoreRangeCount, IgnoreRangeArray, RetainRangeCount, RetainRangeArray, SignatureBufferSize, SignatureBuffer) {
        FileName := FileName is String ? StrPtr(FileName) : FileName

        OptionDataMarshal := OptionData is VarRef ? "ptr" : "ptr"

        result := DllCall("mspatcha.dll\GetFilePatchSignatureA", "ptr", FileName, "uint", OptionFlags, OptionDataMarshal, OptionData, "uint", IgnoreRangeCount, "ptr", IgnoreRangeArray, "uint", RetainRangeCount, "ptr", RetainRangeArray, "uint", SignatureBufferSize, "ptr", SignatureBuffer, "int")
        return result
    }

    /**
     * 
     * @param {PWSTR} FileName 
     * @param {Integer} OptionFlags 
     * @param {Pointer<Void>} OptionData 
     * @param {Integer} IgnoreRangeCount 
     * @param {Pointer<PATCH_IGNORE_RANGE>} IgnoreRangeArray 
     * @param {Integer} RetainRangeCount 
     * @param {Pointer<PATCH_RETAIN_RANGE>} RetainRangeArray 
     * @param {Integer} SignatureBufferSize 
     * @param {Pointer} SignatureBuffer 
     * @returns {BOOL} 
     */
    static GetFilePatchSignatureW(FileName, OptionFlags, OptionData, IgnoreRangeCount, IgnoreRangeArray, RetainRangeCount, RetainRangeArray, SignatureBufferSize, SignatureBuffer) {
        FileName := FileName is String ? StrPtr(FileName) : FileName

        OptionDataMarshal := OptionData is VarRef ? "ptr" : "ptr"

        result := DllCall("mspatcha.dll\GetFilePatchSignatureW", "ptr", FileName, "uint", OptionFlags, OptionDataMarshal, OptionData, "uint", IgnoreRangeCount, "ptr", IgnoreRangeArray, "uint", RetainRangeCount, "ptr", RetainRangeArray, "uint", SignatureBufferSize, "ptr", SignatureBuffer, "int")
        return result
    }

    /**
     * 
     * @param {HANDLE} FileHandle 
     * @param {Integer} OptionFlags 
     * @param {Pointer<Void>} OptionData 
     * @param {Integer} IgnoreRangeCount 
     * @param {Pointer<PATCH_IGNORE_RANGE>} IgnoreRangeArray 
     * @param {Integer} RetainRangeCount 
     * @param {Pointer<PATCH_RETAIN_RANGE>} RetainRangeArray 
     * @param {Integer} SignatureBufferSize 
     * @param {Pointer} SignatureBuffer 
     * @returns {BOOL} 
     */
    static GetFilePatchSignatureByHandle(FileHandle, OptionFlags, OptionData, IgnoreRangeCount, IgnoreRangeArray, RetainRangeCount, RetainRangeArray, SignatureBufferSize, SignatureBuffer) {
        FileHandle := FileHandle is Win32Handle ? NumGet(FileHandle, "ptr") : FileHandle

        OptionDataMarshal := OptionData is VarRef ? "ptr" : "ptr"

        result := DllCall("mspatcha.dll\GetFilePatchSignatureByHandle", "ptr", FileHandle, "uint", OptionFlags, OptionDataMarshal, OptionData, "uint", IgnoreRangeCount, "ptr", IgnoreRangeArray, "uint", RetainRangeCount, "ptr", RetainRangeArray, "uint", SignatureBufferSize, "ptr", SignatureBuffer, "int")
        return result
    }

    /**
     * 
     * @param {Pointer} FileBufferWritable 
     * @param {Integer} FileSize 
     * @param {Integer} OptionFlags 
     * @param {Pointer<Void>} OptionData 
     * @param {Integer} IgnoreRangeCount 
     * @param {Pointer<PATCH_IGNORE_RANGE>} IgnoreRangeArray 
     * @param {Integer} RetainRangeCount 
     * @param {Pointer<PATCH_RETAIN_RANGE>} RetainRangeArray 
     * @param {Integer} SignatureBufferSize 
     * @param {Pointer} SignatureBuffer 
     * @returns {BOOL} 
     */
    static GetFilePatchSignatureByBuffer(FileBufferWritable, FileSize, OptionFlags, OptionData, IgnoreRangeCount, IgnoreRangeArray, RetainRangeCount, RetainRangeArray, SignatureBufferSize, SignatureBuffer) {
        OptionDataMarshal := OptionData is VarRef ? "ptr" : "ptr"

        result := DllCall("mspatcha.dll\GetFilePatchSignatureByBuffer", "ptr", FileBufferWritable, "uint", FileSize, "uint", OptionFlags, OptionDataMarshal, OptionData, "uint", IgnoreRangeCount, "ptr", IgnoreRangeArray, "uint", RetainRangeCount, "ptr", RetainRangeArray, "uint", SignatureBufferSize, "ptr", SignatureBuffer, "int")
        return result
    }

    /**
     * 
     * @param {Pointer} FileBuffer 
     * @param {Integer} FileSize 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @param {Integer} NewFileCoffBase 
     * @param {Integer} NewFileCoffTime 
     * @param {Integer} IgnoreRangeCount 
     * @param {Pointer<PATCH_IGNORE_RANGE>} IgnoreRangeArray 
     * @param {Integer} RetainRangeCount 
     * @param {Pointer<PATCH_RETAIN_RANGE>} RetainRangeArray 
     * @returns {Integer} 
     */
    static NormalizeFileForPatchSignature(FileBuffer, FileSize, OptionFlags, OptionData, NewFileCoffBase, NewFileCoffTime, IgnoreRangeCount, IgnoreRangeArray, RetainRangeCount, RetainRangeArray) {
        result := DllCall("mspatcha.dll\NormalizeFileForPatchSignature", "ptr", FileBuffer, "uint", FileSize, "uint", OptionFlags, "ptr", OptionData, "uint", NewFileCoffBase, "uint", NewFileCoffTime, "uint", IgnoreRangeCount, "ptr", IgnoreRangeArray, "uint", RetainRangeCount, "ptr", RetainRangeArray, "int")
        return result
    }

    /**
     * 
     * @param {DELTA_INPUT} Delta 
     * @param {Pointer<DELTA_HEADER_INFO>} lpHeaderInfo 
     * @returns {BOOL} 
     */
    static GetDeltaInfoB(Delta, lpHeaderInfo) {
        result := DllCall("msdelta.dll\GetDeltaInfoB", "ptr", Delta, "ptr", lpHeaderInfo, "int")
        return result
    }

    /**
     * 
     * @param {PSTR} lpDeltaName 
     * @param {Pointer<DELTA_HEADER_INFO>} lpHeaderInfo 
     * @returns {BOOL} 
     */
    static GetDeltaInfoA(lpDeltaName, lpHeaderInfo) {
        lpDeltaName := lpDeltaName is String ? StrPtr(lpDeltaName) : lpDeltaName

        result := DllCall("msdelta.dll\GetDeltaInfoA", "ptr", lpDeltaName, "ptr", lpHeaderInfo, "int")
        return result
    }

    /**
     * 
     * @param {PWSTR} lpDeltaName 
     * @param {Pointer<DELTA_HEADER_INFO>} lpHeaderInfo 
     * @returns {BOOL} 
     */
    static GetDeltaInfoW(lpDeltaName, lpHeaderInfo) {
        lpDeltaName := lpDeltaName is String ? StrPtr(lpDeltaName) : lpDeltaName

        result := DllCall("msdelta.dll\GetDeltaInfoW", "ptr", lpDeltaName, "ptr", lpHeaderInfo, "int")
        return result
    }

    /**
     * 
     * @param {Integer} ApplyFlags 
     * @param {DELTA_INPUT} Source 
     * @param {DELTA_INPUT} Delta 
     * @param {Pointer<FILETIME>} lpReverseFileTime 
     * @param {Pointer<DELTA_OUTPUT>} lpTarget 
     * @param {Pointer<DELTA_OUTPUT>} lpTargetReverse 
     * @returns {BOOL} 
     */
    static ApplyDeltaGetReverseB(ApplyFlags, Source, Delta, lpReverseFileTime, lpTarget, lpTargetReverse) {
        result := DllCall("msdelta.dll\ApplyDeltaGetReverseB", "int64", ApplyFlags, "ptr", Source, "ptr", Delta, "ptr", lpReverseFileTime, "ptr", lpTarget, "ptr", lpTargetReverse, "int")
        return result
    }

    /**
     * 
     * @param {Integer} ApplyFlags 
     * @param {DELTA_INPUT} Source 
     * @param {DELTA_INPUT} Delta 
     * @param {Pointer<DELTA_OUTPUT>} lpTarget 
     * @returns {BOOL} 
     * @see https://learn.microsoft.com/windows/win32/DevNotes/msdelta-applydeltab
     */
    static ApplyDeltaB(ApplyFlags, Source, Delta, lpTarget) {
        result := DllCall("msdelta.dll\ApplyDeltaB", "int64", ApplyFlags, "ptr", Source, "ptr", Delta, "ptr", lpTarget, "int")
        return result
    }

    /**
     * 
     * @param {Integer} ApplyFlags 
     * @param {DELTA_INPUT} Source 
     * @param {DELTA_INPUT} Delta 
     * @param {Pointer} lpTarget 
     * @param {Pointer} uTargetSize 
     * @returns {BOOL} 
     */
    static ApplyDeltaProvidedB(ApplyFlags, Source, Delta, lpTarget, uTargetSize) {
        result := DllCall("msdelta.dll\ApplyDeltaProvidedB", "int64", ApplyFlags, "ptr", Source, "ptr", Delta, "ptr", lpTarget, "ptr", uTargetSize, "int")
        return result
    }

    /**
     * 
     * @param {Integer} ApplyFlags 
     * @param {PSTR} lpSourceName 
     * @param {PSTR} lpDeltaName 
     * @param {PSTR} lpTargetName 
     * @returns {BOOL} 
     */
    static ApplyDeltaA(ApplyFlags, lpSourceName, lpDeltaName, lpTargetName) {
        lpSourceName := lpSourceName is String ? StrPtr(lpSourceName) : lpSourceName
        lpDeltaName := lpDeltaName is String ? StrPtr(lpDeltaName) : lpDeltaName
        lpTargetName := lpTargetName is String ? StrPtr(lpTargetName) : lpTargetName

        result := DllCall("msdelta.dll\ApplyDeltaA", "int64", ApplyFlags, "ptr", lpSourceName, "ptr", lpDeltaName, "ptr", lpTargetName, "int")
        return result
    }

    /**
     * 
     * @param {Integer} ApplyFlags 
     * @param {PWSTR} lpSourceName 
     * @param {PWSTR} lpDeltaName 
     * @param {PWSTR} lpTargetName 
     * @returns {BOOL} 
     * @see https://learn.microsoft.com/windows/win32/DevNotes/msdelta-applydeltaw
     */
    static ApplyDeltaW(ApplyFlags, lpSourceName, lpDeltaName, lpTargetName) {
        lpSourceName := lpSourceName is String ? StrPtr(lpSourceName) : lpSourceName
        lpDeltaName := lpDeltaName is String ? StrPtr(lpDeltaName) : lpDeltaName
        lpTargetName := lpTargetName is String ? StrPtr(lpTargetName) : lpTargetName

        result := DllCall("msdelta.dll\ApplyDeltaW", "int64", ApplyFlags, "ptr", lpSourceName, "ptr", lpDeltaName, "ptr", lpTargetName, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} SetFlags 
     * @param {Integer} ResetFlags 
     * @param {DELTA_INPUT} Source 
     * @param {DELTA_INPUT} Target 
     * @param {DELTA_INPUT} SourceOptions 
     * @param {DELTA_INPUT} TargetOptions 
     * @param {DELTA_INPUT} GlobalOptions 
     * @param {Pointer<FILETIME>} lpTargetFileTime 
     * @param {Integer} HashAlgId 
     * @param {Pointer<DELTA_OUTPUT>} lpDelta 
     * @returns {BOOL} 
     * @see https://learn.microsoft.com/windows/win32/DevNotes/msdelta-createdeltab
     */
    static CreateDeltaB(FileTypeSet, SetFlags, ResetFlags, Source, Target, SourceOptions, TargetOptions, GlobalOptions, lpTargetFileTime, HashAlgId, lpDelta) {
        result := DllCall("msdelta.dll\CreateDeltaB", "int64", FileTypeSet, "int64", SetFlags, "int64", ResetFlags, "ptr", Source, "ptr", Target, "ptr", SourceOptions, "ptr", TargetOptions, "ptr", GlobalOptions, "ptr", lpTargetFileTime, "uint", HashAlgId, "ptr", lpDelta, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} SetFlags 
     * @param {Integer} ResetFlags 
     * @param {PSTR} lpSourceName 
     * @param {PSTR} lpTargetName 
     * @param {PSTR} lpSourceOptionsName 
     * @param {PSTR} lpTargetOptionsName 
     * @param {DELTA_INPUT} GlobalOptions 
     * @param {Pointer<FILETIME>} lpTargetFileTime 
     * @param {Integer} HashAlgId 
     * @param {PSTR} lpDeltaName 
     * @returns {BOOL} 
     */
    static CreateDeltaA(FileTypeSet, SetFlags, ResetFlags, lpSourceName, lpTargetName, lpSourceOptionsName, lpTargetOptionsName, GlobalOptions, lpTargetFileTime, HashAlgId, lpDeltaName) {
        lpSourceName := lpSourceName is String ? StrPtr(lpSourceName) : lpSourceName
        lpTargetName := lpTargetName is String ? StrPtr(lpTargetName) : lpTargetName
        lpSourceOptionsName := lpSourceOptionsName is String ? StrPtr(lpSourceOptionsName) : lpSourceOptionsName
        lpTargetOptionsName := lpTargetOptionsName is String ? StrPtr(lpTargetOptionsName) : lpTargetOptionsName
        lpDeltaName := lpDeltaName is String ? StrPtr(lpDeltaName) : lpDeltaName

        result := DllCall("msdelta.dll\CreateDeltaA", "int64", FileTypeSet, "int64", SetFlags, "int64", ResetFlags, "ptr", lpSourceName, "ptr", lpTargetName, "ptr", lpSourceOptionsName, "ptr", lpTargetOptionsName, "ptr", GlobalOptions, "ptr", lpTargetFileTime, "uint", HashAlgId, "ptr", lpDeltaName, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} SetFlags 
     * @param {Integer} ResetFlags 
     * @param {PWSTR} lpSourceName 
     * @param {PWSTR} lpTargetName 
     * @param {PWSTR} lpSourceOptionsName 
     * @param {PWSTR} lpTargetOptionsName 
     * @param {DELTA_INPUT} GlobalOptions 
     * @param {Pointer<FILETIME>} lpTargetFileTime 
     * @param {Integer} HashAlgId 
     * @param {PWSTR} lpDeltaName 
     * @returns {BOOL} 
     * @see https://learn.microsoft.com/windows/win32/DevNotes/msdelta-createdeltaw
     */
    static CreateDeltaW(FileTypeSet, SetFlags, ResetFlags, lpSourceName, lpTargetName, lpSourceOptionsName, lpTargetOptionsName, GlobalOptions, lpTargetFileTime, HashAlgId, lpDeltaName) {
        lpSourceName := lpSourceName is String ? StrPtr(lpSourceName) : lpSourceName
        lpTargetName := lpTargetName is String ? StrPtr(lpTargetName) : lpTargetName
        lpSourceOptionsName := lpSourceOptionsName is String ? StrPtr(lpSourceOptionsName) : lpSourceOptionsName
        lpTargetOptionsName := lpTargetOptionsName is String ? StrPtr(lpTargetOptionsName) : lpTargetOptionsName
        lpDeltaName := lpDeltaName is String ? StrPtr(lpDeltaName) : lpDeltaName

        result := DllCall("msdelta.dll\CreateDeltaW", "int64", FileTypeSet, "int64", SetFlags, "int64", ResetFlags, "ptr", lpSourceName, "ptr", lpTargetName, "ptr", lpSourceOptionsName, "ptr", lpTargetOptionsName, "ptr", GlobalOptions, "ptr", lpTargetFileTime, "uint", HashAlgId, "ptr", lpDeltaName, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} HashAlgId 
     * @param {DELTA_INPUT} Source 
     * @param {Pointer<DELTA_HASH>} lpHash 
     * @returns {BOOL} 
     */
    static GetDeltaSignatureB(FileTypeSet, HashAlgId, Source, lpHash) {
        result := DllCall("msdelta.dll\GetDeltaSignatureB", "int64", FileTypeSet, "uint", HashAlgId, "ptr", Source, "ptr", lpHash, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} HashAlgId 
     * @param {PSTR} lpSourceName 
     * @param {Pointer<DELTA_HASH>} lpHash 
     * @returns {BOOL} 
     */
    static GetDeltaSignatureA(FileTypeSet, HashAlgId, lpSourceName, lpHash) {
        lpSourceName := lpSourceName is String ? StrPtr(lpSourceName) : lpSourceName

        result := DllCall("msdelta.dll\GetDeltaSignatureA", "int64", FileTypeSet, "uint", HashAlgId, "ptr", lpSourceName, "ptr", lpHash, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} HashAlgId 
     * @param {PWSTR} lpSourceName 
     * @param {Pointer<DELTA_HASH>} lpHash 
     * @returns {BOOL} 
     */
    static GetDeltaSignatureW(FileTypeSet, HashAlgId, lpSourceName, lpHash) {
        lpSourceName := lpSourceName is String ? StrPtr(lpSourceName) : lpSourceName

        result := DllCall("msdelta.dll\GetDeltaSignatureW", "int64", FileTypeSet, "uint", HashAlgId, "ptr", lpSourceName, "ptr", lpHash, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} NormalizeFlags 
     * @param {DELTA_INPUT} NormalizeOptions 
     * @param {Pointer} lpSource 
     * @param {Pointer} uSourceSize 
     * @returns {BOOL} 
     */
    static DeltaNormalizeProvidedB(FileTypeSet, NormalizeFlags, NormalizeOptions, lpSource, uSourceSize) {
        result := DllCall("msdelta.dll\DeltaNormalizeProvidedB", "int64", FileTypeSet, "int64", NormalizeFlags, "ptr", NormalizeOptions, "ptr", lpSource, "ptr", uSourceSize, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<Void>} lpMemory 
     * @returns {BOOL} 
     * @see https://learn.microsoft.com/windows/win32/DevNotes/msdelta-deltafree
     */
    static DeltaFree(lpMemory) {
        lpMemoryMarshal := lpMemory is VarRef ? "ptr" : "ptr"

        result := DllCall("msdelta.dll\DeltaFree", lpMemoryMarshal, lpMemory, "int")
        return result
    }

    /**
     * The CreateActCtx function creates an activation context.
     * @param {Pointer<ACTCTXA>} pActCtx Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information about the activation context to be created.
     * @returns {HANDLE} If the function succeeds, it returns a handle to the returned activation context. Otherwise, it returns INVALID_HANDLE_VALUE.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-createactctxa
     * @since windows5.1.2600
     */
    static CreateActCtxA(pActCtx) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\CreateActCtxA", "ptr", pActCtx, "ptr")
        if(A_LastError)
            throw OSError()

        return HANDLE({Value: result}, True)
    }

    /**
     * The CreateActCtx function creates an activation context.
     * @param {Pointer<ACTCTXW>} pActCtx Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information about the activation context to be created.
     * @returns {HANDLE} If the function succeeds, it returns a handle to the returned activation context. Otherwise, it returns INVALID_HANDLE_VALUE.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-createactctxw
     * @since windows5.1.2600
     */
    static CreateActCtxW(pActCtx) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\CreateActCtxW", "ptr", pActCtx, "ptr")
        if(A_LastError)
            throw OSError()

        return HANDLE({Value: result}, True)
    }

    /**
     * The AddRefActCtx function increments the reference count of the specified activation context.
     * @remarks
     * 
     * This function is provided so that multiple clients can access a single activation context.
     * 
     * 
     * @param {HANDLE} hActCtx Handle to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information on the activation context for which the reference count is to be incremented.
     * @returns {String} Nothing - always returns an empty string
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-addrefactctx
     * @since windows5.1.2600
     */
    static AddRefActCtx(hActCtx) {
        hActCtx := hActCtx is Win32Handle ? NumGet(hActCtx, "ptr") : hActCtx

        DllCall("KERNEL32.dll\AddRefActCtx", "ptr", hActCtx)
    }

    /**
     * The ReleaseActCtx function decrements the reference count of the specified activation context.
     * @param {HANDLE} hActCtx Handle to the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information on the activation context for which the reference count is to be decremented.
     * @returns {String} Nothing - always returns an empty string
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-releaseactctx
     * @since windows5.1.2600
     */
    static ReleaseActCtx(hActCtx) {
        hActCtx := hActCtx is Win32Handle ? NumGet(hActCtx, "ptr") : hActCtx

        DllCall("KERNEL32.dll\ReleaseActCtx", "ptr", hActCtx)
    }

    /**
     * The ZombifyActCtx function deactivates the specified activation context, but does not deallocate it.
     * @param {HANDLE} hActCtx Handle to the activation context that is to be deactivated.
     * @returns {BOOL} If the function succeeds, it returns <b>TRUE</b>. If a <b>null</b> handle is passed in the <i>hActCtx</i> parameter, NULL_INVALID_PARAMETER will be returned. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-zombifyactctx
     * @since windows5.1.2600
     */
    static ZombifyActCtx(hActCtx) {
        hActCtx := hActCtx is Win32Handle ? NumGet(hActCtx, "ptr") : hActCtx

        A_LastError := 0

        result := DllCall("KERNEL32.dll\ZombifyActCtx", "ptr", hActCtx, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The ActivateActCtx function activates the specified activation context.
     * @param {HANDLE} hActCtx Handle to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information on the activation context that is to be made active.
     * @param {Pointer<Pointer>} lpCookie Pointer to a <b>ULONG_PTR</b> that functions as a cookie, uniquely identifying a specific, activated activation context.
     * @returns {BOOL} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-activateactctx
     * @since windows5.1.2600
     */
    static ActivateActCtx(hActCtx, lpCookie) {
        hActCtx := hActCtx is Win32Handle ? NumGet(hActCtx, "ptr") : hActCtx

        lpCookieMarshal := lpCookie is VarRef ? "ptr*" : "ptr"

        A_LastError := 0

        result := DllCall("KERNEL32.dll\ActivateActCtx", "ptr", hActCtx, lpCookieMarshal, lpCookie, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The DeactivateActCtx function deactivates the activation context corresponding to the specified cookie.
     * @param {Integer} dwFlags Flags that indicate how the deactivation is to occur. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="0"></a><dl>
     * <dt><b>0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this value is set and the cookie specified in the <i>ulCookie</i> parameter is in the top frame of the activation stack, the activation context is popped from the stack and thereby deactivated. 
     * 
     * 
     * 
     * 
     * If this value is set and the cookie specified in the <i>ulCookie</i> parameter is not in the top frame of the activation stack, this function  searches down the stack for the cookie.
     * 
     * If the cookie is found, a STATUS_SXS_EARLY_DEACTIVATION exception is thrown.
     * 
     * If the cookie is not found, a STATUS_SXS_INVALID_DEACTIVATION exception is thrown.
     * 
     * This value should be specified in most cases.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION"></a><a id="deactivate_actctx_flag_force_early_deactivation"></a><dl>
     * <dt><b>DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this value is set and the cookie specified in the <i>ulCookie</i> parameter is in the top frame of the activation stack, the function  returns an ERROR_INVALID_PARAMETER error code. Call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> to obtain this code. 
     * 
     * 
     * 
     * 
     * If this value is set and the cookie is not on the activation stack, a STATUS_SXS_INVALID_DEACTIVATION exception will be thrown.
     * 
     * If this value is set and the cookie is in a lower frame of the activation stack, all of the frames down to and including the frame the cookie is in is popped from the stack.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer} ulCookie The ULONG_PTR that was passed into the call to 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-activateactctx">ActivateActCtx</a>. This value is used as a cookie to identify a specific activated activation context.
     * @returns {BOOL} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-deactivateactctx
     * @since windows5.1.2600
     */
    static DeactivateActCtx(dwFlags, ulCookie) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\DeactivateActCtx", "uint", dwFlags, "ptr", ulCookie, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The GetCurrentActCtx function returns the handle to the active activation context of the calling thread.
     * @param {Pointer<HANDLE>} lphActCtx Pointer to the returned 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information on the active activation context.
     * @returns {BOOL} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getcurrentactctx
     * @since windows5.1.2600
     */
    static GetCurrentActCtx(lphActCtx) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\GetCurrentActCtx", "ptr", lphActCtx, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The FindActCtxSectionString function retrieves information on a specific string in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.
     * @param {Integer} dwFlags Flags that determine how this function is to operate. Only the following flag is currently defined. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX"></a><a id="find_actctx_section_key_return_hactctx"></a><dl>
     * <dt><b>FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function returns the activation context handle where the redirection data was found in the <b>hActCtx</b> member of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure. The caller must use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-releaseactctx">ReleaseActCtx</a> to release this activation context.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} ulSectionId Identifier of the string section of the activation context in which to search for the specific string. 
     * 
     * 
     * 
     * 
     * The following are valid string section identifiers:
     * 
     * <ul>
     * <li>ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION</li>
     * </ul>
     * @param {PSTR} lpStringToFind Pointer to a null-terminated string to be used as the search criteria.
     * @param {Pointer<ACTCTX_SECTION_KEYED_DATA>} ReturnedData Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure to be filled out with the requested string information.
     * @returns {BOOL} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-findactctxsectionstringa
     * @since windows5.1.2600
     */
    static FindActCtxSectionStringA(dwFlags, ulSectionId, lpStringToFind, ReturnedData) {
        static lpExtensionGuid := 0 ;Reserved parameters must always be NULL

        lpStringToFind := lpStringToFind is String ? StrPtr(lpStringToFind) : lpStringToFind

        A_LastError := 0

        result := DllCall("KERNEL32.dll\FindActCtxSectionStringA", "uint", dwFlags, "ptr", lpExtensionGuid, "uint", ulSectionId, "ptr", lpStringToFind, "ptr", ReturnedData, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The FindActCtxSectionString function retrieves information on a specific string in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.
     * @param {Integer} dwFlags Flags that determine how this function is to operate. Only the following flag is currently defined. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX"></a><a id="find_actctx_section_key_return_hactctx"></a><dl>
     * <dt><b>FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function returns the activation context handle where the redirection data was found in the <b>hActCtx</b> member of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure. The caller must use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-releaseactctx">ReleaseActCtx</a> to release this activation context.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} ulSectionId Identifier of the string section of the activation context in which to search for the specific string. 
     * 
     * 
     * 
     * 
     * The following are valid string section identifiers:
     * 
     * <ul>
     * <li>ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION</li>
     * </ul>
     * @param {PWSTR} lpStringToFind Pointer to a null-terminated string to be used as the search criteria.
     * @param {Pointer<ACTCTX_SECTION_KEYED_DATA>} ReturnedData Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure to be filled out with the requested string information.
     * @returns {BOOL} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-findactctxsectionstringw
     * @since windows5.1.2600
     */
    static FindActCtxSectionStringW(dwFlags, ulSectionId, lpStringToFind, ReturnedData) {
        static lpExtensionGuid := 0 ;Reserved parameters must always be NULL

        lpStringToFind := lpStringToFind is String ? StrPtr(lpStringToFind) : lpStringToFind

        A_LastError := 0

        result := DllCall("KERNEL32.dll\FindActCtxSectionStringW", "uint", dwFlags, "ptr", lpExtensionGuid, "uint", ulSectionId, "ptr", lpStringToFind, "ptr", ReturnedData, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The FindActCtxSectionGuid function retrieves information on a specific GUID in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.
     * @param {Integer} dwFlags Flags that determine how this function is to operate. Only the following flag is currently defined. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX"></a><a id="find_actctx_section_key_return_hactctx"></a><dl>
     * <dt><b>FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function returns the activation context handle where the redirection data was found in the <b>hActCtx</b> member of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure. The caller must use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-releaseactctx">ReleaseActCtx</a> to release this activation context.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} ulSectionId Identifier of the section of the activation context in which to search for the specified GUID. 
     * 
     * 
     * 
     * 
     * The following are valid GUID section identifiers:
     * 
     * <ul>
     * <li>ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION</li>
     * </ul>
     * The following is a valid GUID section identifier beginning with Windows Server 2003 and Windows XP with SP1:
     * 
     * <ul>
     * <li>ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES</li>
     * </ul>
     * @param {Pointer<Guid>} lpGuidToFind Pointer to a GUID to be used as the search criteria.
     * @param {Pointer<ACTCTX_SECTION_KEYED_DATA>} ReturnedData Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure to be filled out with the requested GUID information.
     * @returns {BOOL} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-findactctxsectionguid
     * @since windows5.1.2600
     */
    static FindActCtxSectionGuid(dwFlags, ulSectionId, lpGuidToFind, ReturnedData) {
        static lpExtensionGuid := 0 ;Reserved parameters must always be NULL

        A_LastError := 0

        result := DllCall("KERNEL32.dll\FindActCtxSectionGuid", "uint", dwFlags, "ptr", lpExtensionGuid, "uint", ulSectionId, "ptr", lpGuidToFind, "ptr", ReturnedData, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The QueryActCtxW function queries the activation context.
     * @param {Integer} dwFlags This parameter should be set to one of the following flag bits. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX"></a><a id="query_actctx_flag_use_active_actctx"></a><dl>
     * <dt><b>QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>QueryActCtxW</b> queries the activation context active on the thread instead of the context specified by <i>hActCtx</i>. This is usually the last activation context passed to 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-activateactctx">ActivateActCtx</a>. If 
     * <b>ActivateActCtx</b> has not been called, the active activation context can be the activation context used by the executable of the current process. In other cases, the operating system  determines the active activation context. For example, when the callback function to a new thread is called, the active activation context may be the context that was active when you created the thread by calling <a href="https://docs.microsoft.com/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createthread">CreateThread</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE"></a><a id="query_actctx_flag_actctx_is_hmodule"></a><dl>
     * <dt><b>QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>QueryActCtxW</b> interprets <i>hActCtx</i> as an <b>HMODULE</b> data type and queries an activation context that is associated with a DLL or EXE. 
     * 
     * 
     * 
     * 
     * When a DLL or EXE is loaded, the loader checks for a manifest stored in a resource. If the loader finds an RT_MANIFEST resource with a resource identifier set to ISOLATIONAWARE_MANIFEST_ RESOURCE_ID, the loader associates the resulting activation context with the DLL or EXE. This is the activation context that 
     * <b>QueryActCtxW</b> queries when the QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE flag has been set.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS"></a><a id="query_actctx_flag_actctx_is_address"></a><dl>
     * <dt><b>QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>QueryActCtxW</b> interprets <i>hActCtx</i> as an address within a DLL or EXE and queries an activation context that has been associated with the DLL or EXE. This can be any address within the DLL or EXE. For example, the address of any function within a DLL or EXE or the address of any static data, such as a constant string. 
     * 
     * 
     * 
     * 
     * When a DLL or EXE is loaded, the loader checks for a manifest stored in a resource in the same way as QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {HANDLE} hActCtx Handle to the activation context that is being queried.
     * @param {Pointer<Void>} pvSubInstance Index of the assembly, or assembly and file combination, in the activation context. The meaning of the <i>pvSubInstance</i> depends on the option specified by the value of the <i>ulInfoClass</i> parameter. 
     * 
     *  This parameter may be null.
     * 
     * <table>
     * <tr>
     * <th>ulInfoClass Option</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="AssemblyDetailedInformationInActivationContext"></a><a id="assemblydetailedinformationinactivationcontext"></a><a id="ASSEMBLYDETAILEDINFORMATIONINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>AssemblyDetailedInformationInActivationContext</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Pointer to a <b>DWORD</b> that specifies the index of the assembly within the activation context. This is the activation context that 
     * <b>QueryActCtxW</b> queries.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="FileInformationInAssemblyOfAssemblyInActivationContext"></a><a id="fileinformationinassemblyofassemblyinactivationcontext"></a><a id="FILEINFORMATIONINASSEMBLYOFASSEMBLYINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>FileInformationInAssemblyOfAssemblyInActivationContext</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-activation_context_query_index">ACTIVATION_CONTEXT_QUERY_INDEX</a> structure. If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the returned buffer contains information for a file in the assembly. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-assembly_file_detailed_information">ASSEMBLY_FILE_DETAILED_INFORMATION</a> structure.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} ulInfoClass This parameter can have only the values shown in the following table. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Option</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ActivationContextBasicInformation"></a><a id="activationcontextbasicinformation"></a><a id="ACTIVATIONCONTEXTBASICINFORMATION"></a><dl>
     * <dt><b>ActivationContextBasicInformation</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Not available.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ActivationContextDetailedInformation"></a><a id="activationcontextdetailedinformation"></a><a id="ACTIVATIONCONTEXTDETAILEDINFORMATION"></a><dl>
     * <dt><b>ActivationContextDetailedInformation</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the returned buffer contains detailed information about the activation context. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-activation_context_detailed_information">ACTIVATION_CONTEXT_DETAILED_INFORMATION</a> structure.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="AssemblyDetailedInformationInActivationContext"></a><a id="assemblydetailedinformationinactivationcontext"></a><a id="ASSEMBLYDETAILEDINFORMATIONINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>AssemblyDetailedInformationInActivationContext</b></dt>
     * <dt>3</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the buffer contains information about the assembly that has the index specified in <i>pvSubInstance</i>. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-activation_context_assembly_detailed_information">ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION</a> structure.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="FileInformationInAssemblyOfAssemblyInActivationContext"></a><a id="fileinformationinassemblyofassemblyinactivationcontext"></a><a id="FILEINFORMATIONINASSEMBLYOFASSEMBLYINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>FileInformationInAssemblyOfAssemblyInActivationContext</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Information about a file in one of the assemblies in Activation Context. The <i>pvSubInstance</i> parameter must point to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-activation_context_query_index">ACTIVATION_CONTEXT_QUERY_INDEX</a> structure. If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the returned buffer contains information for a file in the assembly. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-assembly_file_detailed_information">ASSEMBLY_FILE_DETAILED_INFORMATION</a> structure.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="RunlevelInformationInActivationContext"></a><a id="runlevelinformationinactivationcontext"></a><a id="RUNLEVELINFORMATIONINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>RunlevelInformationInActivationContext</b></dt>
     * <dt>5</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the buffer contains information about requested run level of the activation context. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-activation_context_run_level_information">ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION</a> structure.
     * 
     * <b>Windows Server 2003 and Windows XP:  </b>This value is not available.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="CompatibilityInformationInActivationContext"></a><a id="compatibilityinformationinactivationcontext"></a><a id="COMPATIBILITYINFORMATIONINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>CompatibilityInformationInActivationContext</b></dt>
     * <dt>6</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the buffer contains information about requested compatibility context. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-activation_context_compatibility_information">ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION</a> structure.
     * 
     * <b>Windows Server 2008 and earlier, and Windows Vista and earlier:  </b>This value is not available. This option is available beginning with Windows Server 2008 R2 and Windows 7.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer} pvBuffer Pointer to a buffer that holds the returned information. This parameter is optional. If <i>pvBuffer</i> is <b>null</b>, then <i>cbBuffer</i> must be zero. If the size of the buffer pointed to by <i>pvBuffer</i> is too small, 
     * <b>QueryActCtxW</b> returns ERROR_INSUFFICIENT_BUFFER and no data is written into the buffer. See the Remarks section for the method you can use to determine the required size of the buffer.
     * @param {Pointer} cbBuffer Size of the buffer in bytes pointed to by <i>pvBuffer</i>. This parameter is optional.
     * @param {Pointer<Pointer>} pcbWrittenOrRequired Number of bytes written or required. The parameter <i>pcbWrittenOrRequired</i> can only be <b>NULL</b> when <i>pvBuffer</i> is <b>NULL</b>. If <i>pcbWrittenOrRequired</i> is non-<b>NULL</b>, it is filled with the number of bytes required to store the returned buffer.
     * @returns {BOOL} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-queryactctxw
     * @since windows5.1.2600
     */
    static QueryActCtxW(dwFlags, hActCtx, pvSubInstance, ulInfoClass, pvBuffer, cbBuffer, pcbWrittenOrRequired) {
        hActCtx := hActCtx is Win32Handle ? NumGet(hActCtx, "ptr") : hActCtx

        pvSubInstanceMarshal := pvSubInstance is VarRef ? "ptr" : "ptr"
        pcbWrittenOrRequiredMarshal := pcbWrittenOrRequired is VarRef ? "ptr*" : "ptr"

        A_LastError := 0

        result := DllCall("KERNEL32.dll\QueryActCtxW", "uint", dwFlags, "ptr", hActCtx, pvSubInstanceMarshal, pvSubInstance, "uint", ulInfoClass, "ptr", pvBuffer, "ptr", cbBuffer, pcbWrittenOrRequiredMarshal, pcbWrittenOrRequired, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The QueryActCtxSettingsW function specifies the activation context, and the namespace and name of the attribute that is to be queried.
     * @param {Integer} dwFlags This value must be 0.
     * @param {HANDLE} hActCtx A handle to the activation context that is being queried.
     * @param {PWSTR} settingsNameSpace A pointer to a string that contains the value <b>"http://schemas.microsoft.com/SMI/2005/WindowsSettings"</b> or <b>NULL</b>. These values are equivalent.
     * 
     * 
     * <b>Windows 8 and Windows Server 2012:  </b>A pointer to a string that contains the value <b>"http://schemas.microsoft.com/SMI/2011/WindowsSettings"</b> is also a valid parameter.  A <b>NULL</b> is still equivalent to the previous value.
     * @param {PWSTR} settingName The name of the attribute to be queried.
     * @param {Pointer} pvBuffer A pointer to the buffer that receives the query result.
     * @param {Pointer} dwBuffer The size of the buffer  in characters that receives the query result.
     * @param {Pointer<Pointer>} pdwWrittenOrRequired A pointer to a value which is the number of characters written to the buffer specified by <i>pvBuffer</i> or that is required to hold the query result.
     * @returns {BOOL} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-queryactctxsettingsw
     * @since windows6.0.6000
     */
    static QueryActCtxSettingsW(dwFlags, hActCtx, settingsNameSpace, settingName, pvBuffer, dwBuffer, pdwWrittenOrRequired) {
        hActCtx := hActCtx is Win32Handle ? NumGet(hActCtx, "ptr") : hActCtx
        settingsNameSpace := settingsNameSpace is String ? StrPtr(settingsNameSpace) : settingsNameSpace
        settingName := settingName is String ? StrPtr(settingName) : settingName

        pdwWrittenOrRequiredMarshal := pdwWrittenOrRequired is VarRef ? "ptr*" : "ptr"

        A_LastError := 0

        result := DllCall("KERNEL32.dll\QueryActCtxSettingsW", "uint", dwFlags, "ptr", hActCtx, "ptr", settingsNameSpace, "ptr", settingName, "ptr", pvBuffer, "ptr", dwBuffer, pdwWrittenOrRequiredMarshal, pdwWrittenOrRequired, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

;@endregion Methods
}
