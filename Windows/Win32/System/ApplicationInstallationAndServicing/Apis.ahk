#Requires AutoHotkey v2.0.0 64-bit

/**
 * @namespace Windows.Win32.System.ApplicationInstallationAndServicing
 * @version v4.0.30319
 */
class ApplicationInstallationAndServicing {

;@region Constants

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_READONLY => 0

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_TRANSACT => 1

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_DIRECT => 2

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_CREATE => 3

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_CREATEDIRECT => 4

    /**
     * @type {Integer (Int32)}
     */
    static MSIDBOPEN_PATCHFILE => 16

    /**
     * @type {Integer (UInt32)}
     */
    static UIALL => 32768

    /**
     * @type {Integer (UInt32)}
     */
    static LOGTOKEN_TYPE_MASK => 3

    /**
     * @type {Integer (UInt32)}
     */
    static LOGTOKEN_UNSPECIFIED => 0

    /**
     * @type {Integer (UInt32)}
     */
    static LOGTOKEN_NO_LOG => 1

    /**
     * @type {Integer (UInt32)}
     */
    static LOGTOKEN_SETUPAPI_APPLOG => 2

    /**
     * @type {Integer (UInt32)}
     */
    static LOGTOKEN_SETUPAPI_DEVLOG => 3

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SETUPAPI_DEVLOG => 1

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SETUPAPI_CMDLINE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SETUPAPI_BITS => 3

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_ERROR => 1

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_WARNING => 2

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SYSTEM_STATE_CHANGE => 3

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SUMMARY => 4

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DETAILS => 5

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_VERBOSE => 6

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_VERY_VERBOSE => 7

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_RESERVED_FLAGS => 65520

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_TIMESTAMP => 65536

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DEPTH_INCR => 131072

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DEPTH_DECR => 262144

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_TAB_1 => 524288

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_FLUSH_FILE => 1048576

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DEVINST => 1

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_INF => 2

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_FILEQ => 4

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_COPYFILES => 8

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SIGVERIF => 32

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_BACKUP => 128

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_UI => 256

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_UTIL => 512

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_INFDB => 1024

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DRVSETUP => 4194304

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_POLICY => 8388608

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_NEWDEV => 16777216

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_UMPNPMGR => 33554432

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DRIVER_STORE => 67108864

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_SETUP => 134217728

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_CMI => 268435456

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_DEVMGR => 536870912

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_INSTALLER => 1073741824

    /**
     * @type {Integer (UInt32)}
     */
    static TXTLOG_VENDOR => 2147483648

    /**
     * @type {String}
     */
    static CLSID_EvalCom2 => "{6e5e1910-8053-4660-b795-6b612e29bc58}"

    /**
     * @type {Integer (UInt32)}
     */
    static _WIN32_MSM => 100

    /**
     * @type {String}
     */
    static LIBID_MsmMergeTypeLib => "{0adda82f-2c26-11d2-ad65-00a0c9af11a6}"

    /**
     * @type {String}
     */
    static CLSID_MsmMerge2 => "{f94985d5-29f9-4743-9805-99bc3f35b678}"

    /**
     * @type {Integer (UInt32)}
     */
    static _WIN32_MSI => 500

    /**
     * @type {Integer (UInt32)}
     */
    static MAX_GUID_CHARS => 38

    /**
     * @type {Integer (UInt32)}
     */
    static MAX_FEATURE_CHARS => 38

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PACKAGENAME => "PackageName"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_TRANSFORMS => "Transforms"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_LANGUAGE => "Language"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PRODUCTNAME => "ProductName"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_ASSIGNMENTTYPE => "AssignmentType"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTANCETYPE => "InstanceType"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_AUTHORIZED_LUA_APP => "AuthorizedLUAApp"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PACKAGECODE => "PackageCode"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_VERSION => "Version"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PRODUCTICON => "ProductIcon"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTALLEDPRODUCTNAME => "InstalledProductName"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_VERSIONSTRING => "VersionString"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_HELPLINK => "HelpLink"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_HELPTELEPHONE => "HelpTelephone"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTALLLOCATION => "InstallLocation"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTALLSOURCE => "InstallSource"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTALLDATE => "InstallDate"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PUBLISHER => "Publisher"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_LOCALPACKAGE => "LocalPackage"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_URLINFOABOUT => "URLInfoAbout"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_URLUPDATEINFO => "URLUpdateInfo"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_VERSIONMINOR => "VersionMinor"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_VERSIONMAJOR => "VersionMajor"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PRODUCTID => "ProductID"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_REGCOMPANY => "RegCompany"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_REGOWNER => "RegOwner"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_INSTALLEDLANGUAGE => "InstalledLanguage"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_UNINSTALLABLE => "Uninstallable"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PRODUCTSTATE => "State"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PATCHSTATE => "State"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_PATCHTYPE => "PatchType"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_LUAENABLED => "LUAEnabled"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_DISPLAYNAME => "DisplayName"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_MOREINFOURL => "MoreInfoURL"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_LASTUSEDSOURCE => "LastUsedSource"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_LASTUSEDTYPE => "LastUsedType"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_MEDIAPACKAGEPATH => "MediaPackagePath"

    /**
     * @type {String}
     */
    static INSTALLPROPERTY_DISKPROMPT => "DiskPrompt"

    /**
     * @type {Integer (UInt32)}
     */
    static MSI_INVALID_HASH_IS_FATAL => 1

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_ROLLBACK_DISABLED => 1653

    /**
     * @type {Integer (UInt32)}
     */
    static MSI_NULL_INTEGER => 2147483648

    /**
     * @type {Integer (Int32)}
     */
    static INSTALLMESSAGE_TYPEMASK => -16777216

    /**
     * @type {Integer (UInt32)}
     */
    static STREAM_FORMAT_COMPLIB_MODULE => 0

    /**
     * @type {Integer (UInt32)}
     */
    static STREAM_FORMAT_COMPLIB_MANIFEST => 1

    /**
     * @type {Integer (UInt32)}
     */
    static STREAM_FORMAT_WIN32_MODULE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static STREAM_FORMAT_WIN32_MANIFEST => 4

    /**
     * @type {Integer (UInt32)}
     */
    static IASSEMBLYCACHEITEM_COMMIT_FLAG_REFRESH => 1

    /**
     * @type {Integer (UInt32)}
     */
    static ASSEMBLYINFO_FLAG_INSTALLED => 1

    /**
     * @type {Integer (UInt32)}
     */
    static ASSEMBLYINFO_FLAG_PAYLOADRESIDENT => 2

    /**
     * @type {Integer (UInt32)}
     */
    static IASSEMBLYCACHEITEM_COMMIT_DISPOSITION_INSTALLED => 1

    /**
     * @type {Integer (UInt32)}
     */
    static IASSEMBLYCACHEITEM_COMMIT_DISPOSITION_REFRESHED => 2

    /**
     * @type {Integer (UInt32)}
     */
    static IASSEMBLYCACHEITEM_COMMIT_DISPOSITION_ALREADY_INSTALLED => 3

    /**
     * @type {String}
     */
    static FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID => "{8cedc215-ac4b-488b-93c0-a50a49cb2fb8}"

    /**
     * @type {String}
     */
    static FUSION_REFCOUNT_FILEPATH_GUID => "{b02f9d65-fb77-4f7a-afa5-b391309f11c9}"

    /**
     * @type {String}
     */
    static FUSION_REFCOUNT_OPAQUE_STRING_GUID => "{2ec93463-b0c3-45e1-8364-327e96aea856}"

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_DISABLE_NORMAL => 0

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_DISABLE_ASK => 1

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_DISABLE_ONCE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_DISABLE_SETUP => 3

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_DISABLE_NOPOPUPS => 4

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_SCAN_NORMAL => 0

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_SCAN_ALWAYS => 1

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_SCAN_ONCE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_SCAN_IMMEDIATE => 3

    /**
     * @type {Integer (UInt32)}
     */
    static SFC_QUOTA_DEFAULT => 50

    /**
     * @type {String}
     */
    static SFC_IDLE_TRIGGER => "WFP_IDLE_TRIGGER"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTNAME => "ProductName"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTCODE => "ProductCode"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTVERSION => "ProductVersion"

    /**
     * @type {String}
     */
    static IPROPNAME_INSTALLLANGUAGE => "ProductLanguage"

    /**
     * @type {String}
     */
    static IPROPNAME_MANUFACTURER => "Manufacturer"

    /**
     * @type {String}
     */
    static IPROPNAME_UPGRADECODE => "UpgradeCode"

    /**
     * @type {String}
     */
    static IPROPNAME_PIDTEMPLATE => "PIDTemplate"

    /**
     * @type {String}
     */
    static IPROPNAME_DISKPROMPT => "DiskPrompt"

    /**
     * @type {String}
     */
    static IPROPNAME_LEFTUNIT => "LeftUnit"

    /**
     * @type {String}
     */
    static IPROPNAME_ADMIN_PROPERTIES => "AdminProperties"

    /**
     * @type {String}
     */
    static IPROPNAME_DEFAULTUIFONT => "DefaultUIFont"

    /**
     * @type {String}
     */
    static IPROPNAME_ALLOWEDPROPERTIES => "SecureCustomProperties"

    /**
     * @type {String}
     */
    static IPROPNAME_ENABLEUSERCONTROL => "EnableUserControl"

    /**
     * @type {String}
     */
    static IPROPNAME_HIDDEN_PROPERTIES => "MsiHiddenProperties"

    /**
     * @type {String}
     */
    static IPROPNAME_USERNAME => "USERNAME"

    /**
     * @type {String}
     */
    static IPROPNAME_COMPANYNAME => "COMPANYNAME"

    /**
     * @type {String}
     */
    static IPROPNAME_PIDKEY => "PIDKEY"

    /**
     * @type {String}
     */
    static IPROPNAME_PATCH => "PATCH"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIPATCHREMOVE => "MSIPATCHREMOVE"

    /**
     * @type {String}
     */
    static IPROPNAME_TARGETDIR => "TARGETDIR"

    /**
     * @type {String}
     */
    static IPROPNAME_ACTION => "ACTION"

    /**
     * @type {String}
     */
    static IPROPNAME_LIMITUI => "LIMITUI"

    /**
     * @type {String}
     */
    static IPROPNAME_LOGACTION => "LOGACTION"

    /**
     * @type {String}
     */
    static IPROPNAME_ALLUSERS => "ALLUSERS"

    /**
     * @type {String}
     */
    static IPROPNAME_INSTALLLEVEL => "INSTALLLEVEL"

    /**
     * @type {String}
     */
    static IPROPNAME_REBOOT => "REBOOT"

    /**
     * @type {String}
     */
    static IPROPNAME_REBOOTPROMPT => "REBOOTPROMPT"

    /**
     * @type {String}
     */
    static IPROPNAME_EXECUTEMODE => "EXECUTEMODE"

    /**
     * @type {String}
     */
    static IPROPVALUE_EXECUTEMODE_NONE => "NONE"

    /**
     * @type {String}
     */
    static IPROPVALUE_EXECUTEMODE_SCRIPT => "SCRIPT"

    /**
     * @type {String}
     */
    static IPROPNAME_EXECUTEACTION => "EXECUTEACTION"

    /**
     * @type {String}
     */
    static IPROPNAME_SOURCELIST => "SOURCELIST"

    /**
     * @type {String}
     */
    static IPROPNAME_ROOTDRIVE => "ROOTDRIVE"

    /**
     * @type {String}
     */
    static IPROPNAME_TRANSFORMS => "TRANSFORMS"

    /**
     * @type {String}
     */
    static IPROPNAME_TRANSFORMSATSOURCE => "TRANSFORMSATSOURCE"

    /**
     * @type {String}
     */
    static IPROPNAME_TRANSFORMSSECURE => "TRANSFORMSSECURE"

    /**
     * @type {String}
     */
    static IPROPNAME_SEQUENCE => "SEQUENCE"

    /**
     * @type {String}
     */
    static IPROPNAME_SHORTFILENAMES => "SHORTFILENAMES"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIMARYFOLDER => "PRIMARYFOLDER"

    /**
     * @type {String}
     */
    static IPROPNAME_AFTERREBOOT => "AFTERREBOOT"

    /**
     * @type {String}
     */
    static IPROPNAME_NOCOMPANYNAME => "NOCOMPANYNAME"

    /**
     * @type {String}
     */
    static IPROPNAME_NOUSERNAME => "NOUSERNAME"

    /**
     * @type {String}
     */
    static IPROPNAME_DISABLEROLLBACK => "DISABLEROLLBACK"

    /**
     * @type {String}
     */
    static IPROPNAME_AVAILABLEFREEREG => "AVAILABLEFREEREG"

    /**
     * @type {String}
     */
    static IPROPNAME_DISABLEADVTSHORTCUTS => "DISABLEADVTSHORTCUTS"

    /**
     * @type {String}
     */
    static IPROPNAME_PATCHNEWPACKAGECODE => "PATCHNEWPACKAGECODE"

    /**
     * @type {String}
     */
    static IPROPNAME_PATCHNEWSUMMARYSUBJECT => "PATCHNEWSUMMARYSUBJECT"

    /**
     * @type {String}
     */
    static IPROPNAME_PATCHNEWSUMMARYCOMMENTS => "PATCHNEWSUMMARYCOMMENTS"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTLANGUAGE => "PRODUCTLANGUAGE"

    /**
     * @type {String}
     */
    static IPROPNAME_CHECKCRCS => "MSICHECKCRCS"

    /**
     * @type {String}
     */
    static IPROPNAME_MSINODISABLEMEDIA => "MSINODISABLEMEDIA"

    /**
     * @type {String}
     */
    static IPROPNAME_CARRYINGNDP => "CARRYINGNDP"

    /**
     * @type {String}
     */
    static IPROPVALUE__CARRYINGNDP_URTREINSTALL => "URTREINSTALL"

    /**
     * @type {String}
     */
    static IPROPVALUE__CARRYINGNDP_URTUPGRADE => "URTUPGRADE"

    /**
     * @type {String}
     */
    static IPROPNAME_ENFORCE_UPGRADE_COMPONENT_RULES => "MSIENFORCEUPGRADECOMPONENTRULES"

    /**
     * @type {String}
     */
    static IPROPNAME_MSINEWINSTANCE => "MSINEWINSTANCE"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIINSTANCEGUID => "MSIINSTANCEGUID"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIPACKAGEDOWNLOADLOCALCOPY => "MSIPACKAGEDOWNLOADLOCALCOPY"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIPATCHDOWNLOADLOCALCOPY => "MSIPATCHDOWNLOADLOCALCOPY"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIDISABLELUAPATCHING => "MSIDISABLELUAPATCHING"

    /**
     * @type {String}
     */
    static IPROPNAME_MSILOGGINGMODE => "MsiLogging"

    /**
     * @type {String}
     */
    static IPROPNAME_MSILOGFILELOCATION => "MsiLogFileLocation"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_RM_CONTROL => "MSIRESTARTMANAGERCONTROL"

    /**
     * @type {String}
     */
    static IPROPVALUE_MSI_RM_CONTROL_DISABLE => "Disable"

    /**
     * @type {String}
     */
    static IPROPVALUE_MSI_RM_CONTROL_DISABLESHUTDOWN => "DisableShutdown"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_RM_SESSION_KEY => "MsiRestartManagerSessionKey"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_REBOOT_PENDING => "MsiSystemRebootPending"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_RM_SHUTDOWN => "MSIRMSHUTDOWN"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_RM_DISABLE_RESTART => "MSIDISABLERMRESTART"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_UAC_DEPLOYMENT_COMPLIANT => "MSIDEPLOYMENTCOMPLIANT"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_USE_REAL_ADMIN_DETECTION => "MSIUSEREALADMINDETECTION"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_UNINSTALL_SUPERSEDED_COMPONENTS => "MSIUNINSTALLSUPERSEDEDCOMPONENTS"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIDISABLEEEUI => "MSIDISABLEEEUI"

    /**
     * @type {String}
     */
    static IPROPNAME_MSI_FASTINSTALL => "MSIFASTINSTALL"

    /**
     * @type {String}
     */
    static IPROPNAME_INSTALLPERUSER => "MSIINSTALLPERUSER"

    /**
     * @type {String}
     */
    static IPROPNAME_INTERNALINSTALLEDPERUSER => "MSIINTERNALINSTALLEDPERUSER"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPAUTHORIZEDCDFPREFIX => "ARPAUTHORIZEDCDFPREFIX"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPCOMMENTS => "ARPCOMMENTS"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPCONTACT => "ARPCONTACT"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPHELPLINK => "ARPHELPLINK"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPHELPTELEPHONE => "ARPHELPTELEPHONE"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPINSTALLLOCATION => "ARPINSTALLLOCATION"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPNOMODIFY => "ARPNOMODIFY"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPNOREMOVE => "ARPNOREMOVE"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPNOREPAIR => "ARPNOREPAIR"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPREADME => "ARPREADME"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSIZE => "ARPSIZE"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSYSTEMCOMPONENT => "ARPSYSTEMCOMPONENT"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPURLINFOABOUT => "ARPURLINFOABOUT"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPURLUPDATEINFO => "ARPURLUPDATEINFO"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPPRODUCTICON => "ARPPRODUCTICON"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSETTINGSIDENTIFIER => "MSIARPSETTINGSIDENTIFIER"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSHIMFLAGS => "SHIMFLAGS"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSHIMVERSIONNT => "SHIMVERSIONNT"

    /**
     * @type {String}
     */
    static IPROPNAME_ARPSHIMSERVICEPACKLEVEL => "SHIMSERVICEPACKLEVEL"

    /**
     * @type {String}
     */
    static IPROPNAME_INSTALLED => "Installed"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTSTATE => "ProductState"

    /**
     * @type {String}
     */
    static IPROPNAME_PRESELECTED => "Preselected"

    /**
     * @type {String}
     */
    static IPROPNAME_RESUME => "RESUME"

    /**
     * @type {String}
     */
    static IPROPNAME_UPDATESTARTED => "UpdateStarted"

    /**
     * @type {String}
     */
    static IPROPNAME_PRODUCTID => "ProductID"

    /**
     * @type {String}
     */
    static IPROPNAME_OUTOFDISKSPACE => "OutOfDiskSpace"

    /**
     * @type {String}
     */
    static IPROPNAME_OUTOFNORBDISKSPACE => "OutOfNoRbDiskSpace"

    /**
     * @type {String}
     */
    static IPROPNAME_COSTINGCOMPLETE => "CostingComplete"

    /**
     * @type {String}
     */
    static IPROPNAME_SOURCEDIR => "SourceDir"

    /**
     * @type {String}
     */
    static IPROPNAME_REPLACEDINUSEFILES => "ReplacedInUseFiles"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIMARYFOLDER_PATH => "PrimaryVolumePath"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIMARYFOLDER_SPACEAVAILABLE => "PrimaryVolumeSpaceAvailable"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIMARYFOLDER_SPACEREQUIRED => "PrimaryVolumeSpaceRequired"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIMARYFOLDER_SPACEREMAINING => "PrimaryVolumeSpaceRemaining"

    /**
     * @type {String}
     */
    static IPROPNAME_ISADMINPACKAGE => "IsAdminPackage"

    /**
     * @type {String}
     */
    static IPROPNAME_ROLLBACKDISABLED => "RollbackDisabled"

    /**
     * @type {String}
     */
    static IPROPNAME_RESTRICTEDUSERCONTROL => "RestrictedUserControl"

    /**
     * @type {String}
     */
    static IPROPNAME_SOURCERESONLY => "MsiUISourceResOnly"

    /**
     * @type {String}
     */
    static IPROPNAME_HIDECANCEL => "MsiUIHideCancel"

    /**
     * @type {String}
     */
    static IPROPNAME_PROGRESSONLY => "MsiUIProgressOnly"

    /**
     * @type {String}
     */
    static IPROPNAME_UACONLY => "MsiUIUACOnly"

    /**
     * @type {String}
     */
    static IPROPNAME_TIME => "Time"

    /**
     * @type {String}
     */
    static IPROPNAME_DATE => "Date"

    /**
     * @type {String}
     */
    static IPROPNAME_DATETIME => "DateTime"

    /**
     * @type {String}
     */
    static IPROPNAME_ARM => "Arm"

    /**
     * @type {String}
     */
    static IPROPNAME_ARM64 => "Arm64"

    /**
     * @type {String}
     */
    static IPROPNAME_INTEL => "Intel"

    /**
     * @type {String}
     */
    static IPROPNAME_TEMPLATE_AMD64 => "AMD64"

    /**
     * @type {String}
     */
    static IPROPNAME_TEMPLATE_X64 => "x64"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIAMD64 => "MsiAMD64"

    /**
     * @type {String}
     */
    static IPROPNAME_MSIX64 => "Msix64"

    /**
     * @type {String}
     */
    static IPROPNAME_INTEL64 => "Intel64"

    /**
     * @type {String}
     */
    static IPROPNAME_IA64 => "IA64"

    /**
     * @type {String}
     */
    static IPROPNAME_TEXTHEIGHT => "TextHeight"

    /**
     * @type {String}
     */
    static IPROPNAME_TEXTINTERNALLEADING => "TextInternalLeading"

    /**
     * @type {String}
     */
    static IPROPNAME_SCREENX => "ScreenX"

    /**
     * @type {String}
     */
    static IPROPNAME_SCREENY => "ScreenY"

    /**
     * @type {String}
     */
    static IPROPNAME_CAPTIONHEIGHT => "CaptionHeight"

    /**
     * @type {String}
     */
    static IPROPNAME_BORDERTOP => "BorderTop"

    /**
     * @type {String}
     */
    static IPROPNAME_BORDERSIDE => "BorderSide"

    /**
     * @type {String}
     */
    static IPROPNAME_COLORBITS => "ColorBits"

    /**
     * @type {String}
     */
    static IPROPNAME_PHYSICALMEMORY => "PhysicalMemory"

    /**
     * @type {String}
     */
    static IPROPNAME_VIRTUALMEMORY => "VirtualMemory"

    /**
     * @type {String}
     */
    static IPROPNAME_TEXTHEIGHT_CORRECTION => "TextHeightCorrection"

    /**
     * @type {String}
     */
    static IPROPNAME_MSITABLETPC => "MsiTabletPC"

    /**
     * @type {String}
     */
    static IPROPNAME_VERSIONNT => "VersionNT"

    /**
     * @type {String}
     */
    static IPROPNAME_VERSION9X => "Version9X"

    /**
     * @type {String}
     */
    static IPROPNAME_VERSIONNT64 => "VersionNT64"

    /**
     * @type {String}
     */
    static IPROPNAME_WINDOWSBUILD => "WindowsBuild"

    /**
     * @type {String}
     */
    static IPROPNAME_SERVICEPACKLEVEL => "ServicePackLevel"

    /**
     * @type {String}
     */
    static IPROPNAME_SERVICEPACKLEVELMINOR => "ServicePackLevelMinor"

    /**
     * @type {String}
     */
    static IPROPNAME_SHAREDWINDOWS => "SharedWindows"

    /**
     * @type {String}
     */
    static IPROPNAME_COMPUTERNAME => "ComputerName"

    /**
     * @type {String}
     */
    static IPROPNAME_SHELLADVTSUPPORT => "ShellAdvtSupport"

    /**
     * @type {String}
     */
    static IPROPNAME_OLEADVTSUPPORT => "OLEAdvtSupport"

    /**
     * @type {String}
     */
    static IPROPNAME_SYSTEMLANGUAGEID => "SystemLanguageID"

    /**
     * @type {String}
     */
    static IPROPNAME_TTCSUPPORT => "TTCSupport"

    /**
     * @type {String}
     */
    static IPROPNAME_TERMSERVER => "TerminalServer"

    /**
     * @type {String}
     */
    static IPROPNAME_REMOTEADMINTS => "RemoteAdminTS"

    /**
     * @type {String}
     */
    static IPROPNAME_REDIRECTEDDLLSUPPORT => "RedirectedDllSupport"

    /**
     * @type {String}
     */
    static IPROPNAME_NTPRODUCTTYPE => "MsiNTProductType"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITEBACKOFFICE => "MsiNTSuiteBackOffice"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITEDATACENTER => "MsiNTSuiteDataCenter"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITEENTERPRISE => "MsiNTSuiteEnterprise"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITESMALLBUSINESS => "MsiNTSuiteSmallBusiness"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITESMALLBUSINESSRESTRICTED => "MsiNTSuiteSmallBusinessRestricted"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITEPERSONAL => "MsiNTSuitePersonal"

    /**
     * @type {String}
     */
    static IPROPNAME_NTSUITEWEBSERVER => "MsiNTSuiteWebServer"

    /**
     * @type {String}
     */
    static IPROPNAME_NETASSEMBLYSUPPORT => "MsiNetAssemblySupport"

    /**
     * @type {String}
     */
    static IPROPNAME_WIN32ASSEMBLYSUPPORT => "MsiWin32AssemblySupport"

    /**
     * @type {String}
     */
    static IPROPNAME_LOGONUSER => "LogonUser"

    /**
     * @type {String}
     */
    static IPROPNAME_USERSID => "UserSID"

    /**
     * @type {String}
     */
    static IPROPNAME_ADMINUSER => "AdminUser"

    /**
     * @type {String}
     */
    static IPROPNAME_USERLANGUAGEID => "UserLanguageID"

    /**
     * @type {String}
     */
    static IPROPNAME_PRIVILEGED => "Privileged"

    /**
     * @type {String}
     */
    static IPROPNAME_RUNNINGELEVATED => "MsiRunningElevated"

    /**
     * @type {String}
     */
    static IPROPNAME_TRUEADMINUSER => "MsiTrueAdminUser"

    /**
     * @type {String}
     */
    static IPROPNAME_WINDOWS_FOLDER => "WindowsFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_SYSTEM_FOLDER => "SystemFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_SYSTEM16_FOLDER => "System16Folder"

    /**
     * @type {String}
     */
    static IPROPNAME_WINDOWS_VOLUME => "WindowsVolume"

    /**
     * @type {String}
     */
    static IPROPNAME_TEMP_FOLDER => "TempFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_PROGRAMFILES_FOLDER => "ProgramFilesFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_COMMONFILES_FOLDER => "CommonFilesFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_SYSTEM64_FOLDER => "System64Folder"

    /**
     * @type {String}
     */
    static IPROPNAME_PROGRAMFILES64_FOLDER => "ProgramFiles64Folder"

    /**
     * @type {String}
     */
    static IPROPNAME_COMMONFILES64_FOLDER => "CommonFiles64Folder"

    /**
     * @type {String}
     */
    static IPROPNAME_STARTMENU_FOLDER => "StartMenuFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_PROGRAMMENU_FOLDER => "ProgramMenuFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_STARTUP_FOLDER => "StartupFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_NETHOOD_FOLDER => "NetHoodFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_PERSONAL_FOLDER => "PersonalFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_SENDTO_FOLDER => "SendToFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_DESKTOP_FOLDER => "DesktopFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_TEMPLATE_FOLDER => "TemplateFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_FONTS_FOLDER => "FontsFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_FAVORITES_FOLDER => "FavoritesFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_RECENT_FOLDER => "RecentFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_APPDATA_FOLDER => "AppDataFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_PRINTHOOD_FOLDER => "PrintHoodFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_ADMINTOOLS_FOLDER => "AdminToolsFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_COMMONAPPDATA_FOLDER => "CommonAppDataFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_LOCALAPPDATA_FOLDER => "LocalAppDataFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_MYPICTURES_FOLDER => "MyPicturesFolder"

    /**
     * @type {String}
     */
    static IPROPNAME_FEATUREADDLOCAL => "ADDLOCAL"

    /**
     * @type {String}
     */
    static IPROPNAME_FEATUREADDSOURCE => "ADDSOURCE"

    /**
     * @type {String}
     */
    static IPROPNAME_FEATUREADDDEFAULT => "ADDDEFAULT"

    /**
     * @type {String}
     */
    static IPROPNAME_FEATUREREMOVE => "REMOVE"

    /**
     * @type {String}
     */
    static IPROPNAME_FEATUREADVERTISE => "ADVERTISE"

    /**
     * @type {String}
     */
    static IPROPVALUE_FEATURE_ALL => "ALL"

    /**
     * @type {String}
     */
    static IPROPNAME_COMPONENTADDLOCAL => "COMPADDLOCAL"

    /**
     * @type {String}
     */
    static IPROPNAME_COMPONENTADDSOURCE => "COMPADDSOURCE"

    /**
     * @type {String}
     */
    static IPROPNAME_COMPONENTADDDEFAULT => "COMPADDDEFAULT"

    /**
     * @type {String}
     */
    static IPROPNAME_FILEADDLOCAL => "FILEADDLOCAL"

    /**
     * @type {String}
     */
    static IPROPNAME_FILEADDSOURCE => "FILEADDSOURCE"

    /**
     * @type {String}
     */
    static IPROPNAME_FILEADDDEFAULT => "FILEADDDEFAULT"

    /**
     * @type {String}
     */
    static IPROPNAME_REINSTALL => "REINSTALL"

    /**
     * @type {String}
     */
    static IPROPNAME_REINSTALLMODE => "REINSTALLMODE"

    /**
     * @type {String}
     */
    static IPROPNAME_PROMPTROLLBACKCOST => "PROMPTROLLBACKCOST"

    /**
     * @type {String}
     */
    static IPROPVALUE_RBCOST_PROMPT => "P"

    /**
     * @type {String}
     */
    static IPROPVALUE_RBCOST_SILENT => "D"

    /**
     * @type {String}
     */
    static IPROPVALUE_RBCOST_FAIL => "F"

    /**
     * @type {String}
     */
    static IPROPNAME_CUSTOMACTIONDATA => "CustomActionData"

    /**
     * @type {String}
     */
    static IACTIONNAME_INSTALL => "INSTALL"

    /**
     * @type {String}
     */
    static IACTIONNAME_ADVERTISE => "ADVERTISE"

    /**
     * @type {String}
     */
    static IACTIONNAME_ADMIN => "ADMIN"

    /**
     * @type {String}
     */
    static IACTIONNAME_SEQUENCE => "SEQUENCE"

    /**
     * @type {String}
     */
    static IACTIONNAME_COLLECTUSERINFO => "CollectUserInfo"

    /**
     * @type {String}
     */
    static IACTIONNAME_FIRSTRUN => "FirstRun"

    /**
     * @type {Integer (UInt32)}
     */
    static PID_TITLE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static PID_SUBJECT => 3

    /**
     * @type {Integer (UInt32)}
     */
    static PID_AUTHOR => 4

    /**
     * @type {Integer (UInt32)}
     */
    static PID_KEYWORDS => 5

    /**
     * @type {Integer (UInt32)}
     */
    static PID_COMMENTS => 6

    /**
     * @type {Integer (UInt32)}
     */
    static PID_TEMPLATE => 7

    /**
     * @type {Integer (UInt32)}
     */
    static PID_LASTAUTHOR => 8

    /**
     * @type {Integer (UInt32)}
     */
    static PID_REVNUMBER => 9

    /**
     * @type {Integer (UInt32)}
     */
    static PID_EDITTIME => 10

    /**
     * @type {Integer (UInt32)}
     */
    static PID_LASTPRINTED => 11

    /**
     * @type {Integer (UInt32)}
     */
    static PID_CREATE_DTM => 12

    /**
     * @type {Integer (UInt32)}
     */
    static PID_LASTSAVE_DTM => 13

    /**
     * @type {Integer (UInt32)}
     */
    static PID_PAGECOUNT => 14

    /**
     * @type {Integer (UInt32)}
     */
    static PID_WORDCOUNT => 15

    /**
     * @type {Integer (UInt32)}
     */
    static PID_CHARCOUNT => 16

    /**
     * @type {Integer (UInt32)}
     */
    static PID_THUMBNAIL => 17

    /**
     * @type {Integer (UInt32)}
     */
    static PID_APPNAME => 18

    /**
     * @type {Integer (UInt32)}
     */
    static PID_MSIVERSION => 14

    /**
     * @type {Integer (UInt32)}
     */
    static PID_MSISOURCE => 15

    /**
     * @type {Integer (UInt32)}
     */
    static PID_MSIRESTRICT => 16

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_USE_BEST => 0

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_USE_LZX_BEST => 3

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_USE_LZX_A => 1

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_USE_LZX_B => 2

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_USE_LZX_LARGE => 4

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_BINDFIX => 65536

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_LOCKFIX => 131072

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_REBASE => 262144

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_FAIL_IF_SAME_FILE => 524288

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_FAIL_IF_BIGGER => 1048576

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_CHECKSUM => 2097152

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_RESTIMEFIX => 4194304

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_NO_TIMESTAMP => 8388608

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_SIGNATURE_MD5 => 16777216

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_INTERLEAVE_FILES => 1073741824

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_RESERVED1 => 2147483648

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_OPTION_VALID_FLAGS => 3237937159

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_SYMBOL_NO_IMAGEHLP => 1

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_SYMBOL_NO_FAILURES => 2

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_SYMBOL_UNDECORATED_TOO => 4

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_SYMBOL_RESERVED1 => 2147483648

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_TRANSFORM_PE_RESOURCE_2 => 256

    /**
     * @type {Integer (UInt32)}
     */
    static PATCH_TRANSFORM_PE_IRELOC_2 => 512

    /**
     * @type {Integer (UInt32)}
     */
    static APPLY_OPTION_FAIL_IF_EXACT => 1

    /**
     * @type {Integer (UInt32)}
     */
    static APPLY_OPTION_FAIL_IF_CLOSE => 2

    /**
     * @type {Integer (UInt32)}
     */
    static APPLY_OPTION_TEST_ONLY => 4

    /**
     * @type {Integer (UInt32)}
     */
    static APPLY_OPTION_VALID_FLAGS => 7

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_ENCODE_FAILURE => 3222155521

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_INVALID_OPTIONS => 3222155522

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_SAME_FILE => 3222155523

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_RETAIN_RANGES_DIFFER => 3222155524

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_BIGGER_THAN_COMPRESSED => 3222155525

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_IMAGEHLP_FAILURE => 3222155526

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_DECODE_FAILURE => 3222159617

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_CORRUPT => 3222159618

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_NEWER_FORMAT => 3222159619

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_WRONG_FILE => 3222159620

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_NOT_NECESSARY => 3222159621

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PATCH_NOT_AVAILABLE => 3222159622

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BASE => 3222163713

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_PCP_DOESNT_EXIST => 3222163713

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_PCP_BAD_FORMAT => 3222163714

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_CREATE_TEMP_FOLDER => 3222163715

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISSING_PATCH_PATH => 3222163716

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_OVERWRITE_PATCH => 3222163717

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_CREATE_PATCH_FILE => 3222163718

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISSING_PATCH_GUID => 3222163719

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_PATCH_GUID => 3222163720

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_GUIDS_TO_REPLACE => 3222163721

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_PRODUCT_CODE_LIST => 3222163722

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_NO_UPGRADED_IMAGES_TO_PATCH => 3222163723

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_API_PATCHING_SYMBOL_FLAGS => 3222163725

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OODS_COPYING_MSI => 3222163726

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_NAME_TOO_LONG => 3222163727

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_UPGRADED_IMAGE_NAME => 3222163728

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUP_UPGRADED_IMAGE_NAME => 3222163729

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATH_TOO_LONG => 3222163730

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATH_EMPTY => 3222163731

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATH_NOT_EXIST => 3222163732

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATH_NOT_MSI => 3222163733

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_COMPRESSED => 3222163734

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_NAME_TOO_LONG => 3222163735

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_IMAGE_NAME => 3222163736

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUP_TARGET_IMAGE_NAME => 3222163737

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_PATH_TOO_LONG => 3222163738

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_PATH_EMPTY => 3222163739

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_PATH_NOT_EXIST => 3222163740

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_PATH_NOT_MSI => 3222163741

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_IMAGE_COMPRESSED => 3222163742

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_BAD_PROD_VALIDATE => 3222163743

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_BAD_PROD_CODE_VAL => 3222163744

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_MISSING_SRC_FILES => 3222163745

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_MISSING_SRC_FILES => 3222163746

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_IMAGE_FAMILY_NAME_TOO_LONG => 3222163747

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_IMAGE_FAMILY_NAME => 3222163748

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUP_IMAGE_FAMILY_NAME => 3222163749

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_IMAGE_FAMILY_SRC_PROP => 3222163750

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEDATA_LONG_FILE_TABLE_KEY => 3222163751

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEDATA_BLANK_FILE_TABLE_KEY => 3222163752

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEDATA_MISSING_FILE_TABLE_KEY => 3222163753

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_LONG_FILE_TABLE_KEY => 3222163754

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BLANK_FILE_TABLE_KEY => 3222163755

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BAD_FAMILY_FIELD => 3222163756

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_LONG_PATH_TO_FILE => 3222163757

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BLANK_PATH_TO_FILE => 3222163758

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_MISSING_FILE => 3222163759

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_FILE_SEQUENCE_START => 3222163770

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_COPY_FILE_TO_TEMP_FOLDER => 3222163771

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_CREATE_ONE_PATCH_FILE => 3222163772

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_IMAGE_FAMILY_DISKID => 3222163773

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_IMAGE_FAMILY_FILESEQSTART => 3222163774

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_UPGRADED_IMAGE_FAMILY => 3222163775

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_IMAGE_UPGRADED => 3222163776

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUP_TARGET_IMAGE_PACKCODE => 3222163777

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEDATA_BAD_UPGRADED_FIELD => 3222163778

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISMATCHED_PRODUCT_CODES => 3222163779

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISMATCHED_PRODUCT_VERSIONS => 3222163780

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANNOT_WRITE_DDF => 3222163781

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANNOT_RUN_MAKECAB => 3222163782

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_WRITE_SUMMARY_PROPERTIES => 3222163787

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_LONG_FILE_TABLE_KEY => 3222163788

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_BLANK_FILE_TABLE_KEY => 3222163789

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_MISSING_FILE_TABLE_KEY => 3222163790

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_BAD_TARGET_FIELD => 3222163791

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATCH_PATH_TOO_LONG => 3222163792

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATCH_PATH_NOT_EXIST => 3222163793

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UPGRADED_IMAGE_PATCH_PATH_NOT_MSI => 3222163794

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUP_UPGRADED_IMAGE_PACKCODE => 3222163795

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEIGNORE_BAD_UPGRADED_FIELD => 3222163796

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEIGNORE_LONG_FILE_TABLE_KEY => 3222163797

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEIGNORE_BLANK_FILE_TABLE_KEY => 3222163798

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UFILEIGNORE_BAD_FILE_TABLE_KEY => 3222163799

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_NAME_TOO_LONG => 3222163800

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_FAMILY_RANGE_NAME => 3222163801

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_LONG_FILE_TABLE_KEY => 3222163802

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_BLANK_FILE_TABLE_KEY => 3222163803

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_LONG_RETAIN_OFFSETS => 3222163804

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_BLANK_RETAIN_OFFSETS => 3222163805

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_BAD_RETAIN_OFFSETS => 3222163806

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_LONG_RETAIN_LENGTHS => 3222163807

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_BLANK_RETAIN_LENGTHS => 3222163808

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_BAD_RETAIN_LENGTHS => 3222163809

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAMILY_RANGE_COUNT_MISMATCH => 3222163810

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_LONG_IGNORE_OFFSETS => 3222163811

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BAD_IGNORE_OFFSETS => 3222163812

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_LONG_IGNORE_LENGTHS => 3222163813

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BAD_IGNORE_LENGTHS => 3222163814

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_IGNORE_COUNT_MISMATCH => 3222163815

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_LONG_RETAIN_OFFSETS => 3222163816

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXTFILE_BAD_RETAIN_OFFSETS => 3222163817

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_LONG_IGNORE_OFFSETS => 3222163819

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_BAD_IGNORE_OFFSETS => 3222163820

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_LONG_IGNORE_LENGTHS => 3222163821

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_BAD_IGNORE_LENGTHS => 3222163822

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_IGNORE_COUNT_MISMATCH => 3222163823

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_LONG_RETAIN_OFFSETS => 3222163824

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TFILEDATA_BAD_RETAIN_OFFSETS => 3222163825

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_GENERATE_TRANSFORM => 3222163827

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_CREATE_SUMMARY_INFO => 3222163828

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_GENERATE_TRANSFORM_POUND => 3222163829

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_CREATE_SUMMARY_INFO_POUND => 3222163830

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_UPGRADED_IMAGE_PRODUCT_CODE => 3222163831

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_UPGRADED_IMAGE_PRODUCT_VERSION => 3222163832

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_UPGRADED_IMAGE_UPGRADE_CODE => 3222163833

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_IMAGE_PRODUCT_CODE => 3222163834

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_IMAGE_PRODUCT_VERSION => 3222163835

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET_IMAGE_UPGRADE_CODE => 3222163836

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MATCHED_PRODUCT_VERSIONS => 3222163837

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OBSOLETION_WITH_SEQUENCE_DATA => 3222163838

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OBSOLETION_WITH_MSI30 => 3222163839

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OBSOLETION_WITH_PATCHSEQUENCE => 3222163840

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANNOT_CREATE_TABLE => 3222163841

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_GENERATE_SEQUENCEINFO_MAJORUPGD => 3222163842

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MAJOR_UPGD_WITHOUT_SEQUENCING => 3222163843

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_PRODUCTVERSION_VALIDATION => 3222163844

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TRANSFORMSET => 3222163845

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TGT_UPD_IMAGES => 3222163846

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_SUPERCEDENCE => 3222163847

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_SEQUENCE => 3222163848

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_TARGET => 3222163849

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_NULL_PATCHFAMILY => 3222163850

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_NULL_SEQUENCE_NUMBER => 3222163851

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_VERSION_STRING => 3222163852

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_BAD_MAJOR_VERSION => 3222163853

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_SEQUENCING_BAD_TARGET => 3222163854

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_PATCHMETADATA_PROP_NOT_SET => 3222163855

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PATCHMETADATA_PROP => 3222163856

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_SUPERCEDENCE => 3222163857

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_DUPLICATE_SEQUENCE_RECORD => 3222163858

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_WRONG_PATCHMETADATA_STRD_PROP => 3222163859

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PARAMETER => 3222163860

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CREATEFILE_LOG_FAILED => 3222163861

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_LOG_LEVEL => 3222163862

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_UI_LEVEL => 3222163863

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_ERROR_WRITING_TO_LOG => 3222163864

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OUT_OF_MEMORY => 3222163865

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UNKNOWN_ERROR => 3222163866

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UNKNOWN_INFO => 3222163867

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_UNKNOWN_WARN => 3222163868

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_OPEN_VIEW => 3222163869

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_EXECUTE_VIEW => 3222163870

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_VIEW_FETCH => 3222163871

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAILED_EXPAND_PATH => 3222163872

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INTERNAL_ERROR => 3222163969

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_PROPERTY => 3222163970

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_TARGETIMAGES => 3222163971

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_LAX_VALIDATION_FLAGS => 3222163972

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_FAILED_CREATE_TRANSFORM => 3222163973

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_DELETE_TEMP_FOLDER => 3222163974

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISSING_DIRECTORY_TABLE => 3222163975

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_SUPERSEDENCE_VALUE => 3222163976

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PATCH_TYPE_SEQUENCING => 3222163977

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_CANT_READ_FILE => 3222163978

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_TARGET_WRONG_PRODUCT_VERSION_COMP => 3222163979

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_UPGRADEDFILESTOIGNORE => 3222163980

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_UPGRADEDIMAGES => 3222163981

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_EXTERNALFILES => 3222163982

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_IMAGEFAMILIES => 3222163983

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_PATCHSEQUENCE => 3222163984

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_TARGETFILES_OPTIONALDATA => 3222163985

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_UPGRADEDFILES_OPTIONALDATA => 3222163986

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_MISSING_PATCHMETADATA => 3222163987

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_IMAGE_PATH_NOT_EXIST => 3222163988

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_RANGE_ELEMENT => 3222163989

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_MAJOR_VERSION => 3222163990

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_PROPERTIES => 3222163991

    /**
     * @type {Integer (UInt32)}
     */
    static ERROR_PCW_INVALID_PCP_FAMILYFILERANGES => 3222163992

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_BASE => 3222229249

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PASSED_MAIN_CONTROL => 3222229249

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_I_VALIDATION => 3222229250

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_I => 3222229251

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PCP_PATH => 3222229252

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_TEMP_DIR => 3222229253

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_SET_OPTIONS => 3222229254

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PROPERTY => 3222229255

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_II => 3222229256

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_III => 3222229257

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_IV => 3222229258

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_ENTERING_PHASE_V => 3222229259

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_GENERATING_METADATA => 3222229265

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_TEMP_DIR_CLEANUP => 3222229266

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PATCHCACHE_FILEINFO_FAILURE => 3222229267

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PATCHCACHE_PCI_READFAILURE => 3222229268

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_PATCHCACHE_PCI_WRITEFAILURE => 3222229269

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_USING_USER_MSI_FOR_PATCH_TABLES => 3222229270

    /**
     * @type {Integer (UInt32)}
     */
    static INFO_SUCCESSFUL_PATCH_CREATION => 3222229271

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_BASE => 3222294785

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_MAJOR_UPGRADE_PATCH => 3222294785

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_SEQUENCE_DATA_GENERATION_DISABLED => 3222294786

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_SEQUENCE_DATA_SUPERSEDENCE_IGNORED => 3222294787

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_IMPROPER_TRANSFORM_VALIDATION => 3222294788

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_PCW_MISMATCHED_PRODUCT_CODES => 3222294789

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_PCW_MISMATCHED_PRODUCT_VERSIONS => 3222294790

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_INVALID_TRANSFORM_VALIDATION => 3222294791

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_BAD_MAJOR_VERSION => 3222294792

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_FILE_VERSION_DOWNREV => 3222294793

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_EQUAL_FILE_VERSION => 3222294794

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_PATCHPROPERTYNOTSET => 3222294795

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_OBSOLETION_WITH_SEQUENCE_DATA => 3222294802

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_OBSOLETION_WITH_MSI30 => 3222294801

    /**
     * @type {Integer (UInt32)}
     */
    static WARN_OBSOLETION_WITH_PATCHSEQUENCE => 3222294803

    /**
     * @type {Integer (UInt32)}
     */
    static DELTA_MAX_HASH_SIZE => 32

    /**
     * @type {Integer (Int32)}
     */
    static cchMaxInteger => 12

    /**
     * @type {Integer (UInt32)}
     */
    static LOGNONE => 0

    /**
     * @type {Integer (UInt32)}
     */
    static LOGINFO => 1

    /**
     * @type {Integer (UInt32)}
     */
    static LOGWARN => 2

    /**
     * @type {Integer (UInt32)}
     */
    static LOGERR => 4

    /**
     * @type {Integer (UInt32)}
     */
    static LOGPERFMESSAGES => 8

    /**
     * @type {Integer (UInt32)}
     */
    static LOGALL => 15

    /**
     * @type {Integer (UInt32)}
     */
    static UINONE => 0

    /**
     * @type {Integer (UInt32)}
     */
    static UILOGBITS => 15

    /**
     * @type {Integer (UInt32)}
     */
    static DEFAULT_MINIMUM_REQUIRED_MSI_VERSION => 100

    /**
     * @type {Integer (UInt32)}
     */
    static DEFAULT_FILE_SEQUENCE_START => 2

    /**
     * @type {Integer (UInt32)}
     */
    static DEFAULT_DISK_ID => 2
;@endregion Constants

;@region Methods
    /**
     * The MsiCloseHandle function closes an open installation handle.
     * @remarks
     * <b>MsiCloseHandle</b> must be called from the same thread that requested the creation of the handle.
     * 
     * The following functions supply handles that should be closed after use by calling 
     * <b>MsiCloseHandle</b>:
     * 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msicreaterecord">MsiCreateRecord</a>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetactivedatabase">MsiGetActiveDatabase</a>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabaseopenviewa">MsiDatabaseOpenView</a>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiviewfetch">MsiViewFetch</a>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiviewgetcolumninfo">MsiViewGetColumnInfo</a>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabasegetprimarykeysa">MsiDatabaseGetPrimaryKeys</a>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetsummaryinformationa">MsiGetSummaryInformation</a>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msienableuipreview">MsiEnableUIPreview</a>
     * Note that when writing custom actions, it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <b>MsiCloseHandle</b>.
     * 
     * For example, if you use code like this:
     * 
     * MSIHANDLE hRec = MsiCreateRecord(3);
     * 
     * Change it to:
     * 
     * PMSIHANDLE hRec = MsiCreateRecord(3);
     * @param {Integer} hAny Specifies any open installation handle.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiclosehandle
     * @since windows8.0
     */
    static MsiCloseHandle(hAny) {
        DllCall("msi.dll\MsiCloseHandle", "uint", hAny)
    }

    /**
     * The MsiCloseAllHandles function closes all open installation handles allocated by the current thread. This is a diagnostic function and should not be used for cleanup.
     * @remarks
     * <b>MsiCloseAllHandles</b> only closes handles allocated by the calling thread, and does not affect handles allocated by other threads, such as the install handle passed to custom actions.
     * 
     * The 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a> function opens a handle to a package and the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a> function opens a handle to a product. These function are for use with functions that access the product database.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msicloseallhandles
     * @since windows8.0
     */
    static MsiCloseAllHandles() {
        DllCall("msi.dll\MsiCloseAllHandles")
    }

    /**
     * The MsiSetInternalUI function enables the installer's internal user interface. Then this user interface is used for all subsequent calls to user-interface-generating installer functions in this process. For more information, see User Interface Levels.
     * @remarks
     * The 
     * <b>MsiSetInternalUI</b> function is useful when the installer must display a user interface. For example, if a feature is installed, but the source is a compact disc that must be inserted, the installer prompts the user for the compact disc. Depending on the nature of the installation, the application might also display progress indicators or query the user for information.
     * 
     * When Msi.dll is loaded, the user interface level is set to DEFAULT and the user interface owner is set to 0 (that is, the initial user interface owner is the desktop).
     * @param {Integer} dwUILevel 
     * @param {Pointer<HWND>} phWnd Pointer to a window. This window becomes the owner of any user interface created. A pointer to the previous owner of the user interface is returned. If this parameter is null, the owner of the user interface does not change.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisetinternalui
     * @since windows8.0
     */
    static MsiSetInternalUI(dwUILevel, phWnd) {
        DllCall("msi.dll\MsiSetInternalUI", "int", dwUILevel, "ptr", phWnd)
    }

    /**
     * The MsiSetExternalUI function enables an external user-interface handler. (ANSI)
     * @remarks
     * To restore the previous UI handler, second call is made to 
     * <b>MsiSetExternalUI</b> using the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> returned by the first call to 
     * <b>MsiSetExternalUI</b> and specifying zero (0) for dwMessageFilter.
     * 
     * The external user interface handler pointed to by the <i>puiHandler</i> parameter does not have full control over the external user interface unless 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a> is called with the <i>dwUILevel</i> parameter set to INSTALLUILEVEL_NONE. If 
     * <b>MsiSetInternalUI</b> is not called, the internal user interface level defaults to INSTALLUILEVEL_BASIC. As a result, any message not handled by the external user interface handler is handled by Windows Installer. The initial "Preparing to install. . ." dialog always appears even if the external user interface handler handles all messages.
     * 
     * <b>MsiSetExternalUI</b> should only be called from a 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/bootstrapping">Bootstrapping</a> application. You cannot call 
     * <b>MsiSetExternalUI</b> from a custom action.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSetExternalUI as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<INSTALLUI_HANDLERA>} puiHandler Specifies a callback function that conforms to the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> specification.
     * @param {Integer} dwMessageFilter Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message will not be sent to the UI, instead the message will be logged if logging has been enabled. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienableloga">MsiEnableLog</a> function. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FILESINUSE"></a><a id="installlogmode_filesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_FILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.  When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FATALEXIT"></a><a id="installlogmode_fatalexit"></a><dl>
     * <dt><b>INSTALLLOGMODE_FATALEXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Premature termination of installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ERROR"></a><a id="installlogmode_error"></a><dl>
     * <dt><b>INSTALLLOGMODE_ERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The error messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_WARNING"></a><a id="installlogmode_warning"></a><dl>
     * <dt><b>INSTALLLOGMODE_WARNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The warning messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_USER"></a><a id="installlogmode_user"></a><dl>
     * <dt><b>INSTALLLOGMODE_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user requests are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INFO"></a><a id="installlogmode_info"></a><dl>
     * <dt><b>INSTALLLOGMODE_INFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The status messages that are not displayed are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RESOLVESOURCE"></a><a id="installlogmode_resolvesource"></a><dl>
     * <dt><b>INSTALLLOGMODE_RESOLVESOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Request to determine a valid source location.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RMFILESINUSE"></a><a id="installlogmode_rmfilesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_RMFILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.  When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_OUTOFDISKSPACE"></a><a id="installlogmode_outofdiskspace"></a><dl>
     * <dt><b>INSTALLLOGMODE_OUTOFDISKSPACE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There was insufficient disk space.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONSTART"></a><a id="installlogmode_actionstart"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONSTART</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The start of new installation actions are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONDATA"></a><a id="installlogmode_actiondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data record with the installation action is logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_COMMONDATA"></a><a id="installlogmode_commondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_COMMONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The parameters for user-interface initialization are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_PROGRESS"></a><a id="installlogmode_progress"></a><dl>
     * <dt><b>INSTALLLOGMODE_PROGRESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/p-gly">Progress bar</a> information. This message includes information on units so far and total number of units. For an explanation of the message format, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiprocessmessage">MsiProcessMessage</a> function. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INITIALIZE"></a><a id="installlogmode_initialize"></a><dl>
     * <dt><b>INSTALLLOGMODE_INITIALIZE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this is not a quiet installation, then the <a href="https://docs.microsoft.com/windows/desktop/Msi/b-gly">basic UI</a> has been initialized. If this is a <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> installation, the <i>full UI</i> is not yet initialized. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_TERMINATE"></a><a id="installlogmode_terminate"></a><dl>
     * <dt><b>INSTALLLOGMODE_TERMINATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If a <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> is being used, the <i>full UI</i> has ended. If this is not a quiet installation, the <a href="https://docs.microsoft.com/windows/desktop/Msi/b-gly">basic UI</a> has not yet ended. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_SHOWDIALOG"></a><a id="installlogmode_showdialog"></a><dl>
     * <dt><b>INSTALLLOGMODE_SHOWDIALOG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Sent prior to display of the <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> dialog. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLSTART"></a><a id="installlogmode_installstart"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLSTART</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product begins. 
     * 
     * The message contains the product's ProductName and ProductCode.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLEND"></a><a id="installlogmode_installend"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLEND</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product ends. 
     * 
     * The message contains the product's ProductName, ProductCode, and return value.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Void>} pvContext Pointer to an application context that is passed to the callback function. This parameter can be used for error checking.
     * @returns {Pointer<INSTALLUI_HANDLERA>} The return value is the previously set external handler, or zero (0) if there was no previously set handler.
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisetexternaluia
     * @since windows8.0
     */
    static MsiSetExternalUIA(puiHandler, dwMessageFilter, pvContext) {
        result := DllCall("msi.dll\MsiSetExternalUIA", "ptr", puiHandler, "uint", dwMessageFilter, "ptr", pvContext, "ptr")
        return result
    }

    /**
     * The MsiSetExternalUI function enables an external user-interface handler. (Unicode)
     * @remarks
     * To restore the previous UI handler, second call is made to 
     * <b>MsiSetExternalUI</b> using the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> returned by the first call to 
     * <b>MsiSetExternalUI</b> and specifying zero (0) for dwMessageFilter.
     * 
     * The external user interface handler pointed to by the <i>puiHandler</i> parameter does not have full control over the external user interface unless 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a> is called with the <i>dwUILevel</i> parameter set to INSTALLUILEVEL_NONE. If 
     * <b>MsiSetInternalUI</b> is not called, the internal user interface level defaults to INSTALLUILEVEL_BASIC. As a result, any message not handled by the external user interface handler is handled by Windows Installer. The initial "Preparing to install. . ." dialog always appears even if the external user interface handler handles all messages.
     * 
     * <b>MsiSetExternalUI</b> should only be called from a 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/bootstrapping">Bootstrapping</a> application. You cannot call 
     * <b>MsiSetExternalUI</b> from a custom action.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSetExternalUI as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<INSTALLUI_HANDLERW>} puiHandler Specifies a callback function that conforms to the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> specification.
     * @param {Integer} dwMessageFilter Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message will not be sent to the UI, instead the message will be logged if logging has been enabled. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienableloga">MsiEnableLog</a> function. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FILESINUSE"></a><a id="installlogmode_filesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_FILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.  When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FATALEXIT"></a><a id="installlogmode_fatalexit"></a><dl>
     * <dt><b>INSTALLLOGMODE_FATALEXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Premature termination of installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ERROR"></a><a id="installlogmode_error"></a><dl>
     * <dt><b>INSTALLLOGMODE_ERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The error messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_WARNING"></a><a id="installlogmode_warning"></a><dl>
     * <dt><b>INSTALLLOGMODE_WARNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The warning messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_USER"></a><a id="installlogmode_user"></a><dl>
     * <dt><b>INSTALLLOGMODE_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user requests are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INFO"></a><a id="installlogmode_info"></a><dl>
     * <dt><b>INSTALLLOGMODE_INFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The status messages that are not displayed are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RESOLVESOURCE"></a><a id="installlogmode_resolvesource"></a><dl>
     * <dt><b>INSTALLLOGMODE_RESOLVESOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Request to determine a valid source location.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RMFILESINUSE"></a><a id="installlogmode_rmfilesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_RMFILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.  When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_OUTOFDISKSPACE"></a><a id="installlogmode_outofdiskspace"></a><dl>
     * <dt><b>INSTALLLOGMODE_OUTOFDISKSPACE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * There was insufficient disk space.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONSTART"></a><a id="installlogmode_actionstart"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONSTART</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The start of new installation actions are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONDATA"></a><a id="installlogmode_actiondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data record with the installation action is logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_COMMONDATA"></a><a id="installlogmode_commondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_COMMONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The parameters for user-interface initialization are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_PROGRESS"></a><a id="installlogmode_progress"></a><dl>
     * <dt><b>INSTALLLOGMODE_PROGRESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/p-gly">Progress bar</a> information. This message includes information on units so far and total number of units. For an explanation of the message format, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiprocessmessage">MsiProcessMessage</a> function. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INITIALIZE"></a><a id="installlogmode_initialize"></a><dl>
     * <dt><b>INSTALLLOGMODE_INITIALIZE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this is not a quiet installation, then the <a href="https://docs.microsoft.com/windows/desktop/Msi/b-gly">basic UI</a> has been initialized. If this is a <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> installation, the <i>full UI</i> is not yet initialized. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_TERMINATE"></a><a id="installlogmode_terminate"></a><dl>
     * <dt><b>INSTALLLOGMODE_TERMINATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If a <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> is being used, the <i>full UI</i> has ended. If this is not a quiet installation, the <a href="https://docs.microsoft.com/windows/desktop/Msi/b-gly">basic UI</a> has not yet ended. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_SHOWDIALOG"></a><a id="installlogmode_showdialog"></a><dl>
     * <dt><b>INSTALLLOGMODE_SHOWDIALOG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Sent prior to display of the <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">full UI</a> dialog. This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLSTART"></a><a id="installlogmode_installstart"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLSTART</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product begins. 
     * 
     * The message contains the product's ProductName and ProductCode.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLEND"></a><a id="installlogmode_installend"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLEND</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product ends. 
     * 
     * The message contains the product's ProductName, ProductCode, and return value.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Void>} pvContext Pointer to an application context that is passed to the callback function. This parameter can be used for error checking.
     * @returns {Pointer<INSTALLUI_HANDLERW>} The return value is the previously set external handler, or zero (0) if there was no previously set handler.
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisetexternaluiw
     * @since windows8.0
     */
    static MsiSetExternalUIW(puiHandler, dwMessageFilter, pvContext) {
        result := DllCall("msi.dll\MsiSetExternalUIW", "ptr", puiHandler, "uint", dwMessageFilter, "ptr", pvContext, "ptr")
        return result
    }

    /**
     * The MsiSetExternalUIRecord function enables an external user-interface (UI) handler.
     * @remarks
     * This function cannot be called from <a href="https://docs.microsoft.com/windows/desktop/Msi/custom-actions">Custom Actions</a>.
     * 
     * The external UI handler enabled by calling <b>MsiSetExternalUIRecord</b> receives messages in the format of a <a href="https://docs.microsoft.com/windows/desktop/Msi/record-object">Record Object</a>. The external UI handler enabled by calling <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluia">MsiSetExternalUI</a> receives messages in the format of a string. An external UI is always called before the Windows Installer internal UI. An enabled record-based external UI is called before any string-based external UI. If the record-based external UI handler returns 0 (zero), the message is sent to any enabled string-based external UI handler. If the external UI handler returns a non-zero value, the internal Windows Installer UI handler is suppressed and the messages are considered handled.
     * 
     * 
     * This function stores the external user interfaces it has set.  To replace the current external UI handler with a previous handler, call the function and specify the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nc-msi-installui_handler_record">INSTALLUI_HANDLER_RECORD</a> as the <i>puiHandler</i> parameter and 0 (zero) as the <i>dwMessageFilter</i> parameter.
     * 
     * The external user interface handler pointed to by the <i>puiHandler</i> parameter does not have full control over the external user interface unless 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a> is called with the <i>dwUILevel</i> parameter set to INSTALLUILEVEL_NONE. If 
     * <b>MsiSetInternalUI</b> is not called, the internal user interface level defaults to INSTALLUILEVEL_BASIC. As a result, any message not handled by the external user interface handler is handled by Windows Installer. The initial "Preparing to install. . ." dialog always appears even if the external user interface handler handles all messages.
     *     <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluia">MsiSetExternalUI</a> should only be called from an 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/bootstrapping">Bootstrapping</a> application. You cannot call 
     * <b>MsiSetExternalUI</b> from a custom action.
     * 
     * To disable this external UI handler, call <b>MsiSetExternalUIRecord</b> with a <b>NULL</b> value for the <i>puiHandler</i> parameter.
     * 
     * <b>Windows Installer 2.0 and Windows Installer 3.0:  </b>Not supported. The <b>MsiSetExternalUIRecord</b> function is available beginning with Windows Installer 3.1.
     * 
     * For more information about using a record-based external handler, see <a href="https://docs.microsoft.com/windows/desktop/Msi/monitoring-an-installation-using-msisetexternaluirecord">Monitoring an Installation Using MsiSetExternalUIRecord</a>.
     * @param {Pointer<PINSTALLUI_HANDLER_RECORD>} puiHandler Specifies a callback function that conforms to the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nc-msi-installui_handler_record">INSTALLUI_HANDLER_RECORD</a> specification.
     * 
     * To disable the current external UI handler, call the function with this parameter set to a <b>NULL</b> value.
     * @param {Integer} dwMessageFilter Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message is not sent to the UI, instead the message is logged if logging is enabled. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienableloga">MsiEnableLog</a>.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FILESINUSE"></a><a id="installlogmode_filesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_FILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.
     * 
     * When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_FATALEXIT"></a><a id="installlogmode_fatalexit"></a><dl>
     * <dt><b>INSTALLLOGMODE_FATALEXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Premature termination of installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ERROR"></a><a id="installlogmode_error"></a><dl>
     * <dt><b>INSTALLLOGMODE_ERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The error messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_WARNING"></a><a id="installlogmode_warning"></a><dl>
     * <dt><b>INSTALLLOGMODE_WARNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The warning messages are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_USER"></a><a id="installlogmode_user"></a><dl>
     * <dt><b>INSTALLLOGMODE_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The user requests are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INFO"></a><a id="installlogmode_info"></a><dl>
     * <dt><b>INSTALLLOGMODE_INFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The status messages that are not displayed are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RESOLVESOURCE"></a><a id="installlogmode_resolvesource"></a><dl>
     * <dt><b>INSTALLLOGMODE_RESOLVESOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Request to determine a valid source location.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_RMFILESINUSE"></a><a id="installlogmode_rmfilesinuse"></a><dl>
     * <dt><b>INSTALLLOGMODE_RMFILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Files in use information.  When this message is received, a <a href="https://docs.microsoft.com/windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_OUTOFDISKSPACE"></a><a id="installlogmode_outofdiskspace"></a><dl>
     * <dt><b>INSTALLLOGMODE_OUTOFDISKSPACE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The is insufficient disk space.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONSTART"></a><a id="installlogmode_actionstart"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONSTART</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The start of new installation actions are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_ACTIONDATA"></a><a id="installlogmode_actiondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_ACTIONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The data record with the installation action is logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_COMMONDATA"></a><a id="installlogmode_commondata"></a><dl>
     * <dt><b>INSTALLLOGMODE_COMMONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The parameters for user-interface initialization are logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_PROGRESS"></a><a id="installlogmode_progress"></a><dl>
     * <dt><b>INSTALLLOGMODE_PROGRESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The <a href="https://docs.microsoft.com/windows/desktop/Msi/p-gly">Progress bar</a> information.
     * 
     * This message includes information about units so far and total number of units. This message is only sent to an external user interface and is not logged. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiprocessmessage">MsiProcessMessage</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INITIALIZE"></a><a id="installlogmode_initialize"></a><dl>
     * <dt><b>INSTALLLOGMODE_INITIALIZE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this is not a quiet installation, then the <a href="https://docs.microsoft.com/windows/desktop/Msi/b-gly">basic UI</a> is initialized.
     * 
     * If this is a full UI installation, the <a href="https://docs.microsoft.com/windows/desktop/Msi/f-gly">Full UI</a> is not yet initialized.
     * 
     * This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_TERMINATE"></a><a id="installlogmode_terminate"></a><dl>
     * <dt><b>INSTALLLOGMODE_TERMINATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If a full UI is being used, the full UI has ended.
     * 
     * If this is not a quiet installation, the basic UI has not ended.
     * 
     * This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_SHOWDIALOG"></a><a id="installlogmode_showdialog"></a><dl>
     * <dt><b>INSTALLLOGMODE_SHOWDIALOG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Sent prior to display of the Full UI dialog.
     * 
     * This message is only sent to an external user interface and is not logged.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLSTART"></a><a id="installlogmode_installstart"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLSTART</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product begins.
     * 
     * The message contains the product's ProductName and ProductCode.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGMODE_INSTALLEND"></a><a id="installlogmode_installend"></a><dl>
     * <dt><b><b>INSTALLLOGMODE_INSTALLEND</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation of product ends.
     * 
     * The message contains the product's ProductName, ProductCode, and return value.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Void>} pvContext A pointer to an application context that is passed to the callback function.
     * 
     * This parameter can be used for error checking.
     * @param {Pointer<PINSTALLUI_HANDLER_RECORD>} ppuiPrevHandler Returns the pointer to the previously set callback function that conforms to the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nc-msi-installui_handler_record">INSTALLUI_HANDLER_RECORD</a> specification, or <b>NULL</b> if no callback is previously set.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisetexternaluirecord
     * @since windows8.0
     */
    static MsiSetExternalUIRecord(puiHandler, dwMessageFilter, pvContext, ppuiPrevHandler) {
        DllCall("msi.dll\MsiSetExternalUIRecord", "ptr", puiHandler, "uint", dwMessageFilter, "ptr", pvContext, "ptr", ppuiPrevHandler)
    }

    /**
     * The MsiEnableLog function sets the log mode for all subsequent installations that are initiated in the calling process. (ANSI)
     * @remarks
     * For a description of the Logging policy, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/system-policy">System Policy</a>.
     * 
     * The path to the log file location must already exist when using this function. The Installer does not create the directory structure for the log file.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnableLog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} dwLogMode 
     * @param {Pointer<PSTR>} szLogFile Specifies the string that holds the full path to the log file. Entering a null disables logging, in which case <i>dwlogmode</i> is ignored. If a path is supplied, then <i>dwlogmode</i> must not be zero.
     * @param {Integer} dwLogAttributes Specifies how frequently the log buffer is to be flushed.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGATTRIBUTES_APPEND"></a><a id="installlogattributes_append"></a><dl>
     * <dt><b>INSTALLLOGATTRIBUTES_APPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this value is set, the installer appends the existing log specified by <i>szLogFile</i>. If not set, any existing log specified by <i>szLogFile</i> is overwritten.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGATTRIBUTES_FLUSHEACHLINE"></a><a id="installlogattributes_flusheachline"></a><dl>
     * <dt><b>INSTALLLOGATTRIBUTES_FLUSHEACHLINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Forces the log buffer to be flushed after each line. If this value is not set, the installer flushes the log buffer after 20 lines by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-flushfilebuffers">FlushFileBuffers</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienableloga
     * @since windows8.0
     */
    static MsiEnableLogA(dwLogMode, szLogFile, dwLogAttributes) {
        DllCall("msi.dll\MsiEnableLogA", "uint", dwLogMode, "ptr", szLogFile, "uint", dwLogAttributes)
    }

    /**
     * The MsiEnableLog function sets the log mode for all subsequent installations that are initiated in the calling process. (Unicode)
     * @remarks
     * For a description of the Logging policy, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/system-policy">System Policy</a>.
     * 
     * The path to the log file location must already exist when using this function. The Installer does not create the directory structure for the log file.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnableLog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} dwLogMode 
     * @param {Pointer<PWSTR>} szLogFile Specifies the string that holds the full path to the log file. Entering a null disables logging, in which case <i>dwlogmode</i> is ignored. If a path is supplied, then <i>dwlogmode</i> must not be zero.
     * @param {Integer} dwLogAttributes Specifies how frequently the log buffer is to be flushed.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGATTRIBUTES_APPEND"></a><a id="installlogattributes_append"></a><dl>
     * <dt><b>INSTALLLOGATTRIBUTES_APPEND</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this value is set, the installer appends the existing log specified by <i>szLogFile</i>. If not set, any existing log specified by <i>szLogFile</i> is overwritten.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLLOGATTRIBUTES_FLUSHEACHLINE"></a><a id="installlogattributes_flusheachline"></a><dl>
     * <dt><b>INSTALLLOGATTRIBUTES_FLUSHEACHLINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Forces the log buffer to be flushed after each line. If this value is not set, the installer flushes the log buffer after 20 lines by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-flushfilebuffers">FlushFileBuffers</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienablelogw
     * @since windows8.0
     */
    static MsiEnableLogW(dwLogMode, szLogFile, dwLogAttributes) {
        DllCall("msi.dll\MsiEnableLogW", "uint", dwLogMode, "ptr", szLogFile, "uint", dwLogAttributes)
    }

    /**
     * The MsiQueryProductState function returns the installed state for a product. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiQueryProductState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code that identifies the product to be queried.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiqueryproductstatea
     * @since windows8.0
     */
    static MsiQueryProductStateA(szProduct) {
        DllCall("msi.dll\MsiQueryProductStateA", "ptr", szProduct)
    }

    /**
     * The MsiQueryProductState function returns the installed state for a product. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiQueryProductState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code that identifies the product to be queried.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiqueryproductstatew
     * @since windows8.0
     */
    static MsiQueryProductStateW(szProduct) {
        DllCall("msi.dll\MsiQueryProductStateW", "ptr", szProduct)
    }

    /**
     * The MsiGetProductInfo function returns product information for published and installed products. (ANSI)
     * @remarks
     * When the 
     * <b>MsiGetProductInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, 
     * <b>MsiGetProductInfo</b> returns ERROR_MORE_DATA and 
     * <i>pcchValueBuf</i> contains the size of the string, in characters, without counting the null character.
     * 
     * <b>MsiGetProductInfo</b>(INSTALLPROPERTY_LOCALPACKAGE) does not necessarily return a path to the cached package. The cached package is for internal use only. Maintenance mode installations should be invoked through the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigureproducta">MsiConfigureProduct</a>, or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigureproductexa">MsiConfigureProductEx</a> functions.
     * 
     * If you attempt to use <b>MsiGetProductInfo</b> to query an advertised product  for a property that is only available to installed products, the function returns   ERROR_UNKNOWN_PROPERTY. For example, if the application is advertised and not installed, a query for the INSTALLPROPERTY_INSTALLLOCATION property returns an error of ERROR_UNKNOWN_PROPERTY.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetProductInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product.
     * @param {Pointer<PSTR>} szAttribute Specifies the property to be retrieved.  
     * 
     * The 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/required-properties">Required Properties</a> are guaranteed to be available, but other properties are available only if that property is set. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/properties">Properties</a>. The properties in the following list can be retrieved only from applications that are installed.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPLINK"></a><a id="installproperty_helplink"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPLINK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Support link. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPTELEPHONE"></a><a id="installproperty_helptelephone"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPTELEPHONE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Support telephone. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDLANGUAGE"></a><a id="installproperty_installedlanguage"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed language.
     * 
     * 
     * <b><a href="https://docs.microsoft.com/windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.
     * 
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDPRODUCTNAME"></a><a id="installproperty_installedproductname"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed product name. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLLOCATION"></a><a id="installproperty_installlocation"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLLOCATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation location. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLSOURCE"></a><a id="installproperty_installsource"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLSOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation source. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/sourcedir">SourceDir</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Local cached package.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PUBLISHER"></a><a id="installproperty_publisher"></a><dl>
     * <dt><b>INSTALLPROPERTY_PUBLISHER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Publisher. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/manufacturer">Manufacturer</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLINFOABOUT"></a><a id="installproperty_urlinfoabout"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLINFOABOUT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL information. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLUPDATEINFO"></a><a id="installproperty_urlupdateinfo"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLUPDATEINFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL update information. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMINOR"></a><a id="installproperty_versionminor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMINOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Minor product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMAJOR"></a><a id="installproperty_versionmajor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMAJOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Major product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONSTRING"></a><a id="installproperty_versionstring"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONSTRING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Product version. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ProductID</td>
     * <td>The product identifier for the product. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productid">ProductID</a> property.</td>
     * </tr>
     * <tr>
     * <td>RegCompany</td>
     * <td>The company registered to use this product.</td>
     * </tr>
     * <tr>
     * <td>RegOwner</td>
     * <td>The owner registered to use this product.</td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>InstanceType</td>
     * <td>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of 1 (one) indicates a product installed using a multiple instance transform and the MSINEWINSTANCE property.   Available with the installer running Windows Server 2003 or Windows XP with SP1.  For more information see, <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</td>
     * </tr>
     * </table>
     *  
     * 
     * The advertised properties in the following list can be retrieved from applications that are advertised or installed.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_TRANSFORMS</td>
     * <td>Transforms.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_LANGUAGE</td>
     * <td>Product language.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PRODUCTNAME</td>
     * <td>Human readable product name. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_ASSIGNMENTTYPE</td>
     * <td>Equals 0 (zero) if the product is advertised or installed per-user. 
     * 
     * 
     * Equals 1 (one) if the product is advertised or installed per-machine for all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PACKAGECODE</td>
     * <td>Identifier of the package this product was installed from. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/package-codes">Package Codes</a>.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_VERSION</td>
     * <td>Product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PRODUCTICON</td>
     * <td>Primary icon for the package. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PACKAGENAME</td>
     * <td>Name of the original installation package.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_AUTHORIZED_LUA_APP</td>
     * <td>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com/windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} lpValueBuf Pointer to a buffer that receives the property value. This parameter can be null.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null. In this case, the function checks that the property is registered correctly with the product.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetproductinfoa
     * @since windows8.0
     */
    static MsiGetProductInfoA(szProduct, szAttribute, lpValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiGetProductInfoA", "ptr", szProduct, "ptr", szAttribute, "ptr", lpValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * The MsiGetProductInfo function returns product information for published and installed products. (Unicode)
     * @remarks
     * When the 
     * <b>MsiGetProductInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, 
     * <b>MsiGetProductInfo</b> returns ERROR_MORE_DATA and 
     * <i>pcchValueBuf</i> contains the size of the string, in characters, without counting the null character.
     * 
     * <b>MsiGetProductInfo</b>(INSTALLPROPERTY_LOCALPACKAGE) does not necessarily return a path to the cached package. The cached package is for internal use only. Maintenance mode installations should be invoked through the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigureproducta">MsiConfigureProduct</a>, or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigureproductexa">MsiConfigureProductEx</a> functions.
     * 
     * If you attempt to use <b>MsiGetProductInfo</b> to query an advertised product  for a property that is only available to installed products, the function returns   ERROR_UNKNOWN_PROPERTY. For example, if the application is advertised and not installed, a query for the INSTALLPROPERTY_INSTALLLOCATION property returns an error of ERROR_UNKNOWN_PROPERTY.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetProductInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product.
     * @param {Pointer<PWSTR>} szAttribute Specifies the property to be retrieved.  
     * 
     * The 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/required-properties">Required Properties</a> are guaranteed to be available, but other properties are available only if that property is set. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/properties">Properties</a>. The properties in the following list can be retrieved only from applications that are installed.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPLINK"></a><a id="installproperty_helplink"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPLINK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Support link. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPTELEPHONE"></a><a id="installproperty_helptelephone"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPTELEPHONE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Support telephone. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDLANGUAGE"></a><a id="installproperty_installedlanguage"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed language.
     * 
     * 
     * <b><a href="https://docs.microsoft.com/windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.
     * 
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDPRODUCTNAME"></a><a id="installproperty_installedproductname"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed product name. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLLOCATION"></a><a id="installproperty_installlocation"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLLOCATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation location. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLSOURCE"></a><a id="installproperty_installsource"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLSOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installation source. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/sourcedir">SourceDir</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Local cached package.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PUBLISHER"></a><a id="installproperty_publisher"></a><dl>
     * <dt><b>INSTALLPROPERTY_PUBLISHER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Publisher. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/manufacturer">Manufacturer</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLINFOABOUT"></a><a id="installproperty_urlinfoabout"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLINFOABOUT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL information. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLUPDATEINFO"></a><a id="installproperty_urlupdateinfo"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLUPDATEINFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL update information. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMINOR"></a><a id="installproperty_versionminor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMINOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Minor product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMAJOR"></a><a id="installproperty_versionmajor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMAJOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Major product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONSTRING"></a><a id="installproperty_versionstring"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONSTRING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Product version. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.
     * 					
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ProductID</td>
     * <td>The product identifier for the product. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productid">ProductID</a> property.</td>
     * </tr>
     * <tr>
     * <td>RegCompany</td>
     * <td>The company registered to use this product.</td>
     * </tr>
     * <tr>
     * <td>RegOwner</td>
     * <td>The owner registered to use this product.</td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>InstanceType</td>
     * <td>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of 1 (one) indicates a product installed using a multiple instance transform and the MSINEWINSTANCE property.   Available with the installer running Windows Server 2003 or Windows XP with SP1.  For more information see, <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</td>
     * </tr>
     * </table>
     *  
     * 
     * The advertised properties in the following list can be retrieved from applications that are advertised or installed.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_TRANSFORMS</td>
     * <td>Transforms.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_LANGUAGE</td>
     * <td>Product language.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PRODUCTNAME</td>
     * <td>Human readable product name. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_ASSIGNMENTTYPE</td>
     * <td>Equals 0 (zero) if the product is advertised or installed per-user. 
     * 
     * 
     * Equals 1 (one) if the product is advertised or installed per-machine for all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PACKAGECODE</td>
     * <td>Identifier of the package this product was installed from. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/package-codes">Package Codes</a>.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_VERSION</td>
     * <td>Product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PRODUCTICON</td>
     * <td>Primary icon for the package. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_PACKAGENAME</td>
     * <td>Name of the original installation package.</td>
     * </tr>
     * <tr>
     * <td>INSTALLPROPERTY_AUTHORIZED_LUA_APP</td>
     * <td>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com/windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} lpValueBuf Pointer to a buffer that receives the property value. This parameter can be null.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null. In this case, the function checks that the property is registered correctly with the product.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetproductinfow
     * @since windows8.0
     */
    static MsiGetProductInfoW(szProduct, szAttribute, lpValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiGetProductInfoW", "ptr", szProduct, "ptr", szAttribute, "ptr", lpValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * Returns product information for advertised and installed products. (ANSI)
     * @remarks
     * When the 
     * <b>MsiGetProductInfoEx</b> function returns, the <i>pcchValue</i> parameter contains the length of the string that is stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, 
     * <b>MsiGetProductInfoEx</b> returns <b>ERROR_MORE_DATA</b>, and 
     * the <i>pcchValue</i> parameter contains the size of the string, in <b>TCHAR</b>, without counting the null character.
     * 
     * The <b>MsiGetProductInfoEx</b> function  (<b>INSTALLPROPERTY_LOCALPACKAGE</b>) returns a path to the cached package. The cached package is for internal use only. Maintenance mode installations must be invoked through the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigureproducta">MsiConfigureProduct</a>, or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigureproductexa">MsiConfigureProductEx</a> functions.
     * 
     * The <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msigetproductinfoa">MsiGetProductInfo</a> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.  For example, if the application is advertised and not installed, a query for <b>INSTALLPROPERTY_INSTALLLOCATION</b> returns an error of <b>ERROR_UNKNOWN_PROPERTY</b>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetProductInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance that is being queried.
     * @param {Pointer<PSTR>} szUserSid The security identifier (SID) of the account under which the instance of the product that is being queried exists. A <b>NULL</b> specifies the current user SID.
     * 
     * <table>
     * <tr>
     * <th>SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is "MSIINSTALLCONTEXT_MACHINE", <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance that is being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per–user–managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per–user–unmanaged instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szProperty Property being queried.
     * 
     * The property to be retrieved. The properties in the following table can only be retrieved from applications that are already installed. All required properties are guaranteed to be available, but other properties are available only if the property is set. For more information, see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/required-properties">Required Properties</a> and <a href="https://docs.microsoft.com/windows/desktop/Msi/properties">Properties</a>.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PRODUCTSTATE"></a><a id="installproperty_productstate"></a><dl>
     * <dt><b>INSTALLPROPERTY_PRODUCTSTATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The state of the product returned in string form as "1" for advertised and "5" for installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPLINK"></a><a id="installproperty_helplink"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPLINK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The support link. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPTELEPHONE"></a><a id="installproperty_helptelephone"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPTELEPHONE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The support telephone. For more information, see   
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDLANGUAGE"></a><a id="installproperty_installedlanguage"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed language.
     * 
     * 
     * <b><a href="https://docs.microsoft.com/windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.
     * 
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDPRODUCTNAME"></a><a id="installproperty_installedproductname"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installed product name. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLLOCATION"></a><a id="installproperty_installlocation"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLLOCATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation location. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLSOURCE"></a><a id="installproperty_installsource"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLSOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation source. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/sourcedir">SourceDir</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The local cached package.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PUBLISHER"></a><a id="installproperty_publisher"></a><dl>
     * <dt><b>INSTALLPROPERTY_PUBLISHER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The publisher. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/manufacturer">Manufacturer</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLINFOABOUT"></a><a id="installproperty_urlinfoabout"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLINFOABOUT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL information. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLUPDATEINFO"></a><a id="installproperty_urlupdateinfo"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLUPDATEINFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The URL update information. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMINOR"></a><a id="installproperty_versionminor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMINOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The minor product version that is derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMAJOR"></a><a id="installproperty_versionmajor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMAJOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The major product version that is derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONSTRING"></a><a id="installproperty_versionstring"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONSTRING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product version. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ProductID</td>
     * <td>The product identifier. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productid">ProductID</a> property.</td>
     * </tr>
     * <tr>
     * <td>RegCompany</td>
     * <td>The company that is registered to use the product.</td>
     * </tr>
     * <tr>
     * <td>RegOwner</td>
     * <td>The owner who is registered to use the product.</td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>InstanceType</td>
     * <td>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of one (1) indicates a product installed using a multiple instance transform and the <a href="https://docs.microsoft.com/windows/desktop/Msi/msinewinstance">MSINEWINSTANCE</a> property.   For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</td>
     * </tr>
     * </table>
     *  
     * 
     * The properties in the following table can be retrieved from applications that are advertised or installed. These properties cannot be retrieved for product instances that are installed under a per-user-unmanaged context for user accounts other than current user account.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_TRANSFORMS</b></td>
     * <td>Transforms.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_LANGUAGE</b></td>
     * <td>Product language.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PRODUCTNAME</b></td>
     * <td>Human readable product name. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_ASSIGNMENTTYPE</b></td>
     * <td>Equals 0 (zero) if the product is advertised or installed per-user. 
     * 
     * 
     * Equals one (1) if the product is advertised or installed per-computer for all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PACKAGECODE</b></td>
     * <td>Identifier of the package that  a product is installed from. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/package-codes">Package Codes</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_VERSION</b></td>
     * <td>Product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PRODUCTICON</b></td>
     * <td>Primary icon for the package. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PACKAGENAME</b></td>
     * <td>Name of the original installation package.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_AUTHORIZED_LUA_APP</b></td>
     * <td>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com/windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szValue A pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.
     * 
     * If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchValue A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetproductinfoexa
     * @since windows8.0
     */
    static MsiGetProductInfoExA(szProductCode, szUserSid, dwContext, szProperty, szValue, pcchValue) {
        DllCall("msi.dll\MsiGetProductInfoExA", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szProperty, "ptr", szValue, "ptr", pcchValue)
    }

    /**
     * Returns product information for advertised and installed products. (Unicode)
     * @remarks
     * When the 
     * <b>MsiGetProductInfoEx</b> function returns, the <i>pcchValue</i> parameter contains the length of the string that is stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, 
     * <b>MsiGetProductInfoEx</b> returns <b>ERROR_MORE_DATA</b>, and 
     * the <i>pcchValue</i> parameter contains the size of the string, in <b>TCHAR</b>, without counting the null character.
     * 
     * The <b>MsiGetProductInfoEx</b> function  (<b>INSTALLPROPERTY_LOCALPACKAGE</b>) returns a path to the cached package. The cached package is for internal use only. Maintenance mode installations must be invoked through the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigureproducta">MsiConfigureProduct</a>, or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigureproductexa">MsiConfigureProductEx</a> functions.
     * 
     * The <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msigetproductinfoa">MsiGetProductInfo</a> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.  For example, if the application is advertised and not installed, a query for <b>INSTALLPROPERTY_INSTALLLOCATION</b> returns an error of <b>ERROR_UNKNOWN_PROPERTY</b>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetProductInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance that is being queried.
     * @param {Pointer<PWSTR>} szUserSid The security identifier (SID) of the account under which the instance of the product that is being queried exists. A <b>NULL</b> specifies the current user SID.
     * 
     * <table>
     * <tr>
     * <th>SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is "MSIINSTALLCONTEXT_MACHINE", <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance that is being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per–user–managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per–user–unmanaged instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the product property for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szProperty Property being queried.
     * 
     * The property to be retrieved. The properties in the following table can only be retrieved from applications that are already installed. All required properties are guaranteed to be available, but other properties are available only if the property is set. For more information, see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/required-properties">Required Properties</a> and <a href="https://docs.microsoft.com/windows/desktop/Msi/properties">Properties</a>.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PRODUCTSTATE"></a><a id="installproperty_productstate"></a><dl>
     * <dt><b>INSTALLPROPERTY_PRODUCTSTATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The state of the product returned in string form as "1" for advertised and "5" for installed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPLINK"></a><a id="installproperty_helplink"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPLINK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The support link. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_HELPTELEPHONE"></a><a id="installproperty_helptelephone"></a><dl>
     * <dt><b>INSTALLPROPERTY_HELPTELEPHONE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The support telephone. For more information, see   
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDLANGUAGE"></a><a id="installproperty_installedlanguage"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Installed language.
     * 
     * 
     * <b><a href="https://docs.microsoft.com/windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.
     * 
     * 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLEDPRODUCTNAME"></a><a id="installproperty_installedproductname"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installed product name. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLLOCATION"></a><a id="installproperty_installlocation"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLLOCATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation location. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLSOURCE"></a><a id="installproperty_installsource"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLSOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The installation source. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/sourcedir">SourceDir</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The local cached package.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PUBLISHER"></a><a id="installproperty_publisher"></a><dl>
     * <dt><b>INSTALLPROPERTY_PUBLISHER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The publisher. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/manufacturer">Manufacturer</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLINFOABOUT"></a><a id="installproperty_urlinfoabout"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLINFOABOUT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * URL information. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_URLUPDATEINFO"></a><a id="installproperty_urlupdateinfo"></a><dl>
     * <dt><b>INSTALLPROPERTY_URLUPDATEINFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The URL update information. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMINOR"></a><a id="installproperty_versionminor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMINOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The minor product version that is derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONMAJOR"></a><a id="installproperty_versionmajor"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONMAJOR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The major product version that is derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_VERSIONSTRING"></a><a id="installproperty_versionstring"></a><dl>
     * <dt><b>INSTALLPROPERTY_VERSIONSTRING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The product version. For more information, see 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>ProductID</td>
     * <td>The product identifier. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productid">ProductID</a> property.</td>
     * </tr>
     * <tr>
     * <td>RegCompany</td>
     * <td>The company that is registered to use the product.</td>
     * </tr>
     * <tr>
     * <td>RegOwner</td>
     * <td>The owner who is registered to use the product.</td>
     * </tr>
     * </table>
     *  
     * 
     * To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>InstanceType</td>
     * <td>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of one (1) indicates a product installed using a multiple instance transform and the <a href="https://docs.microsoft.com/windows/desktop/Msi/msinewinstance">MSINEWINSTANCE</a> property.   For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</td>
     * </tr>
     * </table>
     *  
     * 
     * The properties in the following table can be retrieved from applications that are advertised or installed. These properties cannot be retrieved for product instances that are installed under a per-user-unmanaged context for user accounts other than current user account.
     * 
     * <table>
     * <tr>
     * <th>Property</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_TRANSFORMS</b></td>
     * <td>Transforms.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_LANGUAGE</b></td>
     * <td>Product language.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PRODUCTNAME</b></td>
     * <td>Human readable product name. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productname">ProductName</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_ASSIGNMENTTYPE</b></td>
     * <td>Equals 0 (zero) if the product is advertised or installed per-user. 
     * 
     * 
     * Equals one (1) if the product is advertised or installed per-computer for all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PACKAGECODE</b></td>
     * <td>Identifier of the package that  a product is installed from. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/package-codes">Package Codes</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_VERSION</b></td>
     * <td>Product version derived from 
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PRODUCTICON</b></td>
     * <td>Primary icon for the package. For more information, see  
     * the <a href="https://docs.microsoft.com/windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_PACKAGENAME</b></td>
     * <td>Name of the original installation package.</td>
     * </tr>
     * <tr>
     * <td><b>INSTALLPROPERTY_AUTHORIZED_LUA_APP</b></td>
     * <td>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com/windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szValue A pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.
     * 
     * If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchValue A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetproductinfoexw
     * @since windows8.0
     */
    static MsiGetProductInfoExW(szProductCode, szUserSid, dwContext, szProperty, szValue, pcchValue) {
        DllCall("msi.dll\MsiGetProductInfoExW", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szProperty, "ptr", szValue, "ptr", pcchValue)
    }

    /**
     * Installs or uninstalls a product. (MsiInstallProductA)
     * @remarks
     * The 
     * <b>MsiInstallProduct</b> function displays the user interface with the current settings and log mode.
     * 
     * <ul>
     * <li>You can change user interface settings by using the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluia">MsiSetExternalUI</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluirecord">MsiSetExternalUIRecord</a> functions.</li>
     * <li>You can set the log mode by using the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienableloga">MsiEnableLog</a> function.</li>
     * <li>You can completely remove a product by setting REMOVE=ALL in <i>szCommandLine</i>.</li>
     * </ul>
     * For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/remove">REMOVE</a> Property.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiInstallProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPackagePath A null-terminated string that specifies the path to the location of the Windows Installer package. The string value can contain a URL (e.g. <c>http://packageLocation/package/package.msi</c>), a network path  (e.g. \\packageLocation\package.msi), a file path (e.g. file://packageLocation/package.msi), or a local path (e.g. D:\packageLocation\package.msi).
     * @param {Pointer<PSTR>} szCommandLine A null-terminated string that specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a>.
     * 
     * To perform an administrative installation, include ACTION=ADMIN in <i>szCommandLine</i>. For more information, see the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/action">ACTION</a> property.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiinstallproducta
     * @since windows8.0
     */
    static MsiInstallProductA(szPackagePath, szCommandLine) {
        DllCall("msi.dll\MsiInstallProductA", "ptr", szPackagePath, "ptr", szCommandLine)
    }

    /**
     * Installs or uninstalls a product. (MsiInstallProductW)
     * @remarks
     * The 
     * <b>MsiInstallProduct</b> function displays the user interface with the current settings and log mode.
     * 
     * <ul>
     * <li>You can change user interface settings by using the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluia">MsiSetExternalUI</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluirecord">MsiSetExternalUIRecord</a> functions.</li>
     * <li>You can set the log mode by using the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienableloga">MsiEnableLog</a> function.</li>
     * <li>You can completely remove a product by setting REMOVE=ALL in <i>szCommandLine</i>.</li>
     * </ul>
     * For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/remove">REMOVE</a> Property.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiInstallProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPackagePath A null-terminated string that specifies the path to the location of the Windows Installer package. The string value can contain a URL (e.g. <c>http://packageLocation/package/package.msi</c>), a network path  (e.g. \\packageLocation\package.msi), a file path (e.g. file://packageLocation/package.msi), or a local path (e.g. D:\packageLocation\package.msi).
     * @param {Pointer<PWSTR>} szCommandLine A null-terminated string that specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a>.
     * 
     * To perform an administrative installation, include ACTION=ADMIN in <i>szCommandLine</i>. For more information, see the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/action">ACTION</a> property.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiinstallproductw
     * @since windows8.0
     */
    static MsiInstallProductW(szPackagePath, szCommandLine) {
        DllCall("msi.dll\MsiInstallProductW", "ptr", szPackagePath, "ptr", szCommandLine)
    }

    /**
     * The MsiConfigureProduct function installs or uninstalls a product. (ANSI)
     * @remarks
     * The 
     * <b>MsiConfigureProduct</b> function displays the user interface (UI) using the current settings. User interface settings can be changed by using 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluia">MsiSetExternalUI</a> or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluirecord">MsiSetExternalUIRecord</a>.
     * 
     * The <i>iInstallLevel</i> parameter is ignored, and all features of the product are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to INSTALLSTATE_DEFAULT, use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiConfigureProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product to be configured.
     * @param {Integer} iInstallLevel Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameter is ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT.
     * @param {Integer} eInstallState 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiconfigureproducta
     * @since windows8.0
     */
    static MsiConfigureProductA(szProduct, iInstallLevel, eInstallState) {
        DllCall("msi.dll\MsiConfigureProductA", "ptr", szProduct, "int", iInstallLevel, "int", eInstallState)
    }

    /**
     * The MsiConfigureProduct function installs or uninstalls a product. (Unicode)
     * @remarks
     * The 
     * <b>MsiConfigureProduct</b> function displays the user interface (UI) using the current settings. User interface settings can be changed by using 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluia">MsiSetExternalUI</a> or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluirecord">MsiSetExternalUIRecord</a>.
     * 
     * The <i>iInstallLevel</i> parameter is ignored, and all features of the product are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to INSTALLSTATE_DEFAULT, use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiConfigureProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product to be configured.
     * @param {Integer} iInstallLevel Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameter is ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT.
     * @param {Integer} eInstallState 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiconfigureproductw
     * @since windows8.0
     */
    static MsiConfigureProductW(szProduct, iInstallLevel, eInstallState) {
        DllCall("msi.dll\MsiConfigureProductW", "ptr", szProduct, "int", iInstallLevel, "int", eInstallState)
    }

    /**
     * Installs or uninstalls a product. (MsiConfigureProductExA)
     * @remarks
     * The command line passed in as <i>szCommandLine</i> can contain any of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/property-reference">Feature Installation Options Properties</a>. In this case, the <i>eInstallState</i> passed must be <b>INSTALLSTATE_DEFAULT</b>.
     * 
     * The <i>iInstallLevel</i> parameter is ignored and all features of the product are installed if the <i>eInstallState</i> parameter is set to any other value than <b>INSTALLSTATE_DEFAULT</b>. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to <b>INSTALLSTATE_DEFAULT</b> use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>.
     * 
     * The 
     * <b>MsiConfigureProductEx</b> function displays the user interface using the current settings. User interface settings can be changed with 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluia">MsiSetExternalUI</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluirecord">MsiSetExternalUIRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiConfigureProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product to be configured.
     * @param {Integer} iInstallLevel Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameters are ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any value other than <b>INSTALLSTATE_DEFAULT</b>.
     * @param {Integer} eInstallState 
     * @param {Pointer<PSTR>} szCommandLine Specifies the command-line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiconfigureproductexa
     * @since windows8.0
     */
    static MsiConfigureProductExA(szProduct, iInstallLevel, eInstallState, szCommandLine) {
        DllCall("msi.dll\MsiConfigureProductExA", "ptr", szProduct, "int", iInstallLevel, "int", eInstallState, "ptr", szCommandLine)
    }

    /**
     * Installs or uninstalls a product. (MsiConfigureProductExW)
     * @remarks
     * The command line passed in as <i>szCommandLine</i> can contain any of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/property-reference">Feature Installation Options Properties</a>. In this case, the <i>eInstallState</i> passed must be <b>INSTALLSTATE_DEFAULT</b>.
     * 
     * The <i>iInstallLevel</i> parameter is ignored and all features of the product are installed if the <i>eInstallState</i> parameter is set to any other value than <b>INSTALLSTATE_DEFAULT</b>. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to <b>INSTALLSTATE_DEFAULT</b> use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>.
     * 
     * The 
     * <b>MsiConfigureProductEx</b> function displays the user interface using the current settings. User interface settings can be changed with 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluia">MsiSetExternalUI</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetexternaluirecord">MsiSetExternalUIRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiConfigureProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product to be configured.
     * @param {Integer} iInstallLevel Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameters are ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any value other than <b>INSTALLSTATE_DEFAULT</b>.
     * @param {Integer} eInstallState 
     * @param {Pointer<PWSTR>} szCommandLine Specifies the command-line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiconfigureproductexw
     * @since windows8.0
     */
    static MsiConfigureProductExW(szProduct, iInstallLevel, eInstallState, szCommandLine) {
        DllCall("msi.dll\MsiConfigureProductExW", "ptr", szProduct, "int", iInstallLevel, "int", eInstallState, "ptr", szCommandLine)
    }

    /**
     * Reinstalls products. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiReinstallProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product to be reinstalled.
     * @param {Integer} szReinstallMode 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msireinstallproducta
     * @since windows8.0
     */
    static MsiReinstallProductA(szProduct, szReinstallMode) {
        DllCall("msi.dll\MsiReinstallProductA", "ptr", szProduct, "uint", szReinstallMode)
    }

    /**
     * Reinstalls products. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiReinstallProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product to be reinstalled.
     * @param {Integer} szReinstallMode 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msireinstallproductw
     * @since windows8.0
     */
    static MsiReinstallProductW(szProduct, szReinstallMode) {
        DllCall("msi.dll\MsiReinstallProductW", "ptr", szProduct, "uint", szReinstallMode)
    }

    /**
     * The MsiAdvertiseProductEx function generates an advertise script or advertises a product to the computer. (ANSI)
     * @remarks
     * Multiple instances through product code–changing transforms is only available for Windows Installer versions shipping with   Windows Server 2003  and Windows XP with SP1 and later.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiAdvertiseProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPackagePath The full path to the package of the product being advertised.
     * @param {Pointer<PSTR>} szScriptfilePath The full path to the script file to be created with the advertised information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_MACHINEASSIGN"></a><a id="advertiseflags_machineassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_MACHINEASSIGN</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-computer installation of the product available to all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_USERASSIGN"></a><a id="advertiseflags_userassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_USERASSIGN</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-user installation of the product available to a particular user.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szTransforms A semicolon–delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path–transforms. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.
     * @param {Integer} lgidLanguage The language to use if the source supports multiple languages.
     * @param {Integer} dwPlatform Bit flags that control for which platform the installer should create the script. This parameter is ignored if <i>szScriptfilePath</i> is null. If <i>dwPlatform</i> is zero (0), then the script is created based on the current platform. This is the same functionality as 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a>. If <i>dwPlatform</i> is 1 or 2, the installer creates script for the specified platform. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="none"></a><a id="NONE"></a><dl>
     * <dt><b>none</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the current platform.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_X86"></a><a id="msiarchitectureflags_x86"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_X86</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the x86 platform.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_IA64"></a><a id="msiarchitectureflags_ia64"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_IA64</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for Itanium-based systems.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_AMD64"></a><a id="msiarchitectureflags_amd64"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_AMD64</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the x64 platform.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwOptions Bit flags that specify extra advertisement options. Nonzero value is only available in Windows Installer versions shipped with Windows Server 2003 and Windows XP with SP1 and later.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIADVERTISEOPTIONS_INSTANCE"></a><a id="msiadvertiseoptions_instance"></a><dl>
     * <dt><b>MSIADVERTISEOPTIONS_INSTANCE</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Multiple instances through product code changing transform support flag. Advertises a new instance of the product. Requires that the <i>szTransforms</i> parameter includes the instance transform that changes the product code. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiadvertiseproductexa
     * @since windows8.0
     */
    static MsiAdvertiseProductExA(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage, dwPlatform, dwOptions) {
        DllCall("msi.dll\MsiAdvertiseProductExA", "ptr", szPackagePath, "ptr", szScriptfilePath, "ptr", szTransforms, "ushort", lgidLanguage, "uint", dwPlatform, "uint", dwOptions)
    }

    /**
     * The MsiAdvertiseProductEx function generates an advertise script or advertises a product to the computer. (Unicode)
     * @remarks
     * Multiple instances through product code–changing transforms is only available for Windows Installer versions shipping with   Windows Server 2003  and Windows XP with SP1 and later.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiAdvertiseProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPackagePath The full path to the package of the product being advertised.
     * @param {Pointer<PWSTR>} szScriptfilePath The full path to the script file to be created with the advertised information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_MACHINEASSIGN"></a><a id="advertiseflags_machineassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_MACHINEASSIGN</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-computer installation of the product available to all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_USERASSIGN"></a><a id="advertiseflags_userassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_USERASSIGN</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-user installation of the product available to a particular user.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szTransforms A semicolon–delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path–transforms. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.
     * @param {Integer} lgidLanguage The language to use if the source supports multiple languages.
     * @param {Integer} dwPlatform Bit flags that control for which platform the installer should create the script. This parameter is ignored if <i>szScriptfilePath</i> is null. If <i>dwPlatform</i> is zero (0), then the script is created based on the current platform. This is the same functionality as 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a>. If <i>dwPlatform</i> is 1 or 2, the installer creates script for the specified platform. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="none"></a><a id="NONE"></a><dl>
     * <dt><b>none</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the current platform.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_X86"></a><a id="msiarchitectureflags_x86"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_X86</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the x86 platform.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_IA64"></a><a id="msiarchitectureflags_ia64"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_IA64</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for Itanium-based systems.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIARCHITECTUREFLAGS_AMD64"></a><a id="msiarchitectureflags_amd64"></a><dl>
     * <dt><b>MSIARCHITECTUREFLAGS_AMD64</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Creates a script for the x64 platform.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwOptions Bit flags that specify extra advertisement options. Nonzero value is only available in Windows Installer versions shipped with Windows Server 2003 and Windows XP with SP1 and later.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIADVERTISEOPTIONS_INSTANCE"></a><a id="msiadvertiseoptions_instance"></a><dl>
     * <dt><b>MSIADVERTISEOPTIONS_INSTANCE</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Multiple instances through product code changing transform support flag. Advertises a new instance of the product. Requires that the <i>szTransforms</i> parameter includes the instance transform that changes the product code. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiadvertiseproductexw
     * @since windows8.0
     */
    static MsiAdvertiseProductExW(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage, dwPlatform, dwOptions) {
        DllCall("msi.dll\MsiAdvertiseProductExW", "ptr", szPackagePath, "ptr", szScriptfilePath, "ptr", szTransforms, "ushort", lgidLanguage, "uint", dwPlatform, "uint", dwOptions)
    }

    /**
     * The MsiAdvertiseProduct function generates an advertise script or advertises a product to the computer. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiAdvertiseProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPackagePath The full path to the package of the product being advertised.
     * @param {Pointer<PSTR>} szScriptfilePath The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_MACHINEASSIGN"></a><a id="advertiseflags_machineassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_MACHINEASSIGN</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-machine installation of the product available to all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_USERASSIGN"></a><a id="advertiseflags_userassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_USERASSIGN</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-user installation of the product available to a particular user.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szTransforms A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.
     * @param {Integer} lgidLanguage The installation language to use if the source supports multiple languages.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiadvertiseproducta
     * @since windows8.0
     */
    static MsiAdvertiseProductA(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage) {
        DllCall("msi.dll\MsiAdvertiseProductA", "ptr", szPackagePath, "ptr", szScriptfilePath, "ptr", szTransforms, "ushort", lgidLanguage)
    }

    /**
     * The MsiAdvertiseProduct function generates an advertise script or advertises a product to the computer. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiAdvertiseProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPackagePath The full path to the package of the product being advertised.
     * @param {Pointer<PWSTR>} szScriptfilePath The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_MACHINEASSIGN"></a><a id="advertiseflags_machineassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_MACHINEASSIGN</b></dt>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-machine installation of the product available to all users.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ADVERTISEFLAGS_USERASSIGN"></a><a id="advertiseflags_userassign"></a><dl>
     * <dt><b>ADVERTISEFLAGS_USERASSIGN</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set to advertise a per-user installation of the product available to a particular user.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szTransforms A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.
     * @param {Integer} lgidLanguage The installation language to use if the source supports multiple languages.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiadvertiseproductw
     * @since windows8.0
     */
    static MsiAdvertiseProductW(szPackagePath, szScriptfilePath, szTransforms, lgidLanguage) {
        DllCall("msi.dll\MsiAdvertiseProductW", "ptr", szPackagePath, "ptr", szScriptfilePath, "ptr", szTransforms, "ushort", lgidLanguage)
    }

    /**
     * The MsiProcessAdvertiseScript function processes an advertise script file into the specified locations. (ANSI)
     * @remarks
     * The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiProcessAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szScriptFile The full path to a script file generated by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {Pointer<PSTR>} szIconFolder An optional path to a folder in which advertised icon files and transform files are located. If this parameter is <b>NULL</b>, no icon or transform files are written.
     * @param {Pointer<HKEY>} hRegData A registry key under which registry data is to be written. If this parameter is <b>NULL</b>, the installer writes the registry data under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-<b>NULL</b>, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.
     * @param {Integer} fShortcuts <b>TRUE</b> if shortcuts should be created. If a special folder is returned by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/shlobj_core/nf-shlobj_core-shgetspecialfolderlocation">SHGetSpecialFolderLocation</a> it will hold the shortcuts.
     * @param {Integer} fRemoveItems <b>TRUE</b> if specified items are to be removed instead of created.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiprocessadvertisescripta
     * @since windows8.0
     */
    static MsiProcessAdvertiseScriptA(szScriptFile, szIconFolder, hRegData, fShortcuts, fRemoveItems) {
        DllCall("msi.dll\MsiProcessAdvertiseScriptA", "ptr", szScriptFile, "ptr", szIconFolder, "ptr", hRegData, "int", fShortcuts, "int", fRemoveItems)
    }

    /**
     * The MsiProcessAdvertiseScript function processes an advertise script file into the specified locations. (Unicode)
     * @remarks
     * The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiProcessAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szScriptFile The full path to a script file generated by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {Pointer<PWSTR>} szIconFolder An optional path to a folder in which advertised icon files and transform files are located. If this parameter is <b>NULL</b>, no icon or transform files are written.
     * @param {Pointer<HKEY>} hRegData A registry key under which registry data is to be written. If this parameter is <b>NULL</b>, the installer writes the registry data under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-<b>NULL</b>, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.
     * @param {Integer} fShortcuts <b>TRUE</b> if shortcuts should be created. If a special folder is returned by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/shlobj_core/nf-shlobj_core-shgetspecialfolderlocation">SHGetSpecialFolderLocation</a> it will hold the shortcuts.
     * @param {Integer} fRemoveItems <b>TRUE</b> if specified items are to be removed instead of created.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiprocessadvertisescriptw
     * @since windows8.0
     */
    static MsiProcessAdvertiseScriptW(szScriptFile, szIconFolder, hRegData, fShortcuts, fRemoveItems) {
        DllCall("msi.dll\MsiProcessAdvertiseScriptW", "ptr", szScriptFile, "ptr", szIconFolder, "ptr", hRegData, "int", fShortcuts, "int", fRemoveItems)
    }

    /**
     * The MsiAdvertiseScript function copies an advertised script file into the specified locations. (ANSI)
     * @remarks
     * The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szScriptFile The full path to a script file generated by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {Integer} dwFlags 
     * @param {Pointer<HKEY>} phRegData A registry key under which temporary information about registry data is to be written. If this parameter is null, the registry data is placed under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-null, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user. 
     * 
     * 
     * 
     * 
     * Note that this registry key cannot be used when generating an advertisement of a product for a user or a computer because the provider of the registry key generally deletes the key. The registry key is located outside of the normal registry locations for shell, class, and .msi configuration information and it is not under <b>HKEY_CLASSES_ROOT</b>. This registry key is only intended for getting temporary information about registry data in a script.
     * @param {Integer} fRemoveItems TRUE if specified items are to be removed instead of being created.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiadvertisescripta
     * @since windows8.0
     */
    static MsiAdvertiseScriptA(szScriptFile, dwFlags, phRegData, fRemoveItems) {
        DllCall("msi.dll\MsiAdvertiseScriptA", "ptr", szScriptFile, "uint", dwFlags, "ptr", phRegData, "int", fRemoveItems)
    }

    /**
     * The MsiAdvertiseScript function copies an advertised script file into the specified locations. (Unicode)
     * @remarks
     * The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szScriptFile The full path to a script file generated by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {Integer} dwFlags 
     * @param {Pointer<HKEY>} phRegData A registry key under which temporary information about registry data is to be written. If this parameter is null, the registry data is placed under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-null, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user. 
     * 
     * 
     * 
     * 
     * Note that this registry key cannot be used when generating an advertisement of a product for a user or a computer because the provider of the registry key generally deletes the key. The registry key is located outside of the normal registry locations for shell, class, and .msi configuration information and it is not under <b>HKEY_CLASSES_ROOT</b>. This registry key is only intended for getting temporary information about registry data in a script.
     * @param {Integer} fRemoveItems TRUE if specified items are to be removed instead of being created.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiadvertisescriptw
     * @since windows8.0
     */
    static MsiAdvertiseScriptW(szScriptFile, dwFlags, phRegData, fRemoveItems) {
        DllCall("msi.dll\MsiAdvertiseScriptW", "ptr", szScriptFile, "uint", dwFlags, "ptr", phRegData, "int", fRemoveItems)
    }

    /**
     * The MsiGetProductInfoFromScript function returns product information for a Windows Installer script file. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiGetProductInfoFromScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szScriptFile A null-terminated string specifying the full path to the script file. The script file is the advertise script that was created by calling <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {Pointer<PSTR>} lpProductBuf39 Points to a buffer that receives the product code. The buffer must be 39 characters long. The first 38 characters are for the product code 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @param {Pointer<UInt16>} plgidLanguage Points to a variable that receives the product language.
     * @param {Pointer<UInt32>} pdwVersion Points to a buffer that receives the product version.
     * @param {Pointer<PSTR>} lpNameBuf Points to a buffer that receives the product name. The buffer includes a terminating null character.
     * @param {Pointer<UInt32>} pcchNameBuf Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.
     * @param {Pointer<PSTR>} lpPackageBuf Points to a buffer that receives the package name. The buffer includes the terminating null character.
     * @param {Pointer<UInt32>} pcchPackageBuf Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPackageNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetproductinfofromscripta
     * @since windows8.0
     */
    static MsiGetProductInfoFromScriptA(szScriptFile, lpProductBuf39, plgidLanguage, pdwVersion, lpNameBuf, pcchNameBuf, lpPackageBuf, pcchPackageBuf) {
        DllCall("msi.dll\MsiGetProductInfoFromScriptA", "ptr", szScriptFile, "ptr", lpProductBuf39, "ptr", plgidLanguage, "ptr", pdwVersion, "ptr", lpNameBuf, "ptr", pcchNameBuf, "ptr", lpPackageBuf, "ptr", pcchPackageBuf)
    }

    /**
     * The MsiGetProductInfoFromScript function returns product information for a Windows Installer script file. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiGetProductInfoFromScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szScriptFile A null-terminated string specifying the full path to the script file. The script file is the advertise script that was created by calling <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproducta">MsiAdvertiseProduct</a> or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiadvertiseproductexa">MsiAdvertiseProductEx</a>.
     * @param {Pointer<PWSTR>} lpProductBuf39 Points to a buffer that receives the product code. The buffer must be 39 characters long. The first 38 characters are for the product code 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @param {Pointer<UInt16>} plgidLanguage Points to a variable that receives the product language.
     * @param {Pointer<UInt32>} pdwVersion Points to a buffer that receives the product version.
     * @param {Pointer<PWSTR>} lpNameBuf Points to a buffer that receives the product name. The buffer includes a terminating null character.
     * @param {Pointer<UInt32>} pcchNameBuf Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.
     * @param {Pointer<PWSTR>} lpPackageBuf Points to a buffer that receives the package name. The buffer includes the terminating null character.
     * @param {Pointer<UInt32>} pcchPackageBuf Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPackageNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetproductinfofromscriptw
     * @since windows8.0
     */
    static MsiGetProductInfoFromScriptW(szScriptFile, lpProductBuf39, plgidLanguage, pdwVersion, lpNameBuf, pcchNameBuf, lpPackageBuf, pcchPackageBuf) {
        DllCall("msi.dll\MsiGetProductInfoFromScriptW", "ptr", szScriptFile, "ptr", lpProductBuf39, "ptr", plgidLanguage, "ptr", pdwVersion, "ptr", lpNameBuf, "ptr", pcchNameBuf, "ptr", lpPackageBuf, "ptr", pcchPackageBuf)
    }

    /**
     * The MsiGetProductCode function returns the product code of an application by using the component code of an installed or advertised component of the application. (ANSI)
     * @remarks
     * During initialization, an application must determine the product code under which it was installed. An application can be part of different products in different installations. For example, an application can be part of a suite of applications, or it can be installed by itself.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetProductCode as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szComponent This parameter specifies the component code of a component that has been installed by the application. This will be typically the component code of the component containing the executable file of the application.
     * @param {Pointer<PSTR>} lpBuf39 Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetproductcodea
     * @since windows8.0
     */
    static MsiGetProductCodeA(szComponent, lpBuf39) {
        DllCall("msi.dll\MsiGetProductCodeA", "ptr", szComponent, "ptr", lpBuf39)
    }

    /**
     * The MsiGetProductCode function returns the product code of an application by using the component code of an installed or advertised component of the application. (Unicode)
     * @remarks
     * During initialization, an application must determine the product code under which it was installed. An application can be part of different products in different installations. For example, an application can be part of a suite of applications, or it can be installed by itself.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetProductCode as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szComponent This parameter specifies the component code of a component that has been installed by the application. This will be typically the component code of the component containing the executable file of the application.
     * @param {Pointer<PWSTR>} lpBuf39 Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetproductcodew
     * @since windows8.0
     */
    static MsiGetProductCodeW(szComponent, lpBuf39) {
        DllCall("msi.dll\MsiGetProductCodeW", "ptr", szComponent, "ptr", lpBuf39)
    }

    /**
     * The MsiGetUserInfo function returns the registered user information for an installed product. (ANSI)
     * @remarks
     * When the 
     * <b>MsiGetUserInfo</b> function returns, the <i>pcchNameBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, the 
     * <b>MsiGetUserInfo</b> function returns USERINFOSTATE_MOREDATA, and 
     * <b>MsiGetUserInfo</b> contains the size of the string, in characters, without counting the null character.
     * 
     * The user information is considered to be present even in the absence of a company name.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product to be queried.
     * @param {Pointer<PSTR>} lpUserNameBuf Pointer to a variable that receives the name of the user.
     * @param {Pointer<UInt32>} pcchUserNameBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpUserNameBuf</i> parameter. This size should include the terminating null character.
     * @param {Pointer<PSTR>} lpOrgNameBuf Pointer to a buffer that receives the organization name.
     * @param {Pointer<UInt32>} pcchOrgNameBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpOrgNameBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @param {Pointer<PSTR>} lpSerialBuf Pointer to a buffer that receives the product ID.
     * @param {Pointer<UInt32>} pcchSerialBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpSerialBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetuserinfoa
     * @since windows8.0
     */
    static MsiGetUserInfoA(szProduct, lpUserNameBuf, pcchUserNameBuf, lpOrgNameBuf, pcchOrgNameBuf, lpSerialBuf, pcchSerialBuf) {
        DllCall("msi.dll\MsiGetUserInfoA", "ptr", szProduct, "ptr", lpUserNameBuf, "ptr", pcchUserNameBuf, "ptr", lpOrgNameBuf, "ptr", pcchOrgNameBuf, "ptr", lpSerialBuf, "ptr", pcchSerialBuf)
    }

    /**
     * The MsiGetUserInfo function returns the registered user information for an installed product. (Unicode)
     * @remarks
     * When the 
     * <b>MsiGetUserInfo</b> function returns, the <i>pcchNameBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, the 
     * <b>MsiGetUserInfo</b> function returns USERINFOSTATE_MOREDATA, and 
     * <b>MsiGetUserInfo</b> contains the size of the string, in characters, without counting the null character.
     * 
     * The user information is considered to be present even in the absence of a company name.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product to be queried.
     * @param {Pointer<PWSTR>} lpUserNameBuf Pointer to a variable that receives the name of the user.
     * @param {Pointer<UInt32>} pcchUserNameBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpUserNameBuf</i> parameter. This size should include the terminating null character.
     * @param {Pointer<PWSTR>} lpOrgNameBuf Pointer to a buffer that receives the organization name.
     * @param {Pointer<UInt32>} pcchOrgNameBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpOrgNameBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @param {Pointer<PWSTR>} lpSerialBuf Pointer to a buffer that receives the product ID.
     * @param {Pointer<UInt32>} pcchSerialBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpSerialBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetuserinfow
     * @since windows8.0
     */
    static MsiGetUserInfoW(szProduct, lpUserNameBuf, pcchUserNameBuf, lpOrgNameBuf, pcchOrgNameBuf, lpSerialBuf, pcchSerialBuf) {
        DllCall("msi.dll\MsiGetUserInfoW", "ptr", szProduct, "ptr", lpUserNameBuf, "ptr", pcchUserNameBuf, "ptr", lpOrgNameBuf, "ptr", pcchOrgNameBuf, "ptr", lpSerialBuf, "ptr", pcchSerialBuf)
    }

    /**
     * The MsiCollectUserInfo function obtains and stores the user information and product ID from an installation wizard. (ANSI)
     * @remarks
     * The 
     * <b>MsiCollectUserInfo</b> function is typically called by an application during the first run of the application. The application first calls 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msigetuserinfoa">MsiGetUserInfo</a>. If that call fails, the application calls 
     * <b>MsiCollectUserInfo</b>. 
     * <b>MsiCollectUserInfo</b> opens the product's installation package and invokes a wizard sequence that collects user information. Upon completion of the sequence, user information is registered. Since this API requires an authored user interface, the user interface level should be set to full by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a> as INSTALLUILEVEL_FULL.
     * 
     * The 
     * <b>MsiCollectUserInfo</b> invokes a 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/firstrun-dialog">FirstRun Dialog</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiCollectUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code of the product for which the user information is collected.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msicollectuserinfoa
     * @since windows8.0
     */
    static MsiCollectUserInfoA(szProduct) {
        DllCall("msi.dll\MsiCollectUserInfoA", "ptr", szProduct)
    }

    /**
     * The MsiCollectUserInfo function obtains and stores the user information and product ID from an installation wizard. (Unicode)
     * @remarks
     * The 
     * <b>MsiCollectUserInfo</b> function is typically called by an application during the first run of the application. The application first calls 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msigetuserinfoa">MsiGetUserInfo</a>. If that call fails, the application calls 
     * <b>MsiCollectUserInfo</b>. 
     * <b>MsiCollectUserInfo</b> opens the product's installation package and invokes a wizard sequence that collects user information. Upon completion of the sequence, user information is registered. Since this API requires an authored user interface, the user interface level should be set to full by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a> as INSTALLUILEVEL_FULL.
     * 
     * The 
     * <b>MsiCollectUserInfo</b> invokes a 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/firstrun-dialog">FirstRun Dialog</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiCollectUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code of the product for which the user information is collected.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msicollectuserinfow
     * @since windows8.0
     */
    static MsiCollectUserInfoW(szProduct) {
        DllCall("msi.dll\MsiCollectUserInfoW", "ptr", szProduct)
    }

    /**
     * For each product listed by the patch package as eligible to receive the patch, the MsiApplyPatch function invokes an installation and sets the PATCH property to the path of the patch package. (ANSI)
     * @remarks
     * Because the list delimiter for transforms, sources, and patches is a semicolon, this character should not be used for file names or paths.
     * 
     * <div class="alert"><b>Note</b>  <p class="note">You must set the <a href="https://docs.microsoft.com/windows/desktop/Msi/reinstall">REINSTALL</a> property on the command line when applying a <a href="https://docs.microsoft.com/windows/desktop/Msi/small-updates">small update</a> or <a href="https://docs.microsoft.com/windows/desktop/Msi/minor-upgrades">minor upgrade</a> patch. Without this property, the patch is registered on the system but cannot update files.  For patches that do not use a <a href="https://docs.microsoft.com/windows/desktop/Msi/custom-action-type-51">Custom Action Type 51</a> to automatically set the <b>REINSTALL</b> and <a href="https://docs.microsoft.com/windows/desktop/Msi/reinstallmode">REINSTALLMODE</a> properties, the <b>REINSTALL</b> property must be explicitly set with the <i>szCommandLine</i> parameter. Set the <b>REINSTALL</b> property to list the features affected by the patch, or use a practical default setting of "REINSTALL=ALL". The default value of the <b>REINSTALLMODE</b> property is "omus". Beginning with Windows Installer version 3.0, the <b>REINSTALL</b> property is configured by the installer and does not need to be set on the command line.
     * 
     * </div>
     * <div> </div>
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiApplyPatch as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPatchPackage A null-terminated string specifying the full path to the patch package.
     * @param {Pointer<PSTR>} szInstallPackage If <i>eInstallType</i> is set to INSTALLTYPE_NETWORK_IMAGE, this parameter is a null-terminated string that specifies a path to the product that is to be patched. The installer applies the patch to every eligible product listed in the patch package if <i>szInstallPackage</i> is set to null and <i>eInstallType</i> is set to INSTALLTYPE_DEFAULT.
     * 
     * If <i>eInstallType</i> is INSTALLTYPE_SINGLE_INSTANCE, the installer applies the patch to the product specified by <i>szInstallPackage</i>. In this case, other eligible products listed in the patch package are ignored and the <i>szInstallPackage</i> parameter contains the null-terminated string representing the product code of the instance to patch. This type of installation requires the installer running Windows Server 2003 or Windows XP.
     * @param {Integer} eInstallType This parameter specifies the type of installation to patch.
     * 
     * <table>
     * <tr>
     * <th>Type of installation</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_NETWORK_IMAGE"></a><a id="installtype_network_image"></a><dl>
     * <dt><b>INSTALLTYPE_NETWORK_IMAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an administrative installation. In this case, <i>szInstallPackage</i> must be set to a package path. A value of 1 for INSTALLTYPE_NETWORK_IMAGE sets this for an administrative installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_DEFAULT"></a><a id="installtype_default"></a><dl>
     * <dt><b>INSTALLTYPE_DEFAULT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Searches system for products to patch. In this case, <i>szInstallPackage</i> must be 0.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_SINGLE_INSTANCE"></a><a id="installtype_single_instance"></a><dl>
     * <dt><b>INSTALLTYPE_SINGLE_INSTANCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patch the product specified by <i>szInstallPackage</i>. <i>szInstallPackage</i> is the product code of the instance to patch. This type of installation requires the installer running Windows Server 2003 or Windows XP with SP1. For more information see, <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szCommandLine A null-terminated string that specifies command line property settings. See About 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. See the Remarks section.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiapplypatcha
     * @since windows8.0
     */
    static MsiApplyPatchA(szPatchPackage, szInstallPackage, eInstallType, szCommandLine) {
        DllCall("msi.dll\MsiApplyPatchA", "ptr", szPatchPackage, "ptr", szInstallPackage, "int", eInstallType, "ptr", szCommandLine)
    }

    /**
     * For each product listed by the patch package as eligible to receive the patch, the MsiApplyPatch function invokes an installation and sets the PATCH property to the path of the patch package. (Unicode)
     * @remarks
     * Because the list delimiter for transforms, sources, and patches is a semicolon, this character should not be used for file names or paths.
     * 
     * <div class="alert"><b>Note</b>  <p class="note">You must set the <a href="https://docs.microsoft.com/windows/desktop/Msi/reinstall">REINSTALL</a> property on the command line when applying a <a href="https://docs.microsoft.com/windows/desktop/Msi/small-updates">small update</a> or <a href="https://docs.microsoft.com/windows/desktop/Msi/minor-upgrades">minor upgrade</a> patch. Without this property, the patch is registered on the system but cannot update files.  For patches that do not use a <a href="https://docs.microsoft.com/windows/desktop/Msi/custom-action-type-51">Custom Action Type 51</a> to automatically set the <b>REINSTALL</b> and <a href="https://docs.microsoft.com/windows/desktop/Msi/reinstallmode">REINSTALLMODE</a> properties, the <b>REINSTALL</b> property must be explicitly set with the <i>szCommandLine</i> parameter. Set the <b>REINSTALL</b> property to list the features affected by the patch, or use a practical default setting of "REINSTALL=ALL". The default value of the <b>REINSTALLMODE</b> property is "omus". Beginning with Windows Installer version 3.0, the <b>REINSTALL</b> property is configured by the installer and does not need to be set on the command line.
     * 
     * </div>
     * <div> </div>
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiApplyPatch as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPatchPackage A null-terminated string specifying the full path to the patch package.
     * @param {Pointer<PWSTR>} szInstallPackage If <i>eInstallType</i> is set to INSTALLTYPE_NETWORK_IMAGE, this parameter is a null-terminated string that specifies a path to the product that is to be patched. The installer applies the patch to every eligible product listed in the patch package if <i>szInstallPackage</i> is set to null and <i>eInstallType</i> is set to INSTALLTYPE_DEFAULT.
     * 
     * If <i>eInstallType</i> is INSTALLTYPE_SINGLE_INSTANCE, the installer applies the patch to the product specified by <i>szInstallPackage</i>. In this case, other eligible products listed in the patch package are ignored and the <i>szInstallPackage</i> parameter contains the null-terminated string representing the product code of the instance to patch. This type of installation requires the installer running Windows Server 2003 or Windows XP.
     * @param {Integer} eInstallType This parameter specifies the type of installation to patch.
     * 
     * <table>
     * <tr>
     * <th>Type of installation</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_NETWORK_IMAGE"></a><a id="installtype_network_image"></a><dl>
     * <dt><b>INSTALLTYPE_NETWORK_IMAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an administrative installation. In this case, <i>szInstallPackage</i> must be set to a package path. A value of 1 for INSTALLTYPE_NETWORK_IMAGE sets this for an administrative installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_DEFAULT"></a><a id="installtype_default"></a><dl>
     * <dt><b>INSTALLTYPE_DEFAULT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Searches system for products to patch. In this case, <i>szInstallPackage</i> must be 0.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_SINGLE_INSTANCE"></a><a id="installtype_single_instance"></a><dl>
     * <dt><b>INSTALLTYPE_SINGLE_INSTANCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patch the product specified by <i>szInstallPackage</i>. <i>szInstallPackage</i> is the product code of the instance to patch. This type of installation requires the installer running Windows Server 2003 or Windows XP with SP1. For more information see, <a href="https://docs.microsoft.com/windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szCommandLine A null-terminated string that specifies command line property settings. See About 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. See the Remarks section.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiapplypatchw
     * @since windows8.0
     */
    static MsiApplyPatchW(szPatchPackage, szInstallPackage, eInstallType, szCommandLine) {
        DllCall("msi.dll\MsiApplyPatchW", "ptr", szPatchPackage, "ptr", szInstallPackage, "int", eInstallType, "ptr", szCommandLine)
    }

    /**
     * The MsiGetPatchInfo function returns information about a patch. (ANSI)
     * @remarks
     * When the 
     * <b>MsiGetPatchInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character.
     * 
     * If the buffer is too small to hold the requested data, 
     * <b>MsiGetPatchInfo</b> returns ERROR_MORE_DATA, and <i>pcchValueBuf</i> contains the number of characters copied to <i>lpValueBuf</i>, without counting the null character.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetPatchInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPatch Specifies the patch code for the patch package.
     * @param {Pointer<PSTR>} szAttribute Specifies the attribute to be retrieved. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Attribute</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Local cached package.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} lpValueBuf Pointer to a buffer that receives the property value. This parameter can be null.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetpatchinfoa
     * @since windows8.0
     */
    static MsiGetPatchInfoA(szPatch, szAttribute, lpValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiGetPatchInfoA", "ptr", szPatch, "ptr", szAttribute, "ptr", lpValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * The MsiGetPatchInfo function returns information about a patch. (Unicode)
     * @remarks
     * When the 
     * <b>MsiGetPatchInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character.
     * 
     * If the buffer is too small to hold the requested data, 
     * <b>MsiGetPatchInfo</b> returns ERROR_MORE_DATA, and <i>pcchValueBuf</i> contains the number of characters copied to <i>lpValueBuf</i>, without counting the null character.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetPatchInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPatch Specifies the patch code for the patch package.
     * @param {Pointer<PWSTR>} szAttribute Specifies the attribute to be retrieved. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Attribute</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Local cached package.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} lpValueBuf Pointer to a buffer that receives the property value. This parameter can be null.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetpatchinfow
     * @since windows8.0
     */
    static MsiGetPatchInfoW(szPatch, szAttribute, lpValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiGetPatchInfoW", "ptr", szPatch, "ptr", szAttribute, "ptr", lpValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * The MsiEnumPatches function enumerates all of the patches that have been applied to a product. (ANSI)
     * @remarks
     * To enumerate patches, an application should initially call the 
     * <b>MsiEnumPatches</b> function with the <i>iPatchIndex</i> parameter set to zero. The application should then increment the <i>iPatchIndex</i> parameter and call 
     * <b>MsiEnumPatches</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * If the buffer is too small to hold the requested data, 
     * <b>MsiEnumPatches</b> returns ERROR_MORE_DATA and <i>pcchTransformsBuf</i> contains the number of characters copied to <i>lpTransformsBuf</i>, without counting the Null character.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumPatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code of the product for which patches are to be enumerated.
     * @param {Integer} iPatchIndex Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumPatches</b> function and then incremented for subsequent calls.
     * @param {Pointer<PSTR>} lpPatchBuf Pointer to a buffer that receives the patch's GUID. This argument is required.
     * @param {Pointer<PSTR>} lpTransformsBuf Pointer to a buffer that receives the list of transforms in the patch that are applicable to the product. This argument is required and cannot be Null.
     * @param {Pointer<UInt32>} pcchTransformsBuf Set to the number of characters copied to <i>lpTransformsBuf</i> upon an unsuccessful return of the function. Not set for a successful return. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumpatchesa
     * @since windows8.0
     */
    static MsiEnumPatchesA(szProduct, iPatchIndex, lpPatchBuf, lpTransformsBuf, pcchTransformsBuf) {
        DllCall("msi.dll\MsiEnumPatchesA", "ptr", szProduct, "uint", iPatchIndex, "ptr", lpPatchBuf, "ptr", lpTransformsBuf, "ptr", pcchTransformsBuf)
    }

    /**
     * The MsiEnumPatches function enumerates all of the patches that have been applied to a product. (Unicode)
     * @remarks
     * To enumerate patches, an application should initially call the 
     * <b>MsiEnumPatches</b> function with the <i>iPatchIndex</i> parameter set to zero. The application should then increment the <i>iPatchIndex</i> parameter and call 
     * <b>MsiEnumPatches</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * If the buffer is too small to hold the requested data, 
     * <b>MsiEnumPatches</b> returns ERROR_MORE_DATA and <i>pcchTransformsBuf</i> contains the number of characters copied to <i>lpTransformsBuf</i>, without counting the Null character.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumPatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code of the product for which patches are to be enumerated.
     * @param {Integer} iPatchIndex Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumPatches</b> function and then incremented for subsequent calls.
     * @param {Pointer<PWSTR>} lpPatchBuf Pointer to a buffer that receives the patch's GUID. This argument is required.
     * @param {Pointer<PWSTR>} lpTransformsBuf Pointer to a buffer that receives the list of transforms in the patch that are applicable to the product. This argument is required and cannot be Null.
     * @param {Pointer<UInt32>} pcchTransformsBuf Set to the number of characters copied to <i>lpTransformsBuf</i> upon an unsuccessful return of the function. Not set for a successful return. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumpatchesw
     * @since windows8.0
     */
    static MsiEnumPatchesW(szProduct, iPatchIndex, lpPatchBuf, lpTransformsBuf, pcchTransformsBuf) {
        DllCall("msi.dll\MsiEnumPatchesW", "ptr", szProduct, "uint", iPatchIndex, "ptr", lpPatchBuf, "ptr", lpTransformsBuf, "ptr", pcchTransformsBuf)
    }

    /**
     * Removes one or more patches from a single product. (ANSI)
     * @remarks
     * See  <a href="https://docs.microsoft.com/windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</a> for an example that demonstrates how an application can remove a patch from all products that are available to the user. 
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiRemovePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPatchList A null-terminated string that represents the list of patches to remove.  Each patch can be specified by the GUID of the patch or the full path to the patch package. The patches in the list are delimited by semicolons.
     * @param {Pointer<PSTR>} szProductCode A null-terminated string that is the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product from which the patches are removed.  This parameter cannot be <b>NULL</b>.
     * @param {Integer} eUninstallType Value that indicates the type of patch removal to perform. This parameter must be <b>INSTALLTYPE_SINGLE_INSTANCE</b>.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_SINGLE_INSTANCE"></a><a id="installtype_single_instance"></a><dl>
     * <dt><b>INSTALLTYPE_SINGLE_INSTANCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is uninstalled for only the product specified by <i>szProduct</i>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szPropertyList A null-terminated string that specifies command-line property settings. For more information see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. This parameter can be <b>NULL</b>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiremovepatchesa
     * @since windows8.0
     */
    static MsiRemovePatchesA(szPatchList, szProductCode, eUninstallType, szPropertyList) {
        DllCall("msi.dll\MsiRemovePatchesA", "ptr", szPatchList, "ptr", szProductCode, "int", eUninstallType, "ptr", szPropertyList)
    }

    /**
     * Removes one or more patches from a single product. (Unicode)
     * @remarks
     * See  <a href="https://docs.microsoft.com/windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</a> for an example that demonstrates how an application can remove a patch from all products that are available to the user. 
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiRemovePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPatchList A null-terminated string that represents the list of patches to remove.  Each patch can be specified by the GUID of the patch or the full path to the patch package. The patches in the list are delimited by semicolons.
     * @param {Pointer<PWSTR>} szProductCode A null-terminated string that is the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product from which the patches are removed.  This parameter cannot be <b>NULL</b>.
     * @param {Integer} eUninstallType Value that indicates the type of patch removal to perform. This parameter must be <b>INSTALLTYPE_SINGLE_INSTANCE</b>.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLTYPE_SINGLE_INSTANCE"></a><a id="installtype_single_instance"></a><dl>
     * <dt><b>INSTALLTYPE_SINGLE_INSTANCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The patch is uninstalled for only the product specified by <i>szProduct</i>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szPropertyList A null-terminated string that specifies command-line property settings. For more information see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. This parameter can be <b>NULL</b>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiremovepatchesw
     * @since windows8.0
     */
    static MsiRemovePatchesW(szPatchList, szProductCode, eUninstallType, szPropertyList) {
        DllCall("msi.dll\MsiRemovePatchesW", "ptr", szPatchList, "ptr", szProductCode, "int", eUninstallType, "ptr", szPropertyList)
    }

    /**
     * The MsiExtractPatchXMLData function extracts information from a patch that can be used to determine if the patch applies to a target system. (ANSI)
     * @remarks
     * The <a href="https://docs.microsoft.com/windows/desktop/Msi/installer-extractpatchxmldata">ExtractPatchXMLData</a> method of the <a href="https://docs.microsoft.com/windows/desktop/Msi/installer-object">Installer</a> object uses the <b>MsiExtractPatchXMLData</b> function.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiExtractPatchXMLData as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPatchPath The  full path to the patch that is being queried. Pass in as a null-terminated string. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szXMLData A pointer to a buffer to hold the XML string that contains the extracted patch information. This buffer should be large enough to contain the received information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szXMLData</i> is set to <b>NULL</b> and <i>pcchXMLData</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szXMLData</i> buffer large enough to contain *<i>pcchXMLData</i> + 1 characters.
     * @param {Pointer<UInt32>} pcchXMLData A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szXMLData</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * If this parameter is set to <b>NULL</b>, the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiextractpatchxmldataa
     * @since windows6.0.6000
     */
    static MsiExtractPatchXMLDataA(szPatchPath, szXMLData, pcchXMLData) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiExtractPatchXMLDataA", "ptr", szPatchPath, "uint", dwReserved, "ptr", szXMLData, "ptr", pcchXMLData)
    }

    /**
     * The MsiExtractPatchXMLData function extracts information from a patch that can be used to determine if the patch applies to a target system. (Unicode)
     * @remarks
     * The <a href="https://docs.microsoft.com/windows/desktop/Msi/installer-extractpatchxmldata">ExtractPatchXMLData</a> method of the <a href="https://docs.microsoft.com/windows/desktop/Msi/installer-object">Installer</a> object uses the <b>MsiExtractPatchXMLData</b> function.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiExtractPatchXMLData as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPatchPath The  full path to the patch that is being queried. Pass in as a null-terminated string. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szXMLData A pointer to a buffer to hold the XML string that contains the extracted patch information. This buffer should be large enough to contain the received information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szXMLData</i> is set to <b>NULL</b> and <i>pcchXMLData</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szXMLData</i> buffer large enough to contain *<i>pcchXMLData</i> + 1 characters.
     * @param {Pointer<UInt32>} pcchXMLData A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szXMLData</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * If this parameter is set to <b>NULL</b>, the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiextractpatchxmldataw
     * @since windows6.0.6000
     */
    static MsiExtractPatchXMLDataW(szPatchPath, szXMLData, pcchXMLData) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiExtractPatchXMLDataW", "ptr", szPatchPath, "uint", dwReserved, "ptr", szXMLData, "ptr", pcchXMLData)
    }

    /**
     * Queries for information about the application of a patch to a specified instance of a product. (ANSI)
     * @remarks
     * <b>Windows Installer 2.0:  </b>Not supported. This function is available beginning with Windows Installer version 3.0.
     * 
     * A user may query patch data for any product instance that is visible. The administrator group can query patch data for any product instance and any user on the computer. Not all values are guaranteed to be available for per-user, non-managed applications if the user is not logged on.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetPatchInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPatchCode A null-terminated string that contains the GUID of the patch. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szProductCode A null-terminated string that contains the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szUserSid A null-terminated string that specifies the security identifier (SID) under which the instance of the patch being queried exists.  Using a <b>NULL</b> value specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the user that is logged on.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the enumeration for a specific user ID in the system.  The following example identifies a possible user SID: "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per–user-managed installations for the users that <i>szUserSid</i>  specifies.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per–user-unmanaged installations for the users that  <i>szUserSid</i> specifies.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per-machine installations.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szProperty A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following:
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * <dt>"LocalPackage"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the cached patch file that the product uses.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_TRANSFORMS"></a><a id="installproperty_transforms"></a><dl>
     * <dt><b>INSTALLPROPERTY_TRANSFORMS</b></dt>
     * <dt>"Transforms"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the set of patch transforms that the last patch installation applied to the product. This value may not be available for per-user, non-managed applications if the user is not logged on.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * <dt>"InstallDate"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_UNINSTALLABLE"></a><a id="installproperty_uninstallable"></a><dl>
     * <dt><b>INSTALLPROPERTY_UNINSTALLABLE</b></dt>
     * <dt>"Uninstallable"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Returns "1" if the patch is marked as possible to uninstall from the product.  In this case, the installer can still block the uninstallation if this patch is required by another patch that cannot be uninstalled.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PATCHSTATE"></a><a id="installproperty_patchstate"></a><dl>
     * <dt><b>INSTALLPROPERTY_PATCHSTATE</b></dt>
     * <dt>"State"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Returns "1" if this patch is currently applied to the product. Returns "2" if this patch is superseded by another patch. Returns  "4" if this patch is obsolete.   These values correspond to the constants the <i>dwFilter</i> parameter of <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumpatchesexa">MsiEnumPatchesEx</a> uses.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_DISPLAYNAME"></a><a id="installproperty_displayname"></a><dl>
     * <dt><b>INSTALLPROPERTY_DISPLAYNAME</b></dt>
     * <dt>"DisplayName"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Get the registered display name for the patch. For patches that do not
     * include the DisplayName property in the <a href="https://docs.microsoft.com/windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the
     *       returned display name is an empty string ("").
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_MOREINFOURL"></a><a id="installproperty_moreinfourl"></a><dl>
     * <dt><b>INSTALLPROPERTY_MOREINFOURL</b></dt>
     * <dt>"MoreInfoURL"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Get the registered support information URL for the patch. For patches that do not include the MoreInfoURL property in the 
     *       <a href="https://docs.microsoft.com/windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the returned support information URL is an
     *       empty string ("").
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} lpValue This parameter is a pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the property value, not including the terminating <b>NULL</b> character.
     * 
     * If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.
     * 
     * If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchValue When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetpatchinfoexa
     * @since windows8.0
     */
    static MsiGetPatchInfoExA(szPatchCode, szProductCode, szUserSid, dwContext, szProperty, lpValue, pcchValue) {
        DllCall("msi.dll\MsiGetPatchInfoExA", "ptr", szPatchCode, "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szProperty, "ptr", lpValue, "ptr", pcchValue)
    }

    /**
     * Queries for information about the application of a patch to a specified instance of a product. (Unicode)
     * @remarks
     * <b>Windows Installer 2.0:  </b>Not supported. This function is available beginning with Windows Installer version 3.0.
     * 
     * A user may query patch data for any product instance that is visible. The administrator group can query patch data for any product instance and any user on the computer. Not all values are guaranteed to be available for per-user, non-managed applications if the user is not logged on.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetPatchInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPatchCode A null-terminated string that contains the GUID of the patch. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szProductCode A null-terminated string that contains the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szUserSid A null-terminated string that specifies the security identifier (SID) under which the instance of the patch being queried exists.  Using a <b>NULL</b> value specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the user that is logged on.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the enumeration for a specific user ID in the system.  The following example identifies a possible user SID: "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per–user-managed installations for the users that <i>szUserSid</i>  specifies.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per–user-unmanaged installations for the users that  <i>szUserSid</i> specifies.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Query that is extended to all per-machine installations.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szProperty A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following:
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_LOCALPACKAGE"></a><a id="installproperty_localpackage"></a><dl>
     * <dt><b>INSTALLPROPERTY_LOCALPACKAGE</b></dt>
     * <dt>"LocalPackage"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the cached patch file that the product uses.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_TRANSFORMS"></a><a id="installproperty_transforms"></a><dl>
     * <dt><b>INSTALLPROPERTY_TRANSFORMS</b></dt>
     * <dt>"Transforms"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the set of patch transforms that the last patch installation applied to the product. This value may not be available for per-user, non-managed applications if the user is not logged on.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_INSTALLDATE"></a><a id="installproperty_installdate"></a><dl>
     * <dt><b>INSTALLPROPERTY_INSTALLDATE</b></dt>
     * <dt>"InstallDate"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Gets the last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com/windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_UNINSTALLABLE"></a><a id="installproperty_uninstallable"></a><dl>
     * <dt><b>INSTALLPROPERTY_UNINSTALLABLE</b></dt>
     * <dt>"Uninstallable"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Returns "1" if the patch is marked as possible to uninstall from the product.  In this case, the installer can still block the uninstallation if this patch is required by another patch that cannot be uninstalled.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_PATCHSTATE"></a><a id="installproperty_patchstate"></a><dl>
     * <dt><b>INSTALLPROPERTY_PATCHSTATE</b></dt>
     * <dt>"State"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Returns "1" if this patch is currently applied to the product. Returns "2" if this patch is superseded by another patch. Returns  "4" if this patch is obsolete.   These values correspond to the constants the <i>dwFilter</i> parameter of <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumpatchesexa">MsiEnumPatchesEx</a> uses.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_DISPLAYNAME"></a><a id="installproperty_displayname"></a><dl>
     * <dt><b>INSTALLPROPERTY_DISPLAYNAME</b></dt>
     * <dt>"DisplayName"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Get the registered display name for the patch. For patches that do not
     * include the DisplayName property in the <a href="https://docs.microsoft.com/windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the
     *       returned display name is an empty string ("").
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLPROPERTY_MOREINFOURL"></a><a id="installproperty_moreinfourl"></a><dl>
     * <dt><b>INSTALLPROPERTY_MOREINFOURL</b></dt>
     * <dt>"MoreInfoURL"</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Get the registered support information URL for the patch. For patches that do not include the MoreInfoURL property in the 
     *       <a href="https://docs.microsoft.com/windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the returned support information URL is an
     *       empty string ("").
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} lpValue This parameter is a pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the property value, not including the terminating <b>NULL</b> character.
     * 
     * If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.
     * 
     * If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchValue When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetpatchinfoexw
     * @since windows8.0
     */
    static MsiGetPatchInfoExW(szPatchCode, szProductCode, szUserSid, dwContext, szProperty, lpValue, pcchValue) {
        DllCall("msi.dll\MsiGetPatchInfoExW", "ptr", szPatchCode, "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szProperty, "ptr", lpValue, "ptr", pcchValue)
    }

    /**
     * Applies one or more patches to products eligible to receive the patches. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiApplyMultiplePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPatchPackages A  semicolon-delimited list of the paths to patch files as a single string. For example: ""c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp"   "
     * @param {Pointer<PSTR>} szProductCode This parameter is the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product to be patched. The user or application calling <b>MsiApplyMultiplePatches</b> must have privileges to apply patches. When this parameter is <b>NULL</b>, the patches are applied to all eligible products. When this parameter is non-<b>NULL</b>, the patches are applied only to the specified product.
     * @param {Pointer<PSTR>} szPropertiesList A null-terminated string that specifies command–line property settings used during the patching of products. If there are no command–line property settings, pass in a <b>NULL</b> pointer. An empty string is  an invalid parameter. These properties are shared by all  target products. For more information, see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>.
     * 
     * <div class="alert"><b>Note</b>  The properties list should not contain the  <a href="https://docs.microsoft.com/windows/desktop/Msi/patch">PATCH</a> property. If the <b>PATCH</b> property is set in the command line the value is ignored and is overwritten with the patches being applied.</div>
     * <div> </div>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiapplymultiplepatchesa
     * @since windows8.0
     */
    static MsiApplyMultiplePatchesA(szPatchPackages, szProductCode, szPropertiesList) {
        DllCall("msi.dll\MsiApplyMultiplePatchesA", "ptr", szPatchPackages, "ptr", szProductCode, "ptr", szPropertiesList)
    }

    /**
     * Applies one or more patches to products eligible to receive the patches. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiApplyMultiplePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPatchPackages A  semicolon-delimited list of the paths to patch files as a single string. For example: ""c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp"   "
     * @param {Pointer<PWSTR>} szProductCode This parameter is the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product to be patched. The user or application calling <b>MsiApplyMultiplePatches</b> must have privileges to apply patches. When this parameter is <b>NULL</b>, the patches are applied to all eligible products. When this parameter is non-<b>NULL</b>, the patches are applied only to the specified product.
     * @param {Pointer<PWSTR>} szPropertiesList A null-terminated string that specifies command–line property settings used during the patching of products. If there are no command–line property settings, pass in a <b>NULL</b> pointer. An empty string is  an invalid parameter. These properties are shared by all  target products. For more information, see  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/about-properties">About Properties</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>.
     * 
     * <div class="alert"><b>Note</b>  The properties list should not contain the  <a href="https://docs.microsoft.com/windows/desktop/Msi/patch">PATCH</a> property. If the <b>PATCH</b> property is set in the command line the value is ignored and is overwritten with the patches being applied.</div>
     * <div> </div>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiapplymultiplepatchesw
     * @since windows8.0
     */
    static MsiApplyMultiplePatchesW(szPatchPackages, szProductCode, szPropertiesList) {
        DllCall("msi.dll\MsiApplyMultiplePatchesW", "ptr", szPatchPackages, "ptr", szProductCode, "ptr", szPropertiesList)
    }

    /**
     * Takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the patches to a specified installed product. (ANSI)
     * @remarks
     * Users that do not have administrator privileges  can call this function only in their own or machine context. Users that are administrators can call it for other users.
     * 
     * If this function is called from a custom action it fails and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b>. The function requires MSXML version 3.0 to process XML and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b> if MSXML 3.0 is not installed.
     * 
     * 
     * The <b>MsiDeterminePatchSequence</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.
     * 
     * If the function succeeds, the <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of <b>ERROR_SUCCESS</b> and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.
     * 
     * If the function succeeds, patches excluded from the best patching sequence return a <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  <b>ERROR_SUCCESS</b> indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of <b>ERROR_PATCH_TARGET_NOT_FOUND</b> indicates a patch that is inapplicable to the product.
     * 
     * If the function fails, the <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, <b>ERROR_PATCH_NO_SEQUENCE</b> is returned for patches that have circular sequencing information.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiDeterminePatchSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCode The product that is the target for the set of patches. The value must be the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID for the product.
     * @param {Pointer<PSTR>} szUserSid Null-terminated string  that specifies  a security identifier (SID) of a user. This parameter restricts the context of enumeration for  this user account. This parameter cannot be   the special SID strings "S-1-1-0" (everyone) or "S-1-5-18" (local system). For the machine context <i>dwContext</i> is set to<b> MSIINSTALLCONTEXT_MACHINE</b> and <i>szUserSid</i> must be <b>NULL</b>. 
     * For the current user context <i>szUserSid</i> can be null and  <i>dwContext</i> can be set to <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * @param {Integer} dwContext Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Type of context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for all per-user-managed installations of the product for  the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for all per-user-unmanaged installations for the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for the per-machine installation. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b>  the <i>szUserSid</i> parameter must be null.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} cPatchInfo The number of patches in the array.
     * @param {Pointer<MSIPATCHSEQUENCEINFOA>} pPatchInfo Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structures.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msideterminepatchsequencea
     * @since windows8.0
     */
    static MsiDeterminePatchSequenceA(szProductCode, szUserSid, dwContext, cPatchInfo, pPatchInfo) {
        DllCall("msi.dll\MsiDeterminePatchSequenceA", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "uint", cPatchInfo, "ptr", pPatchInfo)
    }

    /**
     * Takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the patches to a specified installed product. (Unicode)
     * @remarks
     * Users that do not have administrator privileges  can call this function only in their own or machine context. Users that are administrators can call it for other users.
     * 
     * If this function is called from a custom action it fails and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b>. The function requires MSXML version 3.0 to process XML and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b> if MSXML 3.0 is not installed.
     * 
     * 
     * The <b>MsiDeterminePatchSequence</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.
     * 
     * If the function succeeds, the <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of <b>ERROR_SUCCESS</b> and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.
     * 
     * If the function succeeds, patches excluded from the best patching sequence return a <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  <b>ERROR_SUCCESS</b> indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of <b>ERROR_PATCH_TARGET_NOT_FOUND</b> indicates a patch that is inapplicable to the product.
     * 
     * If the function fails, the <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, <b>ERROR_PATCH_NO_SEQUENCE</b> is returned for patches that have circular sequencing information.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiDeterminePatchSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCode The product that is the target for the set of patches. The value must be the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID for the product.
     * @param {Pointer<PWSTR>} szUserSid Null-terminated string  that specifies  a security identifier (SID) of a user. This parameter restricts the context of enumeration for  this user account. This parameter cannot be   the special SID strings "S-1-1-0" (everyone) or "S-1-5-18" (local system). For the machine context <i>dwContext</i> is set to<b> MSIINSTALLCONTEXT_MACHINE</b> and <i>szUserSid</i> must be <b>NULL</b>. 
     * For the current user context <i>szUserSid</i> can be null and  <i>dwContext</i> can be set to <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * @param {Integer} dwContext Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Type of context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for all per-user-managed installations of the product for  the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for all per-user-unmanaged installations for the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Patches are considered for the per-machine installation. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b>  the <i>szUserSid</i> parameter must be null.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} cPatchInfo The number of patches in the array.
     * @param {Pointer<MSIPATCHSEQUENCEINFOW>} pPatchInfo Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structures.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msideterminepatchsequencew
     * @since windows8.0
     */
    static MsiDeterminePatchSequenceW(szProductCode, szUserSid, dwContext, cPatchInfo, pPatchInfo) {
        DllCall("msi.dll\MsiDeterminePatchSequenceW", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "uint", cPatchInfo, "ptr", pPatchInfo)
    }

    /**
     * The MsiDetermineApplicablePatches function takes a set of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer package and in what sequence. (ANSI)
     * @remarks
     * If this function is called from a custom action it fails and returns ERROR_CALL_NOT_IMPLEMENTED.  The function requires MSXML version 3.0 to process XML and returns ERROR_CALL_NOT_IMPLEMENTED if MSXML 3.0 is not installed.
     * 
     * 
     * The <b>MsiDetermineApplicablePatches</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.
     * 
     * If the function succeeds, the <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of ERROR_SUCCESS and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.
     * 
     * If the function succeeds, patches excluded from the best patching sequence return a <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  ERROR_SUCCESS indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of ERROR_PATCH_TARGET_NOT_FOUND indicates a patch that is inapplicable to the product.
     * 
     * If the function fails, the <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, ERROR_PATCH_NO_SEQUENCE is returned for patches that have circular sequencing information.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiDetermineApplicablePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductPackagePath Full path to an .msi file. The function determines the patches that are applicable to this package and in what sequence.
     * @param {Integer} cPatchInfo Number of patches in the array. Must be greater than zero.
     * @param {Pointer<MSIPATCHSEQUENCEINFOA>} pPatchInfo Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structures.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msidetermineapplicablepatchesa
     * @since windows8.0
     */
    static MsiDetermineApplicablePatchesA(szProductPackagePath, cPatchInfo, pPatchInfo) {
        DllCall("msi.dll\MsiDetermineApplicablePatchesA", "ptr", szProductPackagePath, "uint", cPatchInfo, "ptr", pPatchInfo)
    }

    /**
     * The MsiDetermineApplicablePatches function takes a set of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer package and in what sequence. (Unicode)
     * @remarks
     * If this function is called from a custom action it fails and returns ERROR_CALL_NOT_IMPLEMENTED.  The function requires MSXML version 3.0 to process XML and returns ERROR_CALL_NOT_IMPLEMENTED if MSXML 3.0 is not installed.
     * 
     * 
     * The <b>MsiDetermineApplicablePatches</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.
     * 
     * If the function succeeds, the <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of ERROR_SUCCESS and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.
     * 
     * If the function succeeds, patches excluded from the best patching sequence return a <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  ERROR_SUCCESS indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of ERROR_PATCH_TARGET_NOT_FOUND indicates a patch that is inapplicable to the product.
     * 
     * If the function fails, the <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, ERROR_PATCH_NO_SEQUENCE is returned for patches that have circular sequencing information.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiDetermineApplicablePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductPackagePath Full path to an .msi file. The function determines the patches that are applicable to this package and in what sequence.
     * @param {Integer} cPatchInfo Number of patches in the array. Must be greater than zero.
     * @param {Pointer<MSIPATCHSEQUENCEINFOW>} pPatchInfo Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msipatchsequenceinfoa">MSIPATCHSEQUENCEINFO</a> structures.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msidetermineapplicablepatchesw
     * @since windows8.0
     */
    static MsiDetermineApplicablePatchesW(szProductPackagePath, cPatchInfo, pPatchInfo) {
        DllCall("msi.dll\MsiDetermineApplicablePatchesW", "ptr", szProductPackagePath, "uint", cPatchInfo, "ptr", pPatchInfo)
    }

    /**
     * Enumerates all patches in a specific context or across all contexts. (ANSI)
     * @remarks
     * Non-administrators can  enumerate patches within  their visibility only. Administrators can enumerate patches for other user contexts.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumPatchesEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCode A null-terminated string that specifies the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product whose patches are enumerated. If non-<b>NULL</b>, patch enumeration is restricted to instances of this product under the user and context specified by <i>szUserSid</i> and <i>dwContext</i>. If <b>NULL</b>, the patches for all products under the specified context are enumerated.
     * @param {Pointer<PSTR>} szUserSid A null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string "S-1-1-0" (Everyone) specifies enumeration across all users in the system. A SID value other than "S-1-1-0" is considered a user SID and restricts enumeration to that user.  When enumerating for a user other than current user, any patches that were applied in a per-user-unmanaged context using a version less than Windows Installer version 3.0, are not enumerated. This parameter can be set to <b>NULL</b> to specify the current user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (System) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the  enumeration to one or a combination of contexts. This parameter can be any one or a combination of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration that is extended to all per-user-managed installations for the users that <i>szUserSid</i> specifies. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * In this context, only patches installed with Windows Installer version 3.0 are enumerated for users that are not the current user.  For the current user, the function enumerates all installed and new  patches. An invalid SID for <i>szUserSid</i> returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration that is  extended to all per-machine installations. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSid</i> parameter must be <b>NULL</b>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwFilter The filter for enumeration. This parameter can be one or a combination of the following parameters.
     * 
     * <table>
     * <tr>
     * <th>Filter</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_APPLIED"></a><a id="msipatchstate_applied"></a><dl>
     * <dt><b>MSIPATCHSTATE_APPLIED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that have been applied. Enumeration does not include superseded or obsolete patches.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_SUPERSEDED"></a><a id="msipatchstate_superseded"></a><dl>
     * <dt><b>MSIPATCHSTATE_SUPERSEDED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are marked as superseded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_OBSOLETED"></a><a id="msipatchstate_obsoleted"></a><dl>
     * <dt><b>MSIPATCHSTATE_OBSOLETED</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are marked as obsolete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_REGISTERED"></a><a id="msipatchstate_registered"></a><dl>
     * <dt><b>MSIPATCHSTATE_REGISTERED</b></dt>
     * <dt>8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are registered but not yet applied. The <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistaddsourceexa">MsiSourceListAddSourceEx</a> function can register new patches.
     * 
     * <div class="alert"><b>Note</b>  Patches registered for users other than current user and applied in the per-user-unmanaged context are not enumerated.</div>
     * <div> </div>
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_ALL"></a><a id="msipatchstate_all"></a><dl>
     * <dt><b>MSIPATCHSTATE_ALL</b></dt>
     * <dt>15</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes all applied, obsolete, superseded, and registered patches.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the patch to retrieve. This parameter must be zero for the first call to the <b>MsiEnumPatchesEx</b> function and then incremented for subsequent calls. The <i>dwIndex</i> parameter should be incremented only if the previous call returned ERROR_SUCCESS.
     * @param {Pointer<PSTR>} szPatchCode An output buffer to contain the GUID of the patch being enumerated. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.
     * @param {Pointer<PSTR>} szTargetProductCode An output buffer to contain the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that receives this patch. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.
     * @param {Pointer<Int32>} pdwTargetProductContext Returns the context of the patch being enumerated. The output value can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b>,  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>, or <b>MSIINSTALLCONTEXT_MACHINE</b>. This parameter can be <b>NULL</b>.
     * @param {Pointer<PSTR>} szTargetUserSid An output buffer that receives  the string SID of the account under which this patch instance exists. This buffer returns an empty string for a per-machine context.
     * 
     * This buffer should be large enough to contain the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * If the <i>szTargetUserSid</i> is set to <b>NULL</b> and <i>pcchTargetUserSid</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>szTargetUserSid</i> buffer large enough to contain *<i>pcchTargetUserSid</i> + 1 characters.
     * 
     * If <i>szTargetUserSid</i> and <i>pcchTargetUserSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchTargetUserSid A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szTargetUserSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szTargetUserSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumpatchesexa
     * @since windows8.0
     */
    static MsiEnumPatchesExA(szProductCode, szUserSid, dwContext, dwFilter, dwIndex, szPatchCode, szTargetProductCode, pdwTargetProductContext, szTargetUserSid, pcchTargetUserSid) {
        DllCall("msi.dll\MsiEnumPatchesExA", "ptr", szProductCode, "ptr", szUserSid, "uint", dwContext, "uint", dwFilter, "uint", dwIndex, "ptr", szPatchCode, "ptr", szTargetProductCode, "ptr", pdwTargetProductContext, "ptr", szTargetUserSid, "ptr", pcchTargetUserSid)
    }

    /**
     * Enumerates all patches in a specific context or across all contexts. (Unicode)
     * @remarks
     * Non-administrators can  enumerate patches within  their visibility only. Administrators can enumerate patches for other user contexts.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumPatchesEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCode A null-terminated string that specifies the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product whose patches are enumerated. If non-<b>NULL</b>, patch enumeration is restricted to instances of this product under the user and context specified by <i>szUserSid</i> and <i>dwContext</i>. If <b>NULL</b>, the patches for all products under the specified context are enumerated.
     * @param {Pointer<PWSTR>} szUserSid A null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string "S-1-1-0" (Everyone) specifies enumeration across all users in the system. A SID value other than "S-1-1-0" is considered a user SID and restricts enumeration to that user.  When enumerating for a user other than current user, any patches that were applied in a per-user-unmanaged context using a version less than Windows Installer version 3.0, are not enumerated. This parameter can be set to <b>NULL</b> to specify the current user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (System) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the  enumeration to one or a combination of contexts. This parameter can be any one or a combination of the  following values.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration that is extended to all per-user-managed installations for the users that <i>szUserSid</i> specifies. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * In this context, only patches installed with Windows Installer version 3.0 are enumerated for users that are not the current user.  For the current user, the function enumerates all installed and new  patches. An invalid SID for <i>szUserSid</i> returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration that is  extended to all per-machine installations. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSid</i> parameter must be <b>NULL</b>.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwFilter The filter for enumeration. This parameter can be one or a combination of the following parameters.
     * 
     * <table>
     * <tr>
     * <th>Filter</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_APPLIED"></a><a id="msipatchstate_applied"></a><dl>
     * <dt><b>MSIPATCHSTATE_APPLIED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that have been applied. Enumeration does not include superseded or obsolete patches.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_SUPERSEDED"></a><a id="msipatchstate_superseded"></a><dl>
     * <dt><b>MSIPATCHSTATE_SUPERSEDED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are marked as superseded.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_OBSOLETED"></a><a id="msipatchstate_obsoleted"></a><dl>
     * <dt><b>MSIPATCHSTATE_OBSOLETED</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are marked as obsolete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_REGISTERED"></a><a id="msipatchstate_registered"></a><dl>
     * <dt><b>MSIPATCHSTATE_REGISTERED</b></dt>
     * <dt>8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes patches that are registered but not yet applied. The <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistaddsourceexa">MsiSourceListAddSourceEx</a> function can register new patches.
     * 
     * <div class="alert"><b>Note</b>  Patches registered for users other than current user and applied in the per-user-unmanaged context are not enumerated.</div>
     * <div> </div>
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIPATCHSTATE_ALL"></a><a id="msipatchstate_all"></a><dl>
     * <dt><b>MSIPATCHSTATE_ALL</b></dt>
     * <dt>15</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The enumeration includes all applied, obsolete, superseded, and registered patches.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the patch to retrieve. This parameter must be zero for the first call to the <b>MsiEnumPatchesEx</b> function and then incremented for subsequent calls. The <i>dwIndex</i> parameter should be incremented only if the previous call returned ERROR_SUCCESS.
     * @param {Pointer<PWSTR>} szPatchCode An output buffer to contain the GUID of the patch being enumerated. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szTargetProductCode An output buffer to contain the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that receives this patch. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.
     * @param {Pointer<Int32>} pdwTargetProductContext Returns the context of the patch being enumerated. The output value can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b>,  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>, or <b>MSIINSTALLCONTEXT_MACHINE</b>. This parameter can be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szTargetUserSid An output buffer that receives  the string SID of the account under which this patch instance exists. This buffer returns an empty string for a per-machine context.
     * 
     * This buffer should be large enough to contain the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * If the <i>szTargetUserSid</i> is set to <b>NULL</b> and <i>pcchTargetUserSid</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>szTargetUserSid</i> buffer large enough to contain *<i>pcchTargetUserSid</i> + 1 characters.
     * 
     * If <i>szTargetUserSid</i> and <i>pcchTargetUserSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchTargetUserSid A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szTargetUserSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szTargetUserSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumpatchesexw
     * @since windows8.0
     */
    static MsiEnumPatchesExW(szProductCode, szUserSid, dwContext, dwFilter, dwIndex, szPatchCode, szTargetProductCode, pdwTargetProductContext, szTargetUserSid, pcchTargetUserSid) {
        DllCall("msi.dll\MsiEnumPatchesExW", "ptr", szProductCode, "ptr", szUserSid, "uint", dwContext, "uint", dwFilter, "uint", dwIndex, "ptr", szPatchCode, "ptr", szTargetProductCode, "ptr", pdwTargetProductContext, "ptr", szTargetUserSid, "ptr", pcchTargetUserSid)
    }

    /**
     * The MsiQueryFeatureState function returns the installed state for a product feature. (ANSI)
     * @remarks
     * The 
     * <b>MsiQueryFeatureState</b> function does not validate that the feature is actually accessible.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiQueryFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product that contains the feature of interest.
     * @param {Pointer<PSTR>} szFeature Identifies the feature of interest.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiqueryfeaturestatea
     * @since windows8.0
     */
    static MsiQueryFeatureStateA(szProduct, szFeature) {
        DllCall("msi.dll\MsiQueryFeatureStateA", "ptr", szProduct, "ptr", szFeature)
    }

    /**
     * The MsiQueryFeatureState function returns the installed state for a product feature. (Unicode)
     * @remarks
     * The 
     * <b>MsiQueryFeatureState</b> function does not validate that the feature is actually accessible.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiQueryFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product that contains the feature of interest.
     * @param {Pointer<PWSTR>} szFeature Identifies the feature of interest.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiqueryfeaturestatew
     * @since windows8.0
     */
    static MsiQueryFeatureStateW(szProduct, szFeature) {
        DllCall("msi.dll\MsiQueryFeatureStateW", "ptr", szProduct, "ptr", szFeature)
    }

    /**
     * The MsiQueryFeatureStateEx function returns the installed state for a product feature. (ANSI)
     * @remarks
     * The 
     * <b>MsiQueryFeatureStateEx</b> function does not validate that the feature is actually accessible. The <b>MsiQueryFeatureStateEx</b> function does not validate the  feature ID. <b>ERROR_UNKNOWN_FEATURE</b> is returned for any unknown feature ID. When the query is made on a product installed under the per-user-unmanaged context  for a user account other than the current user, the function fails.  In this case the function returns <b>ERROR_UNKNOWN_FEATURE</b>, or if the product is advertised only  (not installed),   <b>ERROR_UNKNOWN_PRODUCT</b> is returned.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiQueryFeatureStateEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCode <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that contains the feature of interest.
     * @param {Pointer<PSTR>} szUserSid Specifies the security identifier (SID) of the account, under which, the instance of the product being queried exists. If <i>dwContext</i> is not <b>MSIINSTALLCONTEXT_MACHINE</b>,  a null value specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b>NULL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * NULL denotes the currently logged on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate features of products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-user-managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-user-unmanaged instance of the product.
     * 
     * <div class="alert"><b>Note</b>  When the query is made on a product installed under the per-user-unmanaged context for a user account other than the current user, the function fails.</div>
     * <div> </div>
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szFeature Specifies the feature being queried. Identifier of the feature as found in the <b>Feature</b> column of the <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a>.
     * @param {Pointer<Int32>} pdwState Installation state of the feature for the specified product instance. This parameter can return one of the following or null.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_ADVERTISED"></a><a id="installstate_advertised"></a><dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This feature is advertised.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_LOCAL"></a><a id="installstate_local"></a><dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_SOURCE"></a><a id="installstate_source"></a><dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed to run from source.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiqueryfeaturestateexa
     * @since windows8.0
     */
    static MsiQueryFeatureStateExA(szProductCode, szUserSid, dwContext, szFeature, pdwState) {
        DllCall("msi.dll\MsiQueryFeatureStateExA", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szFeature, "ptr", pdwState)
    }

    /**
     * The MsiQueryFeatureStateEx function returns the installed state for a product feature. (Unicode)
     * @remarks
     * The 
     * <b>MsiQueryFeatureStateEx</b> function does not validate that the feature is actually accessible. The <b>MsiQueryFeatureStateEx</b> function does not validate the  feature ID. <b>ERROR_UNKNOWN_FEATURE</b> is returned for any unknown feature ID. When the query is made on a product installed under the per-user-unmanaged context  for a user account other than the current user, the function fails.  In this case the function returns <b>ERROR_UNKNOWN_FEATURE</b>, or if the product is advertised only  (not installed),   <b>ERROR_UNKNOWN_PRODUCT</b> is returned.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiQueryFeatureStateEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCode <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that contains the feature of interest.
     * @param {Pointer<PWSTR>} szUserSid Specifies the security identifier (SID) of the account, under which, the instance of the product being queried exists. If <i>dwContext</i> is not <b>MSIINSTALLCONTEXT_MACHINE</b>,  a null value specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b>NULL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * NULL denotes the currently logged on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate features of products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-user-managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-user-unmanaged instance of the product.
     * 
     * <div class="alert"><b>Note</b>  When the query is made on a product installed under the per-user-unmanaged context for a user account other than the current user, the function fails.</div>
     * <div> </div>
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the feature state for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szFeature Specifies the feature being queried. Identifier of the feature as found in the <b>Feature</b> column of the <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a>.
     * @param {Pointer<Int32>} pdwState Installation state of the feature for the specified product instance. This parameter can return one of the following or null.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_ADVERTISED"></a><a id="installstate_advertised"></a><dl>
     * <dt><b>INSTALLSTATE_ADVERTISED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This feature is advertised.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_LOCAL"></a><a id="installstate_local"></a><dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_SOURCE"></a><a id="installstate_source"></a><dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The feature is installed to run from source.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiqueryfeaturestateexw
     * @since windows8.0
     */
    static MsiQueryFeatureStateExW(szProductCode, szUserSid, dwContext, szFeature, pdwState) {
        DllCall("msi.dll\MsiQueryFeatureStateExW", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szFeature, "ptr", pdwState)
    }

    /**
     * The MsiUseFeature function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature. (ANSI)
     * @remarks
     * The 
     * <b>MsiUseFeature</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling 
     * <b>MsiUseFeature</b> by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiqueryfeaturestatea">MsiQueryFeatureState</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumfeaturesa">MsiEnumFeatures</a>. The application should make these calls while it initializes. An application should only use features that are known to be published.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiUseFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product that owns the feature to be used.
     * @param {Pointer<PSTR>} szFeature Identifies the feature to be used.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiusefeaturea
     * @since windows8.0
     */
    static MsiUseFeatureA(szProduct, szFeature) {
        DllCall("msi.dll\MsiUseFeatureA", "ptr", szProduct, "ptr", szFeature)
    }

    /**
     * The MsiUseFeature function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature. (Unicode)
     * @remarks
     * The 
     * <b>MsiUseFeature</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling 
     * <b>MsiUseFeature</b> by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiqueryfeaturestatea">MsiQueryFeatureState</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumfeaturesa">MsiEnumFeatures</a>. The application should make these calls while it initializes. An application should only use features that are known to be published.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiUseFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product that owns the feature to be used.
     * @param {Pointer<PWSTR>} szFeature Identifies the feature to be used.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiusefeaturew
     * @since windows8.0
     */
    static MsiUseFeatureW(szProduct, szFeature) {
        DllCall("msi.dll\MsiUseFeatureW", "ptr", szProduct, "ptr", szFeature)
    }

    /**
     * The MsiUseFeatureEx function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature. (ANSI)
     * @remarks
     * The 
     * <b>MsiUseFeatureEx</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiqueryfeaturestatea">MsiQueryFeatureState</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumfeaturesa">MsiEnumFeatures</a>. The application should make these calls while it initializes. An application should only use features that are known to be published.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiUseFeatureEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product that owns the feature to be used.
     * @param {Pointer<PSTR>} szFeature Identifies the feature to be used.
     * @param {Integer} dwInstallMode This parameter can have the following value. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMODE_NODETECTION"></a><a id="installmode_nodetection"></a><dl>
     * <dt><b>INSTALLMODE_NODETECTION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Return value indicates the installation state.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiusefeatureexa
     * @since windows8.0
     */
    static MsiUseFeatureExA(szProduct, szFeature, dwInstallMode) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiUseFeatureExA", "ptr", szProduct, "ptr", szFeature, "uint", dwInstallMode, "uint", dwReserved)
    }

    /**
     * The MsiUseFeatureEx function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature. (Unicode)
     * @remarks
     * The 
     * <b>MsiUseFeatureEx</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiqueryfeaturestatea">MsiQueryFeatureState</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumfeaturesa">MsiEnumFeatures</a>. The application should make these calls while it initializes. An application should only use features that are known to be published.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiUseFeatureEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product that owns the feature to be used.
     * @param {Pointer<PWSTR>} szFeature Identifies the feature to be used.
     * @param {Integer} dwInstallMode This parameter can have the following value. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMODE_NODETECTION"></a><a id="installmode_nodetection"></a><dl>
     * <dt><b>INSTALLMODE_NODETECTION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Return value indicates the installation state.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiusefeatureexw
     * @since windows8.0
     */
    static MsiUseFeatureExW(szProduct, szFeature, dwInstallMode) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiUseFeatureExW", "ptr", szProduct, "ptr", szFeature, "uint", dwInstallMode, "uint", dwReserved)
    }

    /**
     * The MsiGetFeatureUsage function returns the usage metrics for a product feature. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiGetFeatureUsage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product that contains the feature.
     * @param {Pointer<PSTR>} szFeature Specifies the feature code for the feature for which metrics are to be returned.
     * @param {Pointer<UInt32>} pdwUseCount Indicates the number of times the feature has been used.
     * @param {Pointer<UInt16>} pwDateUsed Specifies the date that the feature was last used. The date is in the MS-DOS date format, as shown in the following table. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Bits</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0 – 4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Day of the month (1-31)
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>5 – 8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Month (1 = January, 2 = February, and so on)
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>9 – 15</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Year offset from 1980 (add 1980 to get actual year)
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetfeatureusagea
     * @since windows8.0
     */
    static MsiGetFeatureUsageA(szProduct, szFeature, pdwUseCount, pwDateUsed) {
        DllCall("msi.dll\MsiGetFeatureUsageA", "ptr", szProduct, "ptr", szFeature, "ptr", pdwUseCount, "ptr", pwDateUsed)
    }

    /**
     * The MsiGetFeatureUsage function returns the usage metrics for a product feature. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiGetFeatureUsage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product that contains the feature.
     * @param {Pointer<PWSTR>} szFeature Specifies the feature code for the feature for which metrics are to be returned.
     * @param {Pointer<UInt32>} pdwUseCount Indicates the number of times the feature has been used.
     * @param {Pointer<UInt16>} pwDateUsed Specifies the date that the feature was last used. The date is in the MS-DOS date format, as shown in the following table. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Bits</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0 – 4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Day of the month (1-31)
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>5 – 8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Month (1 = January, 2 = February, and so on)
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>9 – 15</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Year offset from 1980 (add 1980 to get actual year)
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetfeatureusagew
     * @since windows8.0
     */
    static MsiGetFeatureUsageW(szProduct, szFeature, pdwUseCount, pwDateUsed) {
        DllCall("msi.dll\MsiGetFeatureUsageW", "ptr", szProduct, "ptr", szFeature, "ptr", pdwUseCount, "ptr", pwDateUsed)
    }

    /**
     * The MsiConfigureFeature function configures the installed state for a product feature. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiConfigureFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product to be configured.
     * @param {Pointer<PSTR>} szFeature Specifies the feature ID for the feature to be configured.
     * @param {Integer} eInstallState 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiconfigurefeaturea
     * @since windows8.0
     */
    static MsiConfigureFeatureA(szProduct, szFeature, eInstallState) {
        DllCall("msi.dll\MsiConfigureFeatureA", "ptr", szProduct, "ptr", szFeature, "int", eInstallState)
    }

    /**
     * The MsiConfigureFeature function configures the installed state for a product feature. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiConfigureFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product to be configured.
     * @param {Pointer<PWSTR>} szFeature Specifies the feature ID for the feature to be configured.
     * @param {Integer} eInstallState 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiconfigurefeaturew
     * @since windows8.0
     */
    static MsiConfigureFeatureW(szProduct, szFeature, eInstallState) {
        DllCall("msi.dll\MsiConfigureFeatureW", "ptr", szProduct, "ptr", szFeature, "int", eInstallState)
    }

    /**
     * Reinstalls features. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiReinstallFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product that contains the feature to be reinstalled.
     * @param {Pointer<PSTR>} szFeature Specifies the feature to be reinstalled. The parent feature or child feature of the specified feature is not reinstalled. To reinstall the parent or child feature, you must call the <b>MsiReinstallFeature</b>   function for each separately or use the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallproducta">MsiReinstallProduct</a> function.
     * @param {Integer} dwReinstallMode 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msireinstallfeaturea
     * @since windows8.0
     */
    static MsiReinstallFeatureA(szProduct, szFeature, dwReinstallMode) {
        DllCall("msi.dll\MsiReinstallFeatureA", "ptr", szProduct, "ptr", szFeature, "uint", dwReinstallMode)
    }

    /**
     * Reinstalls features. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiReinstallFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product that contains the feature to be reinstalled.
     * @param {Pointer<PWSTR>} szFeature Specifies the feature to be reinstalled. The parent feature or child feature of the specified feature is not reinstalled. To reinstall the parent or child feature, you must call the <b>MsiReinstallFeature</b>   function for each separately or use the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallproducta">MsiReinstallProduct</a> function.
     * @param {Integer} dwReinstallMode 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msireinstallfeaturew
     * @since windows8.0
     */
    static MsiReinstallFeatureW(szProduct, szFeature, dwReinstallMode) {
        DllCall("msi.dll\MsiReinstallFeatureW", "ptr", szProduct, "ptr", szFeature, "uint", dwReinstallMode)
    }

    /**
     * The MsiProvideComponent function returns the full component path, performing any necessary installation. This function prompts for source if necessary and increments the usage count for the feature. (ANSI)
     * @remarks
     * Upon success of the 
     * <b>MsiProvideComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.
     * 
     * The 
     * <b>MsiProvideComponent</b> function combines the functionality of 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msigetcomponentpatha">MsiGetComponentPath</a>. You can use the 
     * <b>MsiProvideComponent</b> function to simplify the calling sequence. However, because this function increments the usage count, use it with caution to prevent inaccurate usage counts. The 
     * <b>MsiProvideComponent</b> function also provides less flexibility than the series of individual calls.
     * 
     * If the application is recovering from an unexpected situation, the application has probably already called 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> and incremented the usage count. In this case, the application should call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a> instead of 
     * <b>MsiProvideComponent</b> to avoid incrementing the count again.
     * 
     * The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.
     * 
     * Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallfeaturea">MsiReinstallFeature</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiProvideComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product that contains the feature with the necessary component.
     * @param {Pointer<PSTR>} szFeature Specifies the feature ID of the feature with the necessary component.
     * @param {Pointer<PSTR>} szComponent Specifies the component code of the necessary component.
     * @param {Integer} dwInstallMode 
     * @param {Pointer<PSTR>} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiprovidecomponenta
     * @since windows8.0
     */
    static MsiProvideComponentA(szProduct, szFeature, szComponent, dwInstallMode, lpPathBuf, pcchPathBuf) {
        DllCall("msi.dll\MsiProvideComponentA", "ptr", szProduct, "ptr", szFeature, "ptr", szComponent, "uint", dwInstallMode, "ptr", lpPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiProvideComponent function returns the full component path, performing any necessary installation. This function prompts for source if necessary and increments the usage count for the feature. (Unicode)
     * @remarks
     * Upon success of the 
     * <b>MsiProvideComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.
     * 
     * The 
     * <b>MsiProvideComponent</b> function combines the functionality of 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msigetcomponentpatha">MsiGetComponentPath</a>. You can use the 
     * <b>MsiProvideComponent</b> function to simplify the calling sequence. However, because this function increments the usage count, use it with caution to prevent inaccurate usage counts. The 
     * <b>MsiProvideComponent</b> function also provides less flexibility than the series of individual calls.
     * 
     * If the application is recovering from an unexpected situation, the application has probably already called 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> and incremented the usage count. In this case, the application should call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a> instead of 
     * <b>MsiProvideComponent</b> to avoid incrementing the count again.
     * 
     * The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.
     * 
     * Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallfeaturea">MsiReinstallFeature</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiProvideComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product that contains the feature with the necessary component.
     * @param {Pointer<PWSTR>} szFeature Specifies the feature ID of the feature with the necessary component.
     * @param {Pointer<PWSTR>} szComponent Specifies the component code of the necessary component.
     * @param {Integer} dwInstallMode 
     * @param {Pointer<PWSTR>} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiprovidecomponentw
     * @since windows8.0
     */
    static MsiProvideComponentW(szProduct, szFeature, szComponent, dwInstallMode, lpPathBuf, pcchPathBuf) {
        DllCall("msi.dll\MsiProvideComponentW", "ptr", szProduct, "ptr", szFeature, "ptr", szComponent, "uint", dwInstallMode, "ptr", lpPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiProvideQualifiedComponent function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature. (ANSI)
     * @remarks
     * Upon success of the 
     * <b>MsiProvideQualifiedComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.
     * 
     * Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallfeaturea">MsiReinstallFeature</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiProvideQualifiedComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szCategory Specifies the component ID  for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.
     * @param {Pointer<PSTR>} szQualifier Specifies a qualifier into a list of advertising components (from 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).
     * @param {Integer} dwInstallMode 
     * @param {Pointer<PSTR>} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiprovidequalifiedcomponenta
     * @since windows8.0
     */
    static MsiProvideQualifiedComponentA(szCategory, szQualifier, dwInstallMode, lpPathBuf, pcchPathBuf) {
        DllCall("msi.dll\MsiProvideQualifiedComponentA", "ptr", szCategory, "ptr", szQualifier, "uint", dwInstallMode, "ptr", lpPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiProvideQualifiedComponent function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature. (Unicode)
     * @remarks
     * Upon success of the 
     * <b>MsiProvideQualifiedComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.
     * 
     * Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallfeaturea">MsiReinstallFeature</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiProvideQualifiedComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szCategory Specifies the component ID  for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.
     * @param {Pointer<PWSTR>} szQualifier Specifies a qualifier into a list of advertising components (from 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).
     * @param {Integer} dwInstallMode 
     * @param {Pointer<PWSTR>} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiprovidequalifiedcomponentw
     * @since windows8.0
     */
    static MsiProvideQualifiedComponentW(szCategory, szQualifier, dwInstallMode, lpPathBuf, pcchPathBuf) {
        DllCall("msi.dll\MsiProvideQualifiedComponentW", "ptr", szCategory, "ptr", szQualifier, "uint", dwInstallMode, "ptr", lpPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiProvideQualifiedComponentEx function returns the full component path for a qualified component that is published by a product and performs any necessary installation. (ANSI)
     * @remarks
     * Upon success of the 
     * <b>MsiProvideQualifiedComponentEx</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.
     * 
     * Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallfeaturea">MsiReinstallFeature</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiProvideQualifiedComponentEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szCategory Specifies the component ID that for the requested component. This may not be the GUID for the component itself but rather a server that provides the correct functionality, as in the ComponentId column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.
     * @param {Pointer<PSTR>} szQualifier Specifies a qualifier into a list of advertising components (from 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).
     * @param {Integer} dwInstallMode 
     * @param {Pointer<PSTR>} szProduct Specifies the product to match that has published the qualified component. If this is null, then this API works the same as 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiprovidequalifiedcomponenta">MsiProvideQualifiedComponent</a>.
     * @param {Pointer<PSTR>} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiprovidequalifiedcomponentexa
     * @since windows8.0
     */
    static MsiProvideQualifiedComponentExA(szCategory, szQualifier, dwInstallMode, szProduct, lpPathBuf, pcchPathBuf) {
        static dwUnused1 := 0, dwUnused2 := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiProvideQualifiedComponentExA", "ptr", szCategory, "ptr", szQualifier, "uint", dwInstallMode, "ptr", szProduct, "uint", dwUnused1, "uint", dwUnused2, "ptr", lpPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiProvideQualifiedComponentEx function returns the full component path for a qualified component that is published by a product and performs any necessary installation. (Unicode)
     * @remarks
     * Upon success of the 
     * <b>MsiProvideQualifiedComponentEx</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.
     * 
     * Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallfeaturea">MsiReinstallFeature</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiProvideQualifiedComponentEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szCategory Specifies the component ID that for the requested component. This may not be the GUID for the component itself but rather a server that provides the correct functionality, as in the ComponentId column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.
     * @param {Pointer<PWSTR>} szQualifier Specifies a qualifier into a list of advertising components (from 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).
     * @param {Integer} dwInstallMode 
     * @param {Pointer<PWSTR>} szProduct Specifies the product to match that has published the qualified component. If this is null, then this API works the same as 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiprovidequalifiedcomponenta">MsiProvideQualifiedComponent</a>.
     * @param {Pointer<PWSTR>} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiprovidequalifiedcomponentexw
     * @since windows8.0
     */
    static MsiProvideQualifiedComponentExW(szCategory, szQualifier, dwInstallMode, szProduct, lpPathBuf, pcchPathBuf) {
        static dwUnused1 := 0, dwUnused2 := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiProvideQualifiedComponentExW", "ptr", szCategory, "ptr", szQualifier, "uint", dwInstallMode, "ptr", szProduct, "uint", dwUnused1, "uint", dwUnused2, "ptr", lpPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiGetComponentPath function returns the full path to an installed component. If the key path for the component is a registry key then the registry key is returned. (ANSI)
     * @remarks
     * Upon success of the 
     * <b>MsiGetComponentPath</b> function, the <i>pcchBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.
     * 
     * The 
     * <b>MsiGetComponentPath</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:
     * 
     * <ul>
     * <li>INSTALLSTATE_ABSENT 
     * 
     * 
     * The application did not properly ensure that the feature was installed by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> and, if necessary, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>.
     * 
     * </li>
     * <li>INSTALLSTATE_UNKNOWN 
     * 
     * 
     * The feature is not published. The application should have determined this earlier by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiqueryfeaturestatea">MsiQueryFeatureState</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumfeaturesa">MsiEnumFeatures</a>. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> as well, either 
     * <b>MsiUseFeature</b> was not called, or its return value was not properly checked.
     * 
     * </li>
     * </ul>
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetComponentPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the client product.
     * @param {Pointer<PSTR>} szComponent Specifies the component ID of the component to be located.
     * @param {Pointer<PSTR>} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft\". The registry roots returned on 32-bit operating systems are defined as shown in the following table. 
     * 
     * 
     * 
     * 
     * <div class="alert"><b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
     * For example, a registry key path of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft\", if the component path is a registry key on a 64-bit operating system.</div>
     * <div> </div>
     * 
     * 
     * <table>
     * <tr>
     * <th>Root</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CLASSES_ROOT"></a><a id="hkey_classes_root"></a><dl>
     * <dt><b>HKEY_CLASSES_ROOT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 00
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CURRENT_USER"></a><a id="hkey_current_user"></a><dl>
     * <dt><b>HKEY_CURRENT_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 01
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_LOCAL_MACHINE"></a><a id="hkey_local_machine"></a><dl>
     * <dt><b>HKEY_LOCAL_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 02
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_USERS"></a><a id="hkey_users"></a><dl>
     * <dt><b>HKEY_USERS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 03
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} pcchBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetcomponentpatha
     * @since windows8.0
     */
    static MsiGetComponentPathA(szProduct, szComponent, lpPathBuf, pcchBuf) {
        DllCall("msi.dll\MsiGetComponentPathA", "ptr", szProduct, "ptr", szComponent, "ptr", lpPathBuf, "ptr", pcchBuf)
    }

    /**
     * The MsiGetComponentPath function returns the full path to an installed component. If the key path for the component is a registry key then the registry key is returned. (Unicode)
     * @remarks
     * Upon success of the 
     * <b>MsiGetComponentPath</b> function, the <i>pcchBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.
     * 
     * The 
     * <b>MsiGetComponentPath</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:
     * 
     * <ul>
     * <li>INSTALLSTATE_ABSENT 
     * 
     * 
     * The application did not properly ensure that the feature was installed by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> and, if necessary, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>.
     * 
     * </li>
     * <li>INSTALLSTATE_UNKNOWN 
     * 
     * 
     * The feature is not published. The application should have determined this earlier by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiqueryfeaturestatea">MsiQueryFeatureState</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumfeaturesa">MsiEnumFeatures</a>. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> as well, either 
     * <b>MsiUseFeature</b> was not called, or its return value was not properly checked.
     * 
     * </li>
     * </ul>
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetComponentPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the client product.
     * @param {Pointer<PWSTR>} szComponent Specifies the component ID of the component to be located.
     * @param {Pointer<PWSTR>} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft\". The registry roots returned on 32-bit operating systems are defined as shown in the following table. 
     * 
     * 
     * 
     * 
     * <div class="alert"><b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
     * For example, a registry key path of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft\", if the component path is a registry key on a 64-bit operating system.</div>
     * <div> </div>
     * 
     * 
     * <table>
     * <tr>
     * <th>Root</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CLASSES_ROOT"></a><a id="hkey_classes_root"></a><dl>
     * <dt><b>HKEY_CLASSES_ROOT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 00
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CURRENT_USER"></a><a id="hkey_current_user"></a><dl>
     * <dt><b>HKEY_CURRENT_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 01
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_LOCAL_MACHINE"></a><a id="hkey_local_machine"></a><dl>
     * <dt><b>HKEY_LOCAL_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 02
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_USERS"></a><a id="hkey_users"></a><dl>
     * <dt><b>HKEY_USERS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 03
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} pcchBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetcomponentpathw
     * @since windows8.0
     */
    static MsiGetComponentPathW(szProduct, szComponent, lpPathBuf, pcchBuf) {
        DllCall("msi.dll\MsiGetComponentPathW", "ptr", szProduct, "ptr", szComponent, "ptr", lpPathBuf, "ptr", pcchBuf)
    }

    /**
     * Returns the full path to an installed component. (ANSI)
     * @remarks
     * The 
     * <b>MsiGetComponentPathEx</b> function might return <b>INSTALLSTATE_ABSENT</b> or <b>INSTALL_STATE_UNKNOWN</b>, for the following reasons:
     * 
     * <ul>
     * <li>INSTALLSTATE_ABSENT 
     * 
     * 
     * The application did not properly ensure that the feature was installed by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> and, if necessary, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>.
     * 
     * </li>
     * <li>INSTALLSTATE_UNKNOWN 
     * 
     * 
     * The feature is not published. The application should have determined this earlier by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiqueryfeaturestatea">MsiQueryFeatureState</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumfeaturesa">MsiEnumFeatures</a>. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> as well, either 
     * <b>MsiUseFeature</b> was not called, or its return value was not properly checked.
     * 
     * </li>
     * </ul>
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetComponentPathEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCode A null-terminated string value that specifies an application's product code GUID. The function gets  the path of installed components used by this application.
     * @param {Pointer<PSTR>} szComponentCode A null-terminated string value that specifies a component code GUID. The function gets the path of an installed component having this component code.
     * @param {Pointer<PSTR>} szUserSid A  null-terminated string value that specifies the security identifier (SID) for a user in the system.  The function gets the paths of installed components  of applications installed under the user accounts identified by this SID. The special SID string s-1-1-0 (Everyone) specifies all users in the system. If this parameter is <b>NULL</b>, the function gets the path of an installed component for the currently logged-on user only.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies a particular user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to search applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Pointer<PSTR>} lpOutPathBuffer A string value that receives the path to the component. This parameter can be <b>NULL</b>. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft\". The registry roots returned on 32-bit operating systems are defined as shown in the following table. 
     * 
     * 
     * 
     * 
     * <div class="alert"><b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
     * For example, a registry key path of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft\", if the component path is a registry key on a 64-bit operating system.</div>
     * <div> </div>
     * 
     * 
     * <table>
     * <tr>
     * <th>Root</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CLASSES_ROOT"></a><a id="hkey_classes_root"></a><dl>
     * <dt><b>HKEY_CLASSES_ROOT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 00
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CURRENT_USER"></a><a id="hkey_current_user"></a><dl>
     * <dt><b>HKEY_CURRENT_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 01
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_LOCAL_MACHINE"></a><a id="hkey_local_machine"></a><dl>
     * <dt><b>HKEY_LOCAL_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 02
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_USERS"></a><a id="hkey_users"></a><dl>
     * <dt><b>HKEY_USERS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 03
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} pcchOutPathBuffer Pointer to a location that receives the size of the buffer, in <b>TCHAR</b>, pointed to by the <i>szPathBuf</i> parameter.  The value in this location should be set to the count of  <b>TCHAR</b> in the string including the terminating null character. If the size of the  buffer  is too small, this parameter receives the length of the string value without including the terminating null character in the count.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetcomponentpathexa
     * @since windows8.0
     */
    static MsiGetComponentPathExA(szProductCode, szComponentCode, szUserSid, dwContext, lpOutPathBuffer, pcchOutPathBuffer) {
        DllCall("msi.dll\MsiGetComponentPathExA", "ptr", szProductCode, "ptr", szComponentCode, "ptr", szUserSid, "int", dwContext, "ptr", lpOutPathBuffer, "ptr", pcchOutPathBuffer)
    }

    /**
     * Returns the full path to an installed component. (Unicode)
     * @remarks
     * The 
     * <b>MsiGetComponentPathEx</b> function might return <b>INSTALLSTATE_ABSENT</b> or <b>INSTALL_STATE_UNKNOWN</b>, for the following reasons:
     * 
     * <ul>
     * <li>INSTALLSTATE_ABSENT 
     * 
     * 
     * The application did not properly ensure that the feature was installed by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> and, if necessary, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>.
     * 
     * </li>
     * <li>INSTALLSTATE_UNKNOWN 
     * 
     * 
     * The feature is not published. The application should have determined this earlier by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiqueryfeaturestatea">MsiQueryFeatureState</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumfeaturesa">MsiEnumFeatures</a>. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> as well, either 
     * <b>MsiUseFeature</b> was not called, or its return value was not properly checked.
     * 
     * </li>
     * </ul>
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetComponentPathEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCode A null-terminated string value that specifies an application's product code GUID. The function gets  the path of installed components used by this application.
     * @param {Pointer<PWSTR>} szComponentCode A null-terminated string value that specifies a component code GUID. The function gets the path of an installed component having this component code.
     * @param {Pointer<PWSTR>} szUserSid A  null-terminated string value that specifies the security identifier (SID) for a user in the system.  The function gets the paths of installed components  of applications installed under the user accounts identified by this SID. The special SID string s-1-1-0 (Everyone) specifies all users in the system. If this parameter is <b>NULL</b>, the function gets the path of an installed component for the currently logged-on user only.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies a particular user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to search applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Pointer<PWSTR>} lpOutPathBuffer A string value that receives the path to the component. This parameter can be <b>NULL</b>. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft\". The registry roots returned on 32-bit operating systems are defined as shown in the following table. 
     * 
     * 
     * 
     * 
     * <div class="alert"><b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
     * For example, a registry key path of <b>HKEY_CURRENT_USER</b>&#92;<b>SOFTWARE</b>&#92;<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft\", if the component path is a registry key on a 64-bit operating system.</div>
     * <div> </div>
     * 
     * 
     * <table>
     * <tr>
     * <th>Root</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CLASSES_ROOT"></a><a id="hkey_classes_root"></a><dl>
     * <dt><b>HKEY_CLASSES_ROOT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 00
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_CURRENT_USER"></a><a id="hkey_current_user"></a><dl>
     * <dt><b>HKEY_CURRENT_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 01
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_LOCAL_MACHINE"></a><a id="hkey_local_machine"></a><dl>
     * <dt><b>HKEY_LOCAL_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 02
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="HKEY_USERS"></a><a id="hkey_users"></a><dl>
     * <dt><b>HKEY_USERS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 03
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} pcchOutPathBuffer Pointer to a location that receives the size of the buffer, in <b>TCHAR</b>, pointed to by the <i>szPathBuf</i> parameter.  The value in this location should be set to the count of  <b>TCHAR</b> in the string including the terminating null character. If the size of the  buffer  is too small, this parameter receives the length of the string value without including the terminating null character in the count.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetcomponentpathexw
     * @since windows8.0
     */
    static MsiGetComponentPathExW(szProductCode, szComponentCode, szUserSid, dwContext, lpOutPathBuffer, pcchOutPathBuffer) {
        DllCall("msi.dll\MsiGetComponentPathExW", "ptr", szProductCode, "ptr", szComponentCode, "ptr", szUserSid, "int", dwContext, "ptr", lpOutPathBuffer, "ptr", pcchOutPathBuffer)
    }

    /**
     * The MsiProvideAssembly function returns the full path to a Windows Installer component that contains an assembly. The function prompts for a source and performs any necessary installation. MsiProvideAssembly increments the usage count for the feature. (ANSI)
     * @remarks
     * When the 
     * <b>MsiProvideAssembly</b> function succeeds, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.
     * 
     * The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.
     * 
     * Features with components that contain a corrupted file or the wrong version of a file must be explicitly reinstalled by the user, or by having the application call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallfeaturea">MsiReinstallFeature</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiProvideAssembly as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szAssemblyName The assembly name as a string.
     * @param {Pointer<PSTR>} szAppContext Set to null for global assemblies. For private assemblies, set <i>szAppContext</i> to the full path of the application configuration file  or to the full path of the executable file of the application to which the assembly has been made private.
     * @param {Integer} dwInstallMode 
     * @param {Integer} dwAssemblyInfo 
     * @param {Pointer<PSTR>} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchPathBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiprovideassemblya
     * @since windows8.0
     */
    static MsiProvideAssemblyA(szAssemblyName, szAppContext, dwInstallMode, dwAssemblyInfo, lpPathBuf, pcchPathBuf) {
        DllCall("msi.dll\MsiProvideAssemblyA", "ptr", szAssemblyName, "ptr", szAppContext, "uint", dwInstallMode, "uint", dwAssemblyInfo, "ptr", lpPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiProvideAssembly function returns the full path to a Windows Installer component that contains an assembly. The function prompts for a source and performs any necessary installation. MsiProvideAssembly increments the usage count for the feature. (Unicode)
     * @remarks
     * When the 
     * <b>MsiProvideAssembly</b> function succeeds, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.
     * 
     * The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.
     * 
     * Features with components that contain a corrupted file or the wrong version of a file must be explicitly reinstalled by the user, or by having the application call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msireinstallfeaturea">MsiReinstallFeature</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiProvideAssembly as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szAssemblyName The assembly name as a string.
     * @param {Pointer<PWSTR>} szAppContext Set to null for global assemblies. For private assemblies, set <i>szAppContext</i> to the full path of the application configuration file  or to the full path of the executable file of the application to which the assembly has been made private.
     * @param {Integer} dwInstallMode 
     * @param {Integer} dwAssemblyInfo 
     * @param {Pointer<PWSTR>} lpPathBuf Pointer to a variable that receives the path to the component. This parameter can be null.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchPathBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiprovideassemblyw
     * @since windows8.0
     */
    static MsiProvideAssemblyW(szAssemblyName, szAppContext, dwInstallMode, dwAssemblyInfo, lpPathBuf, pcchPathBuf) {
        DllCall("msi.dll\MsiProvideAssemblyW", "ptr", szAssemblyName, "ptr", szAppContext, "uint", dwInstallMode, "uint", dwAssemblyInfo, "ptr", lpPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiQueryComponentState function returns the installed state for a component. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiQueryComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCode Specifies the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID for the product that contains the component.
     * @param {Pointer<PSTR>} szUserSid Specifies the security identifier (SID) of the account under which the instance of the product being queried exists. If <i>dwContext</i> is not MSIINSTALLCONTEXT_MACHINE, null specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b>NULL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * NULL denotes the currently logged on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per–user–managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per–user–non-managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szComponentCode Specifies the component being queried. Component code GUID of the component as found in the ComponentID column of the <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component</a> table.
     * @param {Pointer<Int32>} pdwState Installation state of the component for the specified product instance. This parameter can return one of the following or null values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_LOCAL"></a><a id="installstate_local"></a><dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_SOURCE"></a><a id="installstate_source"></a><dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed to run from the source.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiquerycomponentstatea
     * @since windows8.0
     */
    static MsiQueryComponentStateA(szProductCode, szUserSid, dwContext, szComponentCode, pdwState) {
        DllCall("msi.dll\MsiQueryComponentStateA", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szComponentCode, "ptr", pdwState)
    }

    /**
     * The MsiQueryComponentState function returns the installed state for a component. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiQueryComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCode Specifies the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID for the product that contains the component.
     * @param {Pointer<PWSTR>} szUserSid Specifies the security identifier (SID) of the account under which the instance of the product being queried exists. If <i>dwContext</i> is not MSIINSTALLCONTEXT_MACHINE, null specifies the current user.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b>NULL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * NULL denotes the currently logged on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</div>
     * <div> </div>
     * @param {Integer} dwContext The installation context  of the product instance being queried.
     * 
     * <table>
     * <tr>
     * <th>Name</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per–user–managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per–user–non-managed instance of the product.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Retrieves the component's state for the per-machine instance of the product.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szComponentCode Specifies the component being queried. Component code GUID of the component as found in the ComponentID column of the <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component</a> table.
     * @param {Pointer<Int32>} pdwState Installation state of the component for the specified product instance. This parameter can return one of the following or null values.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_LOCAL"></a><a id="installstate_local"></a><dl>
     * <dt><b>INSTALLSTATE_LOCAL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed locally.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLSTATE_SOURCE"></a><a id="installstate_source"></a><dl>
     * <dt><b>INSTALLSTATE_SOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The component is installed to run from the source.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiquerycomponentstatew
     * @since windows8.0
     */
    static MsiQueryComponentStateW(szProductCode, szUserSid, dwContext, szComponentCode, pdwState) {
        DllCall("msi.dll\MsiQueryComponentStateW", "ptr", szProductCode, "ptr", szUserSid, "int", dwContext, "ptr", szComponentCode, "ptr", pdwState)
    }

    /**
     * The MsiEnumProducts function enumerates through all the products currently advertised or installed. Products that are installed in both the per-user and per-machine installation context and advertisements are enumerated. (ANSI)
     * @remarks
     * To enumerate products, an application should initially call the 
     * <b>MsiEnumProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call 
     * <b>MsiEnumProducts</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * When making multiple calls to 
     * <b>MsiEnumProducts</b> to enumerate all of the products, each call should be made from the same thread.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} iProductIndex Specifies the index of the product to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumProducts</b> function and then incremented for subsequent calls. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.
     * @param {Pointer<PSTR>} lpProductBuf Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumproductsa
     * @since windows8.0
     */
    static MsiEnumProductsA(iProductIndex, lpProductBuf) {
        DllCall("msi.dll\MsiEnumProductsA", "uint", iProductIndex, "ptr", lpProductBuf)
    }

    /**
     * The MsiEnumProducts function enumerates through all the products currently advertised or installed. Products that are installed in both the per-user and per-machine installation context and advertisements are enumerated. (Unicode)
     * @remarks
     * To enumerate products, an application should initially call the 
     * <b>MsiEnumProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call 
     * <b>MsiEnumProducts</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * When making multiple calls to 
     * <b>MsiEnumProducts</b> to enumerate all of the products, each call should be made from the same thread.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} iProductIndex Specifies the index of the product to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumProducts</b> function and then incremented for subsequent calls. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.
     * @param {Pointer<PWSTR>} lpProductBuf Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumproductsw
     * @since windows8.0
     */
    static MsiEnumProductsW(iProductIndex, lpProductBuf) {
        DllCall("msi.dll\MsiEnumProductsW", "uint", iProductIndex, "ptr", lpProductBuf)
    }

    /**
     * Enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts. (ANSI)
     * @remarks
     * To enumerate products, an application must initially call the <b>MsiEnumProductsEx</b> function with the <i>iIndex</i> parameter set to zero. The application must then increment the <i>iProductIndex</i> parameter and call <b>MsiEnumProductsEx</b> until it returns <b>ERROR_NO_MORE_ITEMS</b> and there are no more products to enumerate.
     * 
     * When making multiple calls to <b>MsiEnumProductsEx</b> to enumerate all of the products, each call must be made from the same thread.
     * 
     * A user must have administrator privileges to enumerate products across all user accounts or a user account other than the current user account. The enumeration skips products that are advertised only (such as products  not installed) in the per-user-unmanaged context when enumerating across all users or a user other than the current user.
     * 
     * Use <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msigetproductinfoexa">MsiGetProductInfoEx</a> to get the state or other information about each product instance enumerated by <b>MsiEnumProductsEx</b>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumProductsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCode <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product  to be enumerated.  Only instances of products within the scope of the context specified by the <i>szUserSid</i> and <i>dwContext</i> parameters are enumerated. This parameter can be set to <b>NULL</b> to enumerate all products in the specified context.
     * @param {Pointer<PSTR>} szUserSid Null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string s-1-1-0 (Everyone) specifies enumeration across all users in the system. A SID value other than s-1-1-0 is considered a user-SID and restricts enumeration to the current user or any user in the system. This parameter can be set to <b>NULL</b> to restrict the enumeration scope to the current user. 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate products or patches installed as per-machine.  When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the enumeration to a context. This parameter can be any one or a combination of the values shown in the following table.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per–user–managed installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per–user–unmanaged installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per-machine installations. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.
     * 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex Specifies the index of the product to retrieve. This parameter must be zero for the first call to the <b>MsiEnumProductsEx</b> function and then incremented for subsequent calls. The index should be incremented, only if the previous call has returned ERROR_SUCCESS. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.
     * @param {Pointer<PSTR>} szInstalledProductCode Null-terminated string of <b>TCHAR</b> that gives the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance being enumerated. This parameter can be <b>NULL</b>.
     * @param {Pointer<Int32>} pdwInstalledContext Returns the context of the product instance  being enumerated. The output value can be MSIINSTALLCONTEXT_USERMANAGED, MSIINSTALLCONTEXT_USERUNMANAGED, or MSIINSTALLCONTEXT_MACHINE. This parameter can be <b>NULL</b>.
     * @param {Pointer<PSTR>} szSid An output buffer that receives the string SID of the account under which this product instance exists.  This buffer returns an empty string for an instance installed in a per-machine context. 
     *  
     * 
     * 
     * This buffer should be large enough to contain the SID. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is set to a valid pointer, the function returns ERROR_SUCCESS and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b>.  The function can then be called again to retrieve the value, with the  <i>szSid</i> buffer large enough to contain *<i>pcchSid</i> + 1 characters.
     * 
     * If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchSid When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character. 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumproductsexa
     * @since windows8.0
     */
    static MsiEnumProductsExA(szProductCode, szUserSid, dwContext, dwIndex, szInstalledProductCode, pdwInstalledContext, szSid, pcchSid) {
        DllCall("msi.dll\MsiEnumProductsExA", "ptr", szProductCode, "ptr", szUserSid, "uint", dwContext, "uint", dwIndex, "ptr", szInstalledProductCode, "ptr", pdwInstalledContext, "ptr", szSid, "ptr", pcchSid)
    }

    /**
     * Enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts. (Unicode)
     * @remarks
     * To enumerate products, an application must initially call the <b>MsiEnumProductsEx</b> function with the <i>iIndex</i> parameter set to zero. The application must then increment the <i>iProductIndex</i> parameter and call <b>MsiEnumProductsEx</b> until it returns <b>ERROR_NO_MORE_ITEMS</b> and there are no more products to enumerate.
     * 
     * When making multiple calls to <b>MsiEnumProductsEx</b> to enumerate all of the products, each call must be made from the same thread.
     * 
     * A user must have administrator privileges to enumerate products across all user accounts or a user account other than the current user account. The enumeration skips products that are advertised only (such as products  not installed) in the per-user-unmanaged context when enumerating across all users or a user other than the current user.
     * 
     * Use <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msigetproductinfoexa">MsiGetProductInfoEx</a> to get the state or other information about each product instance enumerated by <b>MsiEnumProductsEx</b>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumProductsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCode <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product  to be enumerated.  Only instances of products within the scope of the context specified by the <i>szUserSid</i> and <i>dwContext</i> parameters are enumerated. This parameter can be set to <b>NULL</b> to enumerate all products in the specified context.
     * @param {Pointer<PWSTR>} szUserSid Null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string s-1-1-0 (Everyone) specifies enumeration across all users in the system. A SID value other than s-1-1-0 is considered a user-SID and restricts enumeration to the current user or any user in the system. This parameter can be set to <b>NULL</b> to restrict the enumeration scope to the current user. 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate products or patches installed as per-machine.  When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext Restricts the enumeration to a context. This parameter can be any one or a combination of the values shown in the following table.
     * 
     * <table>
     * <tr>
     * <th>Context</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per–user–managed installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per–user–unmanaged installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Enumeration extended to all per-machine installations. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.
     * 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex Specifies the index of the product to retrieve. This parameter must be zero for the first call to the <b>MsiEnumProductsEx</b> function and then incremented for subsequent calls. The index should be incremented, only if the previous call has returned ERROR_SUCCESS. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.
     * @param {Pointer<PWSTR>} szInstalledProductCode Null-terminated string of <b>TCHAR</b> that gives the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance being enumerated. This parameter can be <b>NULL</b>.
     * @param {Pointer<Int32>} pdwInstalledContext Returns the context of the product instance  being enumerated. The output value can be MSIINSTALLCONTEXT_USERMANAGED, MSIINSTALLCONTEXT_USERUNMANAGED, or MSIINSTALLCONTEXT_MACHINE. This parameter can be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szSid An output buffer that receives the string SID of the account under which this product instance exists.  This buffer returns an empty string for an instance installed in a per-machine context. 
     *  
     * 
     * 
     * This buffer should be large enough to contain the SID. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is set to a valid pointer, the function returns ERROR_SUCCESS and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b>.  The function can then be called again to retrieve the value, with the  <i>szSid</i> buffer large enough to contain *<i>pcchSid</i> + 1 characters.
     * 
     * If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchSid When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character. 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumproductsexw
     * @since windows8.0
     */
    static MsiEnumProductsExW(szProductCode, szUserSid, dwContext, dwIndex, szInstalledProductCode, pdwInstalledContext, szSid, pcchSid) {
        DllCall("msi.dll\MsiEnumProductsExW", "ptr", szProductCode, "ptr", szUserSid, "uint", dwContext, "uint", dwIndex, "ptr", szInstalledProductCode, "ptr", pdwInstalledContext, "ptr", szSid, "ptr", pcchSid)
    }

    /**
     * The MsiEnumRelatedProducts function enumerates products with a specified upgrade code. This function lists the currently installed and advertised products that have the specified UpgradeCode property in their Property table. (ANSI)
     * @remarks
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/upgradecode">UpgradeCode</a> property.
     * 
     * To enumerate currently installed and advertised products that have a specific upgrade code, an application should initially call the 
     * <b>MsiEnumRelatedProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call 
     * <b>MsiEnumRelatedProducts</b> until the function returns ERROR_NO_MORE_ITEMS, which means there are no more products with the specified upgrade code.
     * 
     * When making multiple calls to 
     * <b>MsiEnumRelatedProducts</b> to enumerate all of the related products, each call should be made from the same thread.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumRelatedProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} lpUpgradeCode The null-terminated string specifying the upgrade code of related products that the installer is to enumerate.
     * @param {Integer} iProductIndex The zero-based index into the registered products.
     * @param {Pointer<PSTR>} lpProductBuf A buffer to receive the product code GUID. This buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumrelatedproductsa
     * @since windows8.0
     */
    static MsiEnumRelatedProductsA(lpUpgradeCode, iProductIndex, lpProductBuf) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiEnumRelatedProductsA", "ptr", lpUpgradeCode, "uint", dwReserved, "uint", iProductIndex, "ptr", lpProductBuf)
    }

    /**
     * The MsiEnumRelatedProducts function enumerates products with a specified upgrade code. This function lists the currently installed and advertised products that have the specified UpgradeCode property in their Property table. (Unicode)
     * @remarks
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/upgradecode">UpgradeCode</a> property.
     * 
     * To enumerate currently installed and advertised products that have a specific upgrade code, an application should initially call the 
     * <b>MsiEnumRelatedProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call 
     * <b>MsiEnumRelatedProducts</b> until the function returns ERROR_NO_MORE_ITEMS, which means there are no more products with the specified upgrade code.
     * 
     * When making multiple calls to 
     * <b>MsiEnumRelatedProducts</b> to enumerate all of the related products, each call should be made from the same thread.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumRelatedProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} lpUpgradeCode The null-terminated string specifying the upgrade code of related products that the installer is to enumerate.
     * @param {Integer} iProductIndex The zero-based index into the registered products.
     * @param {Pointer<PWSTR>} lpProductBuf A buffer to receive the product code GUID. This buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumrelatedproductsw
     * @since windows8.0
     */
    static MsiEnumRelatedProductsW(lpUpgradeCode, iProductIndex, lpProductBuf) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiEnumRelatedProductsW", "ptr", lpUpgradeCode, "uint", dwReserved, "uint", iProductIndex, "ptr", lpProductBuf)
    }

    /**
     * The MsiEnumFeatures function enumerates the published features for a given product. This function retrieves one feature ID each time it is called. (ANSI)
     * @remarks
     * To enumerate features, an application should initially call the 
     * <b>MsiEnumFeatures</b> function with the <i>iFeatureIndex</i> parameter set to zero. The application should then increment the <i>iFeatureIndex</i> parameter and call 
     * <b>MsiEnumFeatures</b> until there are no more features (that is, until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumFeatures as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Null-terminated string specifying the product code of the product whose features are to be enumerated.
     * @param {Integer} iFeatureIndex Specifies the index of the feature to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumFeatures</b> function and then incremented for subsequent calls. Because features are not ordered, any new feature has an arbitrary index. This means that the function can return features in any order.
     * @param {Pointer<PSTR>} lpFeatureBuf Pointer to a buffer that receives the feature ID. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  The function returns <b>ERROR_MORE_DATA</b> if the length of the feature ID exceeds <b>MAX_FEATURE_CHARS</b>.
     * @param {Pointer<PSTR>} lpParentBuf Pointer to a buffer that receives the feature ID of the parent of the feature. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  If the length of the feature ID of the parent feature exceeds <b>MAX_FEATURE_CHARS</b>, only the first <b>MAX_FEATURE_CHARS</b> characters get copied into the buffer.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumfeaturesa
     * @since windows8.0
     */
    static MsiEnumFeaturesA(szProduct, iFeatureIndex, lpFeatureBuf, lpParentBuf) {
        DllCall("msi.dll\MsiEnumFeaturesA", "ptr", szProduct, "uint", iFeatureIndex, "ptr", lpFeatureBuf, "ptr", lpParentBuf)
    }

    /**
     * The MsiEnumFeatures function enumerates the published features for a given product. This function retrieves one feature ID each time it is called. (Unicode)
     * @remarks
     * To enumerate features, an application should initially call the 
     * <b>MsiEnumFeatures</b> function with the <i>iFeatureIndex</i> parameter set to zero. The application should then increment the <i>iFeatureIndex</i> parameter and call 
     * <b>MsiEnumFeatures</b> until there are no more features (that is, until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumFeatures as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Null-terminated string specifying the product code of the product whose features are to be enumerated.
     * @param {Integer} iFeatureIndex Specifies the index of the feature to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumFeatures</b> function and then incremented for subsequent calls. Because features are not ordered, any new feature has an arbitrary index. This means that the function can return features in any order.
     * @param {Pointer<PWSTR>} lpFeatureBuf Pointer to a buffer that receives the feature ID. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  The function returns <b>ERROR_MORE_DATA</b> if the length of the feature ID exceeds <b>MAX_FEATURE_CHARS</b>.
     * @param {Pointer<PWSTR>} lpParentBuf Pointer to a buffer that receives the feature ID of the parent of the feature. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  If the length of the feature ID of the parent feature exceeds <b>MAX_FEATURE_CHARS</b>, only the first <b>MAX_FEATURE_CHARS</b> characters get copied into the buffer.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumfeaturesw
     * @since windows8.0
     */
    static MsiEnumFeaturesW(szProduct, iFeatureIndex, lpFeatureBuf, lpParentBuf) {
        DllCall("msi.dll\MsiEnumFeaturesW", "ptr", szProduct, "uint", iFeatureIndex, "ptr", lpFeatureBuf, "ptr", lpParentBuf)
    }

    /**
     * The MsiEnumComponents function enumerates the installed components for all products. This function retrieves one component code each time it is called. (ANSI)
     * @remarks
     * To enumerate components, an application should initially call the 
     * <b>MsiEnumComponents</b> function with the <i>iComponentIndex</i> parameter set to zero. The application should then increment the <i>iComponentIndex</i> parameter and call 
     * <b>MsiEnumComponents</b> until there are no more components (that is, until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * When making multiple calls to 
     * <b>MsiEnumComponents</b> to enumerate all of the product's components, each call should be made from the same thread.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumComponents as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} iComponentIndex Specifies the index of the component to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponents</b> function and then incremented for subsequent calls. Because components are not ordered, any new component has an arbitrary index. This means that the function can return components in any order.
     * @param {Pointer<PSTR>} lpComponentBuf Pointer to a buffer that receives the component code. This buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumcomponentsa
     * @since windows8.0
     */
    static MsiEnumComponentsA(iComponentIndex, lpComponentBuf) {
        DllCall("msi.dll\MsiEnumComponentsA", "uint", iComponentIndex, "ptr", lpComponentBuf)
    }

    /**
     * The MsiEnumComponents function enumerates the installed components for all products. This function retrieves one component code each time it is called. (Unicode)
     * @remarks
     * To enumerate components, an application should initially call the 
     * <b>MsiEnumComponents</b> function with the <i>iComponentIndex</i> parameter set to zero. The application should then increment the <i>iComponentIndex</i> parameter and call 
     * <b>MsiEnumComponents</b> until there are no more components (that is, until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * When making multiple calls to 
     * <b>MsiEnumComponents</b> to enumerate all of the product's components, each call should be made from the same thread.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumComponents as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} iComponentIndex Specifies the index of the component to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponents</b> function and then incremented for subsequent calls. Because components are not ordered, any new component has an arbitrary index. This means that the function can return components in any order.
     * @param {Pointer<PWSTR>} lpComponentBuf Pointer to a buffer that receives the component code. This buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumcomponentsw
     * @since windows8.0
     */
    static MsiEnumComponentsW(iComponentIndex, lpComponentBuf) {
        DllCall("msi.dll\MsiEnumComponentsW", "uint", iComponentIndex, "ptr", lpComponentBuf)
    }

    /**
     * The MsiEnumComponentsEx function enumerates installed components. The function retrieves the component code for one component each time it is called. The component code is the string GUID unique to the component, version, and language. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiEnumComponentsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szUserSid A null-terminated string that contains a security identifier (SID.) The enumeration of installed components extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) specifies an enumeration of all installed components across all products of all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and restricts the enumeration to instances of  applications installed by the specified user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  <p class="note">The special SID string s-1-5-18 (System) cannot be used to enumerate applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * 
     * 
     * </div>
     * <div> </div>
     * @param {Integer} dwContext A flag that restricts the enumeration of  installed component to instances of products installed in the specified installation context. The enumeration includes only product instances installed by the users specified by  <i>szUserSid</i>. 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in  the per–user–managed installation context. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in  the per–user–unmanaged installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in the per-machine installation context. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.
     * 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex Specifies the index of the component to retrieve.  This parameter must be zero (0) for the first call to <b>MsiEnumComponentsEx</b> function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns ERROR_SUCCESS.
     * Components are not ordered and can be returned by the function in any order.
     * @param {Pointer<PSTR>} szInstalledComponentCode An output buffer that receives the component code GUID for the installed component. The length of the buffer should be large enough to hold a  null-terminated string value containing the component code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.
     * @param {Pointer<Int32>} pdwInstalledContext A flag that gives the installation context the application that installed the component.
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in the per–user–managed installation context. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in the per–user–unmanaged installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed  in the per-machine installation installation context. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szSid Receives the security identifier (SID) that identifies the user that installed the application that owns the component. The location receives an empty string if this instance of the application is installed in a per-machine installation context. 
     * 
     * The length of the buffer at this location should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>Empty string</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in a per-machine installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The SID for the user in the system that installed the application. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} pcchSid Receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character. 
     * 
     * 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumcomponentsexa
     * @since windows8.0
     */
    static MsiEnumComponentsExA(szUserSid, dwContext, dwIndex, szInstalledComponentCode, pdwInstalledContext, szSid, pcchSid) {
        DllCall("msi.dll\MsiEnumComponentsExA", "ptr", szUserSid, "uint", dwContext, "uint", dwIndex, "ptr", szInstalledComponentCode, "ptr", pdwInstalledContext, "ptr", szSid, "ptr", pcchSid)
    }

    /**
     * The MsiEnumComponentsEx function enumerates installed components. The function retrieves the component code for one component each time it is called. The component code is the string GUID unique to the component, version, and language. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiEnumComponentsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szUserSid A null-terminated string that contains a security identifier (SID.) The enumeration of installed components extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) specifies an enumeration of all installed components across all products of all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and restricts the enumeration to instances of  applications installed by the specified user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  <p class="note">The special SID string s-1-5-18 (System) cannot be used to enumerate applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * 
     * 
     * </div>
     * <div> </div>
     * @param {Integer} dwContext A flag that restricts the enumeration of  installed component to instances of products installed in the specified installation context. The enumeration includes only product instances installed by the users specified by  <i>szUserSid</i>. 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in  the per–user–managed installation context. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in  the per–user–unmanaged installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Include products that exist in the per-machine installation context. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.
     * 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex Specifies the index of the component to retrieve.  This parameter must be zero (0) for the first call to <b>MsiEnumComponentsEx</b> function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns ERROR_SUCCESS.
     * Components are not ordered and can be returned by the function in any order.
     * @param {Pointer<PWSTR>} szInstalledComponentCode An output buffer that receives the component code GUID for the installed component. The length of the buffer should be large enough to hold a  null-terminated string value containing the component code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.
     * @param {Pointer<Int32>} pdwInstalledContext A flag that gives the installation context the application that installed the component.
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERMANAGED"></a><a id="msiinstallcontext_usermanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERMANAGED</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in the per–user–managed installation context. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_USERUNMANAGED"></a><a id="msiinstallcontext_userunmanaged"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_USERUNMANAGED</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in the per–user–unmanaged installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIINSTALLCONTEXT_MACHINE"></a><a id="msiinstallcontext_machine"></a><dl>
     * <dt><b>MSIINSTALLCONTEXT_MACHINE</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed  in the per-machine installation installation context. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szSid Receives the security identifier (SID) that identifies the user that installed the application that owns the component. The location receives an empty string if this instance of the application is installed in a per-machine installation context. 
     * 
     * The length of the buffer at this location should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>Empty string</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in a per-machine installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The SID for the user in the system that installed the application. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} pcchSid Receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character. 
     * 
     * 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumcomponentsexw
     * @since windows8.0
     */
    static MsiEnumComponentsExW(szUserSid, dwContext, dwIndex, szInstalledComponentCode, pdwInstalledContext, szSid, pcchSid) {
        DllCall("msi.dll\MsiEnumComponentsExW", "ptr", szUserSid, "uint", dwContext, "uint", dwIndex, "ptr", szInstalledComponentCode, "ptr", pdwInstalledContext, "ptr", szSid, "ptr", pcchSid)
    }

    /**
     * The MsiEnumClients function enumerates the clients for a given installed component. The function retrieves one product code each time it is called. (ANSI)
     * @remarks
     * To enumerate clients, an application should initially call the 
     * <b>MsiEnumClients</b> function with the<i> iProductIndex</i> parameter set to zero. The application should then increment the <i> iProductIndex</i> parameter and call 
     * <b>MsiEnumClients</b> until there are no more clients (that is, until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * When making multiple calls to 
     * <b>MsiEnumClients</b> to enumerate all of the component's clients, each call should be made from the same thread.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumClients as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szComponent Specifies the component whose clients are to be enumerated.
     * @param {Integer} iProductIndex Specifies the index of the client to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumClients</b> function and then incremented for subsequent calls. Because clients are not ordered, any new client has an arbitrary index. This means that the function can return clients in any order.
     * @param {Pointer<PSTR>} lpProductBuf Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumclientsa
     * @since windows8.0
     */
    static MsiEnumClientsA(szComponent, iProductIndex, lpProductBuf) {
        DllCall("msi.dll\MsiEnumClientsA", "ptr", szComponent, "uint", iProductIndex, "ptr", lpProductBuf)
    }

    /**
     * The MsiEnumClients function enumerates the clients for a given installed component. The function retrieves one product code each time it is called. (Unicode)
     * @remarks
     * To enumerate clients, an application should initially call the 
     * <b>MsiEnumClients</b> function with the<i> iProductIndex</i> parameter set to zero. The application should then increment the <i> iProductIndex</i> parameter and call 
     * <b>MsiEnumClients</b> until there are no more clients (that is, until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * When making multiple calls to 
     * <b>MsiEnumClients</b> to enumerate all of the component's clients, each call should be made from the same thread.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumClients as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szComponent Specifies the component whose clients are to be enumerated.
     * @param {Integer} iProductIndex Specifies the index of the client to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumClients</b> function and then incremented for subsequent calls. Because clients are not ordered, any new client has an arbitrary index. This means that the function can return clients in any order.
     * @param {Pointer<PWSTR>} lpProductBuf Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumclientsw
     * @since windows8.0
     */
    static MsiEnumClientsW(szComponent, iProductIndex, lpProductBuf) {
        DllCall("msi.dll\MsiEnumClientsW", "ptr", szComponent, "uint", iProductIndex, "ptr", lpProductBuf)
    }

    /**
     * The MsiEnumClientsEx function enumerates the installed applications that use a specified component. The function retrieves a product code for an application each time it is called. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiEnumClientsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szComponent The component code GUID that identifies the component. The function enumerates the applications that use this component.
     * @param {Pointer<PSTR>} szUserSid A null-terminated string value that contains a security identifier (SID.) The enumeration of applications extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) enumerates all applications for all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and enumerates the instances of  applications installed by the specified user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an enumeration for a particular user. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an enumeration for all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate applications that exist in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * @param {Integer} dwContext A flag that extends the enumeration to instances of applications installed in the specified installation context. The enumeration includes only instances of applications that are installed by the users identified by  <i>szUserSid</i>.
     * @param {Integer} dwProductIndex Specifies the index of the application to retrieve.  The value of this parameter must be zero (0) in the first call to the function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns <b>ERROR_SUCCESS</b>.
     * @param {Pointer<PSTR>} szProductBuf A string value that receives the product code for the application. The length of the buffer at this location should be large enough to hold a  null-terminated string value containing the product code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.
     * @param {Pointer<Int32>} pdwInstalledContext A flag that gives the installation context of the application.
     * @param {Pointer<PSTR>} szSid Receives the security identifier (SID) that identifies the user that installed the application. The location receives an empty string value if this instance of the application exists in a per-machine installation context. 
     * 
     * The length of the buffer should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>Empty string</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in a per-machine installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The SID for the user that installed the product. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} pcchSid Pointer to a location in memory that contains a variable that specifies the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of TCHAR in the requested value, not including the terminating null character. 
     * 
     * 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumclientsexa
     * @since windows8.0
     */
    static MsiEnumClientsExA(szComponent, szUserSid, dwContext, dwProductIndex, szProductBuf, pdwInstalledContext, szSid, pcchSid) {
        DllCall("msi.dll\MsiEnumClientsExA", "ptr", szComponent, "ptr", szUserSid, "uint", dwContext, "uint", dwProductIndex, "ptr", szProductBuf, "ptr", pdwInstalledContext, "ptr", szSid, "ptr", pcchSid)
    }

    /**
     * The MsiEnumClientsEx function enumerates the installed applications that use a specified component. The function retrieves a product code for an application each time it is called. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiEnumClientsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szComponent The component code GUID that identifies the component. The function enumerates the applications that use this component.
     * @param {Pointer<PWSTR>} szUserSid A null-terminated string value that contains a security identifier (SID.) The enumeration of applications extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) enumerates all applications for all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and enumerates the instances of  applications installed by the specified user.
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies the currently logged-on user.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an enumeration for a particular user. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies an enumeration for all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate applications that exist in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * @param {Integer} dwContext A flag that extends the enumeration to instances of applications installed in the specified installation context. The enumeration includes only instances of applications that are installed by the users identified by  <i>szUserSid</i>.
     * @param {Integer} dwProductIndex Specifies the index of the application to retrieve.  The value of this parameter must be zero (0) in the first call to the function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns <b>ERROR_SUCCESS</b>.
     * @param {Pointer<PWSTR>} szProductBuf A string value that receives the product code for the application. The length of the buffer at this location should be large enough to hold a  null-terminated string value containing the product code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.
     * @param {Pointer<Int32>} pdwInstalledContext A flag that gives the installation context of the application.
     * @param {Pointer<PWSTR>} szSid Receives the security identifier (SID) that identifies the user that installed the application. The location receives an empty string value if this instance of the application exists in a per-machine installation context. 
     * 
     * The length of the buffer should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.
     * 
     * If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>SID type</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>Empty string</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The application is installed in a per-machine installation context.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The SID for the user that installed the product. 
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} pcchSid Pointer to a location in memory that contains a variable that specifies the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of TCHAR in the requested value, not including the terminating null character. 
     * 
     * 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumclientsexw
     * @since windows8.0
     */
    static MsiEnumClientsExW(szComponent, szUserSid, dwContext, dwProductIndex, szProductBuf, pdwInstalledContext, szSid, pcchSid) {
        DllCall("msi.dll\MsiEnumClientsExW", "ptr", szComponent, "ptr", szUserSid, "uint", dwContext, "uint", dwProductIndex, "ptr", szProductBuf, "ptr", pdwInstalledContext, "ptr", szSid, "ptr", pcchSid)
    }

    /**
     * The MsiEnumComponentQualifiers function enumerates the advertised qualifiers for the given component. This function retrieves one qualifier each time it is called. (ANSI)
     * @remarks
     * To enumerate qualifiers, an application should initially call the 
     * <b>MsiEnumComponentQualifiers</b> function with the<i> iIndex </i> parameter set to zero. The application should then increment the <i> iIndex </i> parameter and call 
     * <b>MsiEnumComponentQualifiers</b> until there are no more qualifiers (that is, until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * When 
     * <b>MsiEnumComponentQualifiers</b> returns, the <i>pcchQualifierBuf</i> parameter contains the length of the qualifier string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, 
     * <b>MsiEnumComponentQualifiers</b> returns ERROR_MORE_DATA, and this parameter contains the size of the string, in characters, without counting the null character. The same mechanism applies to <i>pcchDescriptionBuf</i>.
     * 			
     * 
     * When making multiple calls to 
     * <b>MsiEnumComponentQualifiers</b> to enumerate all of the component's advertised qualifiers, each call should be made from the same thread.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumComponentQualifiers as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szComponent Specifies component whose qualifiers are to be enumerated.
     * @param {Integer} iIndex Specifies the index of the qualifier to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponentQualifiers</b> function and then incremented for subsequent calls. Because qualifiers are not ordered, any new qualifier has an arbitrary index. This means that the function can return qualifiers in any order.
     * @param {Pointer<PSTR>} lpQualifierBuf Pointer to a buffer that receives the qualifier code.
     * @param {Pointer<UInt32>} pcchQualifierBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpQualifierBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character.
     * @param {Pointer<PSTR>} lpApplicationDataBuf Pointer to a buffer that receives the application registered data for the qualifier. This parameter can be null.
     * @param {Pointer<UInt32>} pcchApplicationDataBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpApplicationDataBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character. This parameter can be null only if the <i>lpApplicationDataBuf </i> parameter is null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumcomponentqualifiersa
     * @since windows8.0
     */
    static MsiEnumComponentQualifiersA(szComponent, iIndex, lpQualifierBuf, pcchQualifierBuf, lpApplicationDataBuf, pcchApplicationDataBuf) {
        DllCall("msi.dll\MsiEnumComponentQualifiersA", "ptr", szComponent, "uint", iIndex, "ptr", lpQualifierBuf, "ptr", pcchQualifierBuf, "ptr", lpApplicationDataBuf, "ptr", pcchApplicationDataBuf)
    }

    /**
     * The MsiEnumComponentQualifiers function enumerates the advertised qualifiers for the given component. This function retrieves one qualifier each time it is called. (Unicode)
     * @remarks
     * To enumerate qualifiers, an application should initially call the 
     * <b>MsiEnumComponentQualifiers</b> function with the<i> iIndex </i> parameter set to zero. The application should then increment the <i> iIndex </i> parameter and call 
     * <b>MsiEnumComponentQualifiers</b> until there are no more qualifiers (that is, until the function returns ERROR_NO_MORE_ITEMS).
     * 
     * When 
     * <b>MsiEnumComponentQualifiers</b> returns, the <i>pcchQualifierBuf</i> parameter contains the length of the qualifier string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, 
     * <b>MsiEnumComponentQualifiers</b> returns ERROR_MORE_DATA, and this parameter contains the size of the string, in characters, without counting the null character. The same mechanism applies to <i>pcchDescriptionBuf</i>.
     * 			
     * 
     * When making multiple calls to 
     * <b>MsiEnumComponentQualifiers</b> to enumerate all of the component's advertised qualifiers, each call should be made from the same thread.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiEnumComponentQualifiers as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szComponent Specifies component whose qualifiers are to be enumerated.
     * @param {Integer} iIndex Specifies the index of the qualifier to retrieve. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponentQualifiers</b> function and then incremented for subsequent calls. Because qualifiers are not ordered, any new qualifier has an arbitrary index. This means that the function can return qualifiers in any order.
     * @param {Pointer<PWSTR>} lpQualifierBuf Pointer to a buffer that receives the qualifier code.
     * @param {Pointer<UInt32>} pcchQualifierBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpQualifierBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character.
     * @param {Pointer<PWSTR>} lpApplicationDataBuf Pointer to a buffer that receives the application registered data for the qualifier. This parameter can be null.
     * @param {Pointer<UInt32>} pcchApplicationDataBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpApplicationDataBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character. This parameter can be null only if the <i>lpApplicationDataBuf </i> parameter is null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msienumcomponentqualifiersw
     * @since windows8.0
     */
    static MsiEnumComponentQualifiersW(szComponent, iIndex, lpQualifierBuf, pcchQualifierBuf, lpApplicationDataBuf, pcchApplicationDataBuf) {
        DllCall("msi.dll\MsiEnumComponentQualifiersW", "ptr", szComponent, "uint", iIndex, "ptr", lpQualifierBuf, "ptr", pcchQualifierBuf, "ptr", lpApplicationDataBuf, "ptr", pcchApplicationDataBuf)
    }

    /**
     * The MsiOpenProduct function opens a product for use with the functions that access the product database. The MsiCloseHandle function must be called with the handle when the handle is no longer needed. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiOpenProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code of the product to be opened.
     * @param {Pointer<UInt32>} hProduct Pointer to a variable that receives the product handle.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiopenproducta
     * @since windows8.0
     */
    static MsiOpenProductA(szProduct, hProduct) {
        DllCall("msi.dll\MsiOpenProductA", "ptr", szProduct, "ptr", hProduct)
    }

    /**
     * The MsiOpenProduct function opens a product for use with the functions that access the product database. The MsiCloseHandle function must be called with the handle when the handle is no longer needed. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiOpenProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code of the product to be opened.
     * @param {Pointer<UInt32>} hProduct Pointer to a variable that receives the product handle.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiopenproductw
     * @since windows8.0
     */
    static MsiOpenProductW(szProduct, hProduct) {
        DllCall("msi.dll\MsiOpenProductW", "ptr", szProduct, "ptr", hProduct)
    }

    /**
     * The MsiOpenPackage function opens a package to use with the functions that access the product database. (ANSI)
     * @remarks
     * MsiOpenPackage can accept an opened database handle in the form "#nnnn", where nnnn is the database handle in string form, i.e. #123, instead of a path to the package. This is intended for development tasks such as running validation actions, or for use with database management tools.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiOpenPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPackagePath The path to the package.
     * @param {Pointer<UInt32>} hProduct A pointer to a variable that receives the product handle.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiopenpackagea
     * @since windows8.0
     */
    static MsiOpenPackageA(szPackagePath, hProduct) {
        DllCall("msi.dll\MsiOpenPackageA", "ptr", szPackagePath, "ptr", hProduct)
    }

    /**
     * The MsiOpenPackage function opens a package to use with the functions that access the product database. (Unicode)
     * @remarks
     * MsiOpenPackage can accept an opened database handle in the form "#nnnn", where nnnn is the database handle in string form, i.e. #123, instead of a path to the package. This is intended for development tasks such as running validation actions, or for use with database management tools.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiOpenPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPackagePath The path to the package.
     * @param {Pointer<UInt32>} hProduct A pointer to a variable that receives the product handle.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiopenpackagew
     * @since windows8.0
     */
    static MsiOpenPackageW(szPackagePath, hProduct) {
        DllCall("msi.dll\MsiOpenPackageW", "ptr", szPackagePath, "ptr", hProduct)
    }

    /**
     * The MsiOpenPackageEx function opens a package to use with functions that access the product database. (ANSI)
     * @remarks
     * To create a restricted product handle that is independent of the current machine state and incapable of changing the current machine state, use 
     * <b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE set in <i>dwOptions</i>.
     * 
     * Note that if <i>dwOptions</i> is MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE or 1, 
     * <b>MsiOpenPackageEx</b> ignores the current machine state when creating the product handle. If the value of <i>dwOptions</i> is 0, 
     * <b>MsiOpenPackageEx</b> is the same as 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a> and creates a product handle that is dependent upon whether the package specified by <i>szPackagePath</i> is already installed on the computer.
     * 
     * The restricted handle created by using 
     * <b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE only permits execution of dialogs, a subset of the standard actions, and custom actions that set properties (
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/custom-action-type-35">Custom Action Type 35</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/custom-action-type-51">Custom Action Type 51</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/custom-action-type-19">Custom Action Type 19</a>). The restricted handle prevents the use of custom actions that run 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/dynamic-link-libraries">Dynamic-Link Libraries</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/executable-files">Executable Files</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/scripts">Scripts</a>.
     * 
     * You can call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidoactiona">MsiDoAction</a> on the following standard actions using the restricted handle. All other actions return ERROR_FUNCTION_NOT_CALLED if called with the restricted handle.
     * 
     * <ul>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/admin-action">ADMIN</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/advertise-action">ADVERTISE</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/install-action">INSTALL</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/sequence-action">SEQUENCE</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/appsearch-action">AppSearch action</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/ccpsearch-action">CCPSearch</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/filecost-action">FileCost</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/findrelatedproducts-action">FindRelatedProducts</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/isolatecomponents-action">IsolateComponents action</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/launchconditions-action">LaunchConditions</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/migratefeaturestates-action">MigrateFeatureStates</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/resolvesource-action">ResolveSource</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/rmccpsearch-action">RMCCPSearch</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/validateproductid-action">ValidateProductID</a>
     * </li>
     * </ul>
     * The 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a> function must be called when the handle is not needed.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiOpenPackageEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPackagePath The path to the package.
     * @param {Integer} dwOptions The bit flags to indicate whether or not to ignore the computer state. Pass in 0 (zero) to use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a> behavior. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Constant</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE"></a><a id="msiopenpackageflags_ignoremachinestate"></a><dl>
     * <dt><b>MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Ignore the computer state when creating the product handle.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} hProduct A pointer to a variable that receives the product handle.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiopenpackageexa
     * @since windows8.0
     */
    static MsiOpenPackageExA(szPackagePath, dwOptions, hProduct) {
        DllCall("msi.dll\MsiOpenPackageExA", "ptr", szPackagePath, "uint", dwOptions, "ptr", hProduct)
    }

    /**
     * The MsiOpenPackageEx function opens a package to use with functions that access the product database. (Unicode)
     * @remarks
     * To create a restricted product handle that is independent of the current machine state and incapable of changing the current machine state, use 
     * <b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE set in <i>dwOptions</i>.
     * 
     * Note that if <i>dwOptions</i> is MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE or 1, 
     * <b>MsiOpenPackageEx</b> ignores the current machine state when creating the product handle. If the value of <i>dwOptions</i> is 0, 
     * <b>MsiOpenPackageEx</b> is the same as 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a> and creates a product handle that is dependent upon whether the package specified by <i>szPackagePath</i> is already installed on the computer.
     * 
     * The restricted handle created by using 
     * <b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE only permits execution of dialogs, a subset of the standard actions, and custom actions that set properties (
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/custom-action-type-35">Custom Action Type 35</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/custom-action-type-51">Custom Action Type 51</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/custom-action-type-19">Custom Action Type 19</a>). The restricted handle prevents the use of custom actions that run 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/dynamic-link-libraries">Dynamic-Link Libraries</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/executable-files">Executable Files</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/scripts">Scripts</a>.
     * 
     * You can call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidoactiona">MsiDoAction</a> on the following standard actions using the restricted handle. All other actions return ERROR_FUNCTION_NOT_CALLED if called with the restricted handle.
     * 
     * <ul>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/admin-action">ADMIN</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/advertise-action">ADVERTISE</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/install-action">INSTALL</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/sequence-action">SEQUENCE</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/appsearch-action">AppSearch action</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/ccpsearch-action">CCPSearch</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/filecost-action">FileCost</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/findrelatedproducts-action">FindRelatedProducts</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/isolatecomponents-action">IsolateComponents action</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/launchconditions-action">LaunchConditions</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/migratefeaturestates-action">MigrateFeatureStates</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/resolvesource-action">ResolveSource</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/rmccpsearch-action">RMCCPSearch</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/validateproductid-action">ValidateProductID</a>
     * </li>
     * </ul>
     * The 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a> function must be called when the handle is not needed.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiOpenPackageEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPackagePath The path to the package.
     * @param {Integer} dwOptions The bit flags to indicate whether or not to ignore the computer state. Pass in 0 (zero) to use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a> behavior. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Constant</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE"></a><a id="msiopenpackageflags_ignoremachinestate"></a><dl>
     * <dt><b>MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Ignore the computer state when creating the product handle.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} hProduct A pointer to a variable that receives the product handle.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiopenpackageexw
     * @since windows8.0
     */
    static MsiOpenPackageExW(szPackagePath, dwOptions, hProduct) {
        DllCall("msi.dll\MsiOpenPackageExW", "ptr", szPackagePath, "uint", dwOptions, "ptr", hProduct)
    }

    /**
     * The MsiGetPatchFileList function is provided a list of .msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches. (ANSI)
     * @remarks
     * For example, <i>szPatchList</i> could have the value: "c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp".
     * 
     * This function runs in the context of the caller. The product code is searched in the order of user-unmanaged context, user-managed context, and machine context.
     * 
     * You must close all MSIHANDLE objects that are returned by this function by calling 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a> function.
     * 
     * If the function fails, you can obtain extended error information by using the <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a> function.
     * 
     * For more information about using the <b>MsiGetPatchFileList</b> function  see <a href="https://docs.microsoft.com/windows/desktop/Msi/listing-the-files-that-can-be-updated">Listing the Files that can be Updated</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetPatchFileList as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCode A null-terminated string value containing the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product which is the target of the patches.  This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szPatchPackages A null-terminated string value that contains the list of Windows Installer patches (.msp files).  Each patch can be specified by the full path to the patch package. The patches in the list are delimited by semicolons. At least one patch must be specified.
     * @param {Pointer<UInt32>} pcFiles A pointer to a location that receives the number of files that will be updated on this system by this list of patches specified by <i>szPatchList</i>. This parameter is required.
     * @param {Pointer<UInt32>} pphFileRecords A pointer to a location that receives a pointer to an array of records. The first field (0-index) of each record  contains the full file path of a file that can be updated when the list of patches in <i>szPatchList</i> are applied on this computer. This parameter is required.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetpatchfilelista
     * @since windows8.0
     */
    static MsiGetPatchFileListA(szProductCode, szPatchPackages, pcFiles, pphFileRecords) {
        DllCall("msi.dll\MsiGetPatchFileListA", "ptr", szProductCode, "ptr", szPatchPackages, "ptr", pcFiles, "ptr", pphFileRecords)
    }

    /**
     * The MsiGetPatchFileList function is provided a list of .msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches. (Unicode)
     * @remarks
     * For example, <i>szPatchList</i> could have the value: "c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp".
     * 
     * This function runs in the context of the caller. The product code is searched in the order of user-unmanaged context, user-managed context, and machine context.
     * 
     * You must close all MSIHANDLE objects that are returned by this function by calling 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a> function.
     * 
     * If the function fails, you can obtain extended error information by using the <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a> function.
     * 
     * For more information about using the <b>MsiGetPatchFileList</b> function  see <a href="https://docs.microsoft.com/windows/desktop/Msi/listing-the-files-that-can-be-updated">Listing the Files that can be Updated</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetPatchFileList as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCode A null-terminated string value containing the <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product which is the target of the patches.  This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szPatchPackages A null-terminated string value that contains the list of Windows Installer patches (.msp files).  Each patch can be specified by the full path to the patch package. The patches in the list are delimited by semicolons. At least one patch must be specified.
     * @param {Pointer<UInt32>} pcFiles A pointer to a location that receives the number of files that will be updated on this system by this list of patches specified by <i>szPatchList</i>. This parameter is required.
     * @param {Pointer<UInt32>} pphFileRecords A pointer to a location that receives a pointer to an array of records. The first field (0-index) of each record  contains the full file path of a file that can be updated when the list of patches in <i>szPatchList</i> are applied on this computer. This parameter is required.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetpatchfilelistw
     * @since windows8.0
     */
    static MsiGetPatchFileListW(szProductCode, szPatchPackages, pcFiles, pphFileRecords) {
        DllCall("msi.dll\MsiGetPatchFileListW", "ptr", szProductCode, "ptr", szPatchPackages, "ptr", pcFiles, "ptr", pphFileRecords)
    }

    /**
     * The MsiGetProductProperty function retrieves product properties. These properties are in the product database. (ANSI)
     * @remarks
     * When the 
     * <b>MsiGetProductProperty</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, 
     * <b>MsiGetProductProperty</b> returns ERROR_MORE_DATA, and 
     * <b>MsiGetProductProperty</b> contains the size of the string, in characters, without counting the null character.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetProductProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hProduct Handle to the product obtained from 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szProperty Specifies the property to retrieve. This is case-sensitive.
     * @param {Pointer<PSTR>} lpValueBuf Pointer to a buffer that receives the property value. The value is truncated and null-terminated if <i>lpValueBuf</i> is too small. This parameter can be null.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetproductpropertya
     * @since windows8.0
     */
    static MsiGetProductPropertyA(hProduct, szProperty, lpValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiGetProductPropertyA", "uint", hProduct, "ptr", szProperty, "ptr", lpValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * The MsiGetProductProperty function retrieves product properties. These properties are in the product database. (Unicode)
     * @remarks
     * When the 
     * <b>MsiGetProductProperty</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, 
     * <b>MsiGetProductProperty</b> returns ERROR_MORE_DATA, and 
     * <b>MsiGetProductProperty</b> contains the size of the string, in characters, without counting the null character.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetProductProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hProduct Handle to the product obtained from 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szProperty Specifies the property to retrieve. This is case-sensitive.
     * @param {Pointer<PWSTR>} lpValueBuf Pointer to a buffer that receives the property value. The value is truncated and null-terminated if <i>lpValueBuf</i> is too small. This parameter can be null.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. 
     * 
     * 
     * 
     * 
     * If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetproductpropertyw
     * @since windows8.0
     */
    static MsiGetProductPropertyW(hProduct, szProperty, lpValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiGetProductPropertyW", "uint", hProduct, "ptr", szProperty, "ptr", lpValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * The MsiVerifyPackage function verifies that the given file is an installation package. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiVerifyPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szPackagePath Specifies the path and file name of the package.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiverifypackagea
     * @since windows8.0
     */
    static MsiVerifyPackageA(szPackagePath) {
        DllCall("msi.dll\MsiVerifyPackageA", "ptr", szPackagePath)
    }

    /**
     * The MsiVerifyPackage function verifies that the given file is an installation package. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiVerifyPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szPackagePath Specifies the path and file name of the package.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiverifypackagew
     * @since windows8.0
     */
    static MsiVerifyPackageW(szPackagePath) {
        DllCall("msi.dll\MsiVerifyPackageW", "ptr", szPackagePath)
    }

    /**
     * Returns descriptive information for a feature. (ANSI)
     * @remarks
     * The buffer sizes for the 
     * <b>MsiGetFeatureInfo</b> function should include an extra character for the terminating null character. If a buffer is too small, the returned string is truncated with null, and the buffer size contains the number of characters in the whole string, not including the terminating null character. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetFeatureInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hProduct Handle to the product that owns the feature. This handle is obtained from 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szFeature Feature code for the feature about which information should be returned.
     * @param {Pointer<UInt32>} lpAttributes Pointer to a location containing one or more of the following Attribute flags.
     * @param {Pointer<PSTR>} lpTitleBuf Pointer to a buffer to receive the localized name of the feature, which corresponds to the Title field in the <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature Table</a>.
     * 
     * This parameter is optional and can be null.
     * @param {Pointer<UInt32>} pcchTitleBuf As input, the size of <i>lpTitleBuf</i>. As output, the number of characters returned in <i>lpTitleBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer that is passed in is too small, the count returned does not include the terminating null character.
     * @param {Pointer<PSTR>} lpHelpBuf Pointer to a buffer to receive the localized description of the feature, which corresponds to the Description field for the feature in the  <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a>.
     * This parameter is optional and can be null.
     * @param {Pointer<UInt32>} pcchHelpBuf As input, the size of <i>lpHelpBuf</i>. As output, the number of characters returned in <i>lpHelpBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetfeatureinfoa
     * @since windows8.0
     */
    static MsiGetFeatureInfoA(hProduct, szFeature, lpAttributes, lpTitleBuf, pcchTitleBuf, lpHelpBuf, pcchHelpBuf) {
        DllCall("msi.dll\MsiGetFeatureInfoA", "uint", hProduct, "ptr", szFeature, "ptr", lpAttributes, "ptr", lpTitleBuf, "ptr", pcchTitleBuf, "ptr", lpHelpBuf, "ptr", pcchHelpBuf)
    }

    /**
     * Returns descriptive information for a feature. (Unicode)
     * @remarks
     * The buffer sizes for the 
     * <b>MsiGetFeatureInfo</b> function should include an extra character for the terminating null character. If a buffer is too small, the returned string is truncated with null, and the buffer size contains the number of characters in the whole string, not including the terminating null character. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetFeatureInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hProduct Handle to the product that owns the feature. This handle is obtained from 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szFeature Feature code for the feature about which information should be returned.
     * @param {Pointer<UInt32>} lpAttributes Pointer to a location containing one or more of the following Attribute flags.
     * @param {Pointer<PWSTR>} lpTitleBuf Pointer to a buffer to receive the localized name of the feature, which corresponds to the Title field in the <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature Table</a>.
     * 
     * This parameter is optional and can be null.
     * @param {Pointer<UInt32>} pcchTitleBuf As input, the size of <i>lpTitleBuf</i>. As output, the number of characters returned in <i>lpTitleBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer that is passed in is too small, the count returned does not include the terminating null character.
     * @param {Pointer<PWSTR>} lpHelpBuf Pointer to a buffer to receive the localized description of the feature, which corresponds to the Description field for the feature in the  <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a>.
     * This parameter is optional and can be null.
     * @param {Pointer<UInt32>} pcchHelpBuf As input, the size of <i>lpHelpBuf</i>. As output, the number of characters returned in <i>lpHelpBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetfeatureinfow
     * @since windows8.0
     */
    static MsiGetFeatureInfoW(hProduct, szFeature, lpAttributes, lpTitleBuf, pcchTitleBuf, lpHelpBuf, pcchHelpBuf) {
        DllCall("msi.dll\MsiGetFeatureInfoW", "uint", hProduct, "ptr", szFeature, "ptr", lpAttributes, "ptr", lpTitleBuf, "ptr", pcchTitleBuf, "ptr", lpHelpBuf, "ptr", pcchHelpBuf)
    }

    /**
     * The MsiInstallMissingComponent function installs files that are unexpectedly missing. (ANSI)
     * @remarks
     * The 
     * <b>MsiInstallMissingComponent</b> function resolves the feature(s) that the component belongs to. Then, the product feature that requires the least additional disk space is installed.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiInstallMissingComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product that owns the component to be installed.
     * @param {Pointer<PSTR>} szComponent Identifies the component to be installed.
     * @param {Integer} eInstallState 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiinstallmissingcomponenta
     * @since windows8.0
     */
    static MsiInstallMissingComponentA(szProduct, szComponent, eInstallState) {
        DllCall("msi.dll\MsiInstallMissingComponentA", "ptr", szProduct, "ptr", szComponent, "int", eInstallState)
    }

    /**
     * The MsiInstallMissingComponent function installs files that are unexpectedly missing. (Unicode)
     * @remarks
     * The 
     * <b>MsiInstallMissingComponent</b> function resolves the feature(s) that the component belongs to. Then, the product feature that requires the least additional disk space is installed.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiInstallMissingComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product that owns the component to be installed.
     * @param {Pointer<PWSTR>} szComponent Identifies the component to be installed.
     * @param {Integer} eInstallState 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiinstallmissingcomponentw
     * @since windows8.0
     */
    static MsiInstallMissingComponentW(szProduct, szComponent, eInstallState) {
        DllCall("msi.dll\MsiInstallMissingComponentW", "ptr", szProduct, "ptr", szComponent, "int", eInstallState)
    }

    /**
     * The MsiInstallMissingFile function installs files that are unexpectedly missing. (ANSI)
     * @remarks
     * The 
     * <b>MsiInstallMissingFile</b> function obtains the component that the file belongs to from the file table. Then, the product feature that requires the least additional disk space is installed.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiInstallMissingFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct Specifies the product code for the product that owns the file to be installed.
     * @param {Pointer<PSTR>} szFile Specifies the file to be installed.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiinstallmissingfilea
     * @since windows8.0
     */
    static MsiInstallMissingFileA(szProduct, szFile) {
        DllCall("msi.dll\MsiInstallMissingFileA", "ptr", szProduct, "ptr", szFile)
    }

    /**
     * The MsiInstallMissingFile function installs files that are unexpectedly missing. (Unicode)
     * @remarks
     * The 
     * <b>MsiInstallMissingFile</b> function obtains the component that the file belongs to from the file table. Then, the product feature that requires the least additional disk space is installed.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiInstallMissingFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct Specifies the product code for the product that owns the file to be installed.
     * @param {Pointer<PWSTR>} szFile Specifies the file to be installed.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiinstallmissingfilew
     * @since windows8.0
     */
    static MsiInstallMissingFileW(szProduct, szFile) {
        DllCall("msi.dll\MsiInstallMissingFileW", "ptr", szProduct, "ptr", szFile)
    }

    /**
     * The MsiLocateComponent function returns the full path to an installed component without a product code. (ANSI)
     * @remarks
     * The 
     * <b>MsiLocateComponent</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:
     * 
     * <ul>
     * <li>INSTALLSTATE_ABSENT 
     * 
     * 
     * The application did not properly ensure that the feature was installed by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> and, if necessary, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>.
     * 
     * </li>
     * <li>INSTALLSTATE_UNKNOWN 
     * 
     * 
     * The feature is not published. The application should have determined this earlier by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiqueryfeaturestatea">MsiQueryFeatureState</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumfeaturesa">MsiEnumFeatures</a>. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> as well, either 
     * <b>MsiUseFeature</b> was not called, or its return value was not properly checked.
     * 
     * </li>
     * </ul>
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiLocateComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szComponent Specifies the component ID of the component to be located.
     * @param {Pointer<PSTR>} lpPathBuf Pointer to a variable that receives the path to the component. The variable includes the terminating null character.
     * @param {Pointer<UInt32>} pcchBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. Upon success of the 
     * <b>MsiLocateComponent</b> function, the variable pointed to by <i>pcchBuf</i> contains the count of characters not including the terminating null character. If the size of the buffer passed in is too small, the function returns INSTALLSTATE_MOREDATA. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msilocatecomponenta
     * @since windows8.0
     */
    static MsiLocateComponentA(szComponent, lpPathBuf, pcchBuf) {
        DllCall("msi.dll\MsiLocateComponentA", "ptr", szComponent, "ptr", lpPathBuf, "ptr", pcchBuf)
    }

    /**
     * The MsiLocateComponent function returns the full path to an installed component without a product code. (Unicode)
     * @remarks
     * The 
     * <b>MsiLocateComponent</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:
     * 
     * <ul>
     * <li>INSTALLSTATE_ABSENT 
     * 
     * 
     * The application did not properly ensure that the feature was installed by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> and, if necessary, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiconfigurefeaturea">MsiConfigureFeature</a>.
     * 
     * </li>
     * <li>INSTALLSTATE_UNKNOWN 
     * 
     * 
     * The feature is not published. The application should have determined this earlier by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiqueryfeaturestatea">MsiQueryFeatureState</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msienumfeaturesa">MsiEnumFeatures</a>. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiusefeaturea">MsiUseFeature</a> as well, either 
     * <b>MsiUseFeature</b> was not called, or its return value was not properly checked.
     * 
     * </li>
     * </ul>
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiLocateComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szComponent Specifies the component ID of the component to be located.
     * @param {Pointer<PWSTR>} lpPathBuf Pointer to a variable that receives the path to the component. The variable includes the terminating null character.
     * @param {Pointer<UInt32>} pcchBuf Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. Upon success of the 
     * <b>MsiLocateComponent</b> function, the variable pointed to by <i>pcchBuf</i> contains the count of characters not including the terminating null character. If the size of the buffer passed in is too small, the function returns INSTALLSTATE_MOREDATA. 
     * 
     * 
     * 
     * 
     * If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msilocatecomponentw
     * @since windows8.0
     */
    static MsiLocateComponentW(szComponent, lpPathBuf, pcchBuf) {
        DllCall("msi.dll\MsiLocateComponentW", "ptr", szComponent, "ptr", lpPathBuf, "ptr", pcchBuf)
    }

    /**
     * The MsiSourceListClearAll function removes all network sources from the source list of a patch or product in a specified context. For more information, see Source Resiliency. (ANSI)
     * @remarks
     * An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * If a network source is the current source for the product, this function forces the installer to search the source list for a valid source the next time a source is needed. If the current source is media or a URL source, it is still valid after this call and the source list is not searched unless <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistforceresolutiona">MsiSourceListForceResolution</a> is also called.
     * 
     * 
     * If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT. 
     * 
     * 
     * 
     * If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * This function cannot modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListClearAll as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {Pointer<PSTR>} szUserName The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).  
     * 
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistclearalla
     * @since windows8.0
     */
    static MsiSourceListClearAllA(szProduct, szUserName) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiSourceListClearAllA", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved)
    }

    /**
     * The MsiSourceListClearAll function removes all network sources from the source list of a patch or product in a specified context. For more information, see Source Resiliency. (Unicode)
     * @remarks
     * An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * If a network source is the current source for the product, this function forces the installer to search the source list for a valid source the next time a source is needed. If the current source is media or a URL source, it is still valid after this call and the source list is not searched unless <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistforceresolutiona">MsiSourceListForceResolution</a> is also called.
     * 
     * 
     * If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT. 
     * 
     * 
     * 
     * If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * This function cannot modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListClearAll as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {Pointer<PWSTR>} szUserName The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).  
     * 
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistclearallw
     * @since windows8.0
     */
    static MsiSourceListClearAllW(szProduct, szUserName) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiSourceListClearAllW", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved)
    }

    /**
     * Adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context. (ANSI)
     * @remarks
     * An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * Note that this function merely adds the new source  to the list of valid sources. If another source was used to install the product, the new source is not used until the current source is unavailable.
     * 
     * 
     * 
     * It is the responsibility of the caller to ensure that the provided source is a valid source image for the product.
     * 
     * 
     * 
     * If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed only in the per-user state, the function returns ERROR_UNKNOWN_PRODUCT. 
     * 
     * 
     * 
     * If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * 
     * 
     * This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListAddSource as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {Pointer<PSTR>} szUserName The user name for a per-user installation. On Windows 2000 or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @param {Pointer<PSTR>} szSource Pointer to the string specifying the source.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistaddsourcea
     * @since windows8.0
     */
    static MsiSourceListAddSourceA(szProduct, szUserName, szSource) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiSourceListAddSourceA", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved, "ptr", szSource)
    }

    /**
     * Adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context. (Unicode)
     * @remarks
     * An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * Note that this function merely adds the new source  to the list of valid sources. If another source was used to install the product, the new source is not used until the current source is unavailable.
     * 
     * 
     * 
     * It is the responsibility of the caller to ensure that the provided source is a valid source image for the product.
     * 
     * 
     * 
     * If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed only in the per-user state, the function returns ERROR_UNKNOWN_PRODUCT. 
     * 
     * 
     * 
     * If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * 
     * 
     * This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListAddSource as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {Pointer<PWSTR>} szUserName The user name for a per-user installation. On Windows 2000 or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @param {Pointer<PWSTR>} szSource Pointer to the string specifying the source.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistaddsourcew
     * @since windows8.0
     */
    static MsiSourceListAddSourceW(szProduct, szUserName, szSource) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiSourceListAddSourceW", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved, "ptr", szSource)
    }

    /**
     * The MsiSourceListForceResolution function forces the installer to search the source list for a valid product source the next time a source is required. (ANSI)
     * @remarks
     * An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed) per-user installations.  
     * 
     * If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT. 
     * 
     * 
     * 
     * If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListForceResolution as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {Pointer<PSTR>} szUserName The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user). 
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistforceresolutiona
     * @since windows8.0
     */
    static MsiSourceListForceResolutionA(szProduct, szUserName) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiSourceListForceResolutionA", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved)
    }

    /**
     * The MsiSourceListForceResolution function forces the installer to search the source list for a valid product source the next time a source is required. (Unicode)
     * @remarks
     * An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed) per-user installations.  
     * 
     * If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT. 
     * 
     * 
     * 
     * If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListForceResolution as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.
     * @param {Pointer<PWSTR>} szUserName The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user). 
     * 
     * An empty string or <b>NULL</b> for a per-machine installation.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistforceresolutionw
     * @since windows8.0
     */
    static MsiSourceListForceResolutionW(szProduct, szUserName) {
        static dwReserved := 0 ;Reserved parameters must always be NULL

        DllCall("msi.dll\MsiSourceListForceResolutionW", "ptr", szProduct, "ptr", szUserName, "uint", dwReserved)
    }

    /**
     * Adds or reorders the set of sources of a patch or product in a specified context. It can also create a source list for a patch that does not exist in the specified context. (ANSI)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListAddSourceEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szSource Source to add or move. This parameter is expected to contain only the path without the filename. 
     * The filename is already registered as "PackageName" and can be manipulated through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistsetinfoa">MsiSourceListSetInfo</a>. This argument is required.
     * @param {Integer} dwIndex This parameter provides the new index for the source. All sources are indexed in the source list from 1 to <i>N</i>, where <i>N</i> is the count of sources in the list. Every source in the list has a unique index.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to 0 (zero), the new source is appended to the existing list. If <i>dwIndex</i> is set to 0 and the source already exists in the list, no update is done on the list.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to a  non-zero value less than count (<i>N</i>), the new source is placed at the specified index and the other sources  are re-indexed. If the source already exists, it is moved to the specified index and the other sources are re-indexed.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to a  non-zero value greater than the count of sources (<i>N</i>), the new source is appended to the existing list.  If the source already exists, it is moved to the end of the list and the other sources are re-indexed.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistaddsourceexa
     * @since windows8.0
     */
    static MsiSourceListAddSourceExA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource, dwIndex) {
        DllCall("msi.dll\MsiSourceListAddSourceExA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szSource, "uint", dwIndex)
    }

    /**
     * Adds or reorders the set of sources of a patch or product in a specified context. It can also create a source list for a patch that does not exist in the specified context. (Unicode)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListAddSourceEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szSource Source to add or move. This parameter is expected to contain only the path without the filename. 
     * The filename is already registered as "PackageName" and can be manipulated through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistsetinfoa">MsiSourceListSetInfo</a>. This argument is required.
     * @param {Integer} dwIndex This parameter provides the new index for the source. All sources are indexed in the source list from 1 to <i>N</i>, where <i>N</i> is the count of sources in the list. Every source in the list has a unique index.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to 0 (zero), the new source is appended to the existing list. If <i>dwIndex</i> is set to 0 and the source already exists in the list, no update is done on the list.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to a  non-zero value less than count (<i>N</i>), the new source is placed at the specified index and the other sources  are re-indexed. If the source already exists, it is moved to the specified index and the other sources are re-indexed.
     * 
     * If <b>MsiSourceListAddSourceEx</b> is called with a new source  and <i>dwIndex</i> set to a  non-zero value greater than the count of sources (<i>N</i>), the new source is appended to the existing list.  If the source already exists, it is moved to the end of the list and the other sources are re-indexed.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistaddsourceexw
     * @since windows8.0
     */
    static MsiSourceListAddSourceExW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource, dwIndex) {
        DllCall("msi.dll\MsiSourceListAddSourceExW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szSource, "uint", dwIndex)
    }

    /**
     * The MsiSourceListAddMediaDisk function adds or updates a disk of the media source of a registered product or patch. (ANSI)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownmedia">AllowLockDownMedia</a> and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListAddMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM .</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwDiskId This parameter provides the ID of the disk being added or updated.
     * @param {Pointer<PSTR>} szVolumeLabel The <i>szVolumeLabel</i> provides the label of the disk being added or updated. An update  overwrites the existing volume label in the registry. To change the disk prompt only, get the existing volume label from the registry and provide it in this call along with the new disk prompt.  Passing a <b>NULL</b> or empty string for <i>szVolumeLabel</i> registers an empty string (0 bytes in length) as the volume label.
     * @param {Pointer<PSTR>} szDiskPrompt On entry to <b>MsiSourceListAddMediaDisk</b>, <i>szDiskPrompt</i> provides the disk prompt of the disk being added or updated. An update overwrites the registered disk prompt.  
     * To change the volume label  only, get the existing disk prompt that is registered and provide it when calling <b>MsiSourceListAddMediaDisk</b> along with the new volume label. Passing <b>NULL</b> or an empty string registers an empty string (0 bytes in length) as the disk prompt.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistaddmediadiska
     * @since windows8.0
     */
    static MsiSourceListAddMediaDiskA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId, szVolumeLabel, szDiskPrompt) {
        DllCall("msi.dll\MsiSourceListAddMediaDiskA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwDiskId, "ptr", szVolumeLabel, "ptr", szDiskPrompt)
    }

    /**
     * The MsiSourceListAddMediaDisk function adds or updates a disk of the media source of a registered product or patch. (Unicode)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownmedia">AllowLockDownMedia</a> and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListAddMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM .</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwDiskId This parameter provides the ID of the disk being added or updated.
     * @param {Pointer<PWSTR>} szVolumeLabel The <i>szVolumeLabel</i> provides the label of the disk being added or updated. An update  overwrites the existing volume label in the registry. To change the disk prompt only, get the existing volume label from the registry and provide it in this call along with the new disk prompt.  Passing a <b>NULL</b> or empty string for <i>szVolumeLabel</i> registers an empty string (0 bytes in length) as the volume label.
     * @param {Pointer<PWSTR>} szDiskPrompt On entry to <b>MsiSourceListAddMediaDisk</b>, <i>szDiskPrompt</i> provides the disk prompt of the disk being added or updated. An update overwrites the registered disk prompt.  
     * To change the volume label  only, get the existing disk prompt that is registered and provide it when calling <b>MsiSourceListAddMediaDisk</b> along with the new volume label. Passing <b>NULL</b> or an empty string registers an empty string (0 bytes in length) as the disk prompt.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistaddmediadiskw
     * @since windows8.0
     */
    static MsiSourceListAddMediaDiskW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId, szVolumeLabel, szDiskPrompt) {
        DllCall("msi.dll\MsiSourceListAddMediaDiskW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwDiskId, "ptr", szVolumeLabel, "ptr", szDiskPrompt)
    }

    /**
     * Removes an existing source for a product or patch in a specified context. (ANSI)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListClearSource as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string "S-1-1-0" (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szSource Source to remove. This parameter is expected to contain only the path without the filename. 
     * The filename is already registered as "PackageName" and can be manipulated through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistsetinfoa">MsiSourceListSetInfo</a>. This argument is required.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistclearsourcea
     * @since windows8.0
     */
    static MsiSourceListClearSourceA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource) {
        DllCall("msi.dll\MsiSourceListClearSourceA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szSource)
    }

    /**
     * Removes an existing source for a product or patch in a specified context. (Unicode)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListClearSource as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string "S-1-1-0" (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szSource Source to remove. This parameter is expected to contain only the path without the filename. 
     * The filename is already registered as "PackageName" and can be manipulated through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisourcelistsetinfoa">MsiSourceListSetInfo</a>. This argument is required.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistclearsourcew
     * @since windows8.0
     */
    static MsiSourceListClearSourceW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szSource) {
        DllCall("msi.dll\MsiSourceListClearSourceW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szSource)
    }

    /**
     * The MsiSourceListClearMediaDisk function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context. (ANSI)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListClearMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwDiskId This parameter provides the ID of the disk being removed.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistclearmediadiska
     * @since windows8.0
     */
    static MsiSourceListClearMediaDiskA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId) {
        DllCall("msi.dll\MsiSourceListClearMediaDiskA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwDiskId)
    }

    /**
     * The MsiSourceListClearMediaDisk function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context. (Unicode)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListClearMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>. 
     * </div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwDiskId This parameter provides the ID of the disk being removed.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistclearmediadiskw
     * @since windows8.0
     */
    static MsiSourceListClearMediaDiskW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwDiskId) {
        DllCall("msi.dll\MsiSourceListClearMediaDiskW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwDiskId)
    }

    /**
     * The MsiSourceListClearAllEx function removes all the existing sources of a given source type for the specified product or patch instance. (ANSI)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListClearAllEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="_MSISOURCETYPE_MEDIA"></a><a id="_msisourcetype_media"></a><dl>
     * <dt><b> MSISOURCETYPE_MEDIA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is media.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistclearallexa
     * @since windows8.0
     */
    static MsiSourceListClearAllExA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions) {
        DllCall("msi.dll\MsiSourceListClearAllExA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions)
    }

    /**
     * The MsiSourceListClearAllEx function removes all the existing sources of a given source type for the specified product or patch instance. (Unicode)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListClearAllEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="_MSISOURCETYPE_MEDIA"></a><a id="_msisourcetype_media"></a><dl>
     * <dt><b> MSISOURCETYPE_MEDIA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is media.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistclearallexw
     * @since windows8.0
     */
    static MsiSourceListClearAllExW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions) {
        DllCall("msi.dll\MsiSourceListClearAllExW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions)
    }

    /**
     * The MsiSourceListForceResolutionEx function removes the registration of the property called &quot;LastUsedSource&quot;. (ANSI)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListForceResolutionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value . 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistforceresolutionexa
     * @since windows8.0
     */
    static MsiSourceListForceResolutionExA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions) {
        DllCall("msi.dll\MsiSourceListForceResolutionExA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions)
    }

    /**
     * The MsiSourceListForceResolutionEx function removes the registration of the property called &quot;LastUsedSource&quot;. (Unicode)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListForceResolutionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value . 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistforceresolutionexw
     * @since windows8.0
     */
    static MsiSourceListForceResolutionExW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions) {
        DllCall("msi.dll\MsiSourceListForceResolutionExW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions)
    }

    /**
     * Sets information about the source list for a product or patch in a specific context. (ANSI)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * An exception to the above rule is setting "LastUsedSource" to one of the registered sources. If the source is already registered, a non-administrator can set "LastUsedSource" to their own installations (managed or non-managed) and per-machine installations, irrespective of policies. 
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListSetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns "ERROR_INVALID_PARAMETER".</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string "S-1-1-0" (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * If the property being set is "LastUsedSource", this parameter also specifies the type of source as network or URL. In this case, the <i>dwOptions</i> parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szProperty 
     * @param {Pointer<PSTR>} szValue The new value of the property. No validation of the new value is performed. This value cannot be <b>NULL</b>. It can be an empty string.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistsetinfoa
     * @since windows8.0
     */
    static MsiSourceListSetInfoA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue) {
        DllCall("msi.dll\MsiSourceListSetInfoA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szProperty, "ptr", szValue)
    }

    /**
     * Sets information about the source list for a product or patch in a specific context. (Unicode)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context. 
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * An exception to the above rule is setting "LastUsedSource" to one of the registered sources. If the source is already registered, a non-administrator can set "LastUsedSource" to their own installations (managed or non-managed) and per-machine installations, irrespective of policies. 
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListSetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szUserSid This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return <b>ERROR_UNKNOWN_PRODUCT</b> or <b>ERROR_UNKNOWN_PATCH</b>. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be <b>MSIINSTALLCONTEXT_MACHINE</b>.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a particular user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns "ERROR_INVALID_PARAMETER".</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string "S-1-1-0" (everyone) should not be used. Setting the SID value to "S-1-1-0" fails and returns <b>ERROR_INVALID_PARAM</b>.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * If the property being set is "LastUsedSource", this parameter also specifies the type of source as network or URL. In this case, the <i>dwOptions</i> parameter must be a combination of one of the following <b>MSISOURCETYPE_*</b> constants and one of the following <b>MSICODE_*</b> constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szProperty 
     * @param {Pointer<PWSTR>} szValue The new value of the property. No validation of the new value is performed. This value cannot be <b>NULL</b>. It can be an empty string.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistsetinfow
     * @since windows8.0
     */
    static MsiSourceListSetInfoW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue) {
        DllCall("msi.dll\MsiSourceListSetInfoW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szProperty, "ptr", szValue)
    }

    /**
     * The MsiSourceListGetInfo function retrieves information about the source list for a product or patch in a specific context. (ANSI)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListGetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szUserSid This parameter can be a string security identifier (SID) that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PSTR>} szProperty 
     * @param {Pointer<PSTR>} szValue An output buffer that receives  the information. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If the <i>szValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters. 
     * 
     * If <i>szValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchValue A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szValue</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistgetinfoa
     * @since windows8.0
     */
    static MsiSourceListGetInfoA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue, pcchValue) {
        DllCall("msi.dll\MsiSourceListGetInfoA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szProperty, "ptr", szValue, "ptr", pcchValue)
    }

    /**
     * The MsiSourceListGetInfo function retrieves information about the source list for a product or patch in a specific context. (Unicode)
     * @remarks
     * Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.
     * 
     * Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com/windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com/windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListGetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szUserSid This parameter can be a string security identifier (SID) that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Specifies enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * <div class="alert"><b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<PWSTR>} szProperty 
     * @param {Pointer<PWSTR>} szValue An output buffer that receives  the information. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If the <i>szValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters. 
     * 
     * If <i>szValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchValue A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szValue</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistgetinfow
     * @since windows8.0
     */
    static MsiSourceListGetInfoW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, szProperty, szValue, pcchValue) {
        DllCall("msi.dll\MsiSourceListGetInfoW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "ptr", szProperty, "ptr", szValue, "ptr", pcchValue)
    }

    /**
     * The MsiSourceListEnumSources function enumerates the sources in the source list of a specified patch or product. (ANSI)
     * @remarks
     * When making multiple calls to <b>MsiSourceListEnumSources</b> to enumerate all sources for a single product instance, each call must be made from the same thread.
     * 
     * An administrator can enumerate per-user unmanaged and managed installations for themselves, 		
     * 		per-machine installations, and per-user managed installations for any user. An administrator cannot 			
     * 		enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate 		
     * 		their own per-user unmanaged and managed installations and per-machine installations.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListEnumSources as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szUserSid A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A <b>NULL</b> indicates the current user who is logged on. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumSources</b> function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.  The index should be incremented only if the previous call returned ERROR_SUCCESS.
     * @param {Pointer<PSTR>} szSource A pointer to a  buffer that receives the path to the source that is  being enumerated. This buffer should be large enough to contain the received value. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szSource</i> is set to <b>NULL</b> and <i>pcchSource</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szSource</i> buffer large enough to contain *<i>pcchSource</i> + 1 characters. 
     * 
     * If <i>szSource</i> and <i>pcchSource</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchSource A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSource</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSource</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistenumsourcesa
     * @since windows8.0
     */
    static MsiSourceListEnumSourcesA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, szSource, pcchSource) {
        DllCall("msi.dll\MsiSourceListEnumSourcesA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwIndex, "ptr", szSource, "ptr", pcchSource)
    }

    /**
     * The MsiSourceListEnumSources function enumerates the sources in the source list of a specified patch or product. (Unicode)
     * @remarks
     * When making multiple calls to <b>MsiSourceListEnumSources</b> to enumerate all sources for a single product instance, each call must be made from the same thread.
     * 
     * An administrator can enumerate per-user unmanaged and managed installations for themselves, 		
     * 		per-machine installations, and per-user managed installations for any user. An administrator cannot 			
     * 		enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate 		
     * 		their own per-user unmanaged and managed installations and per-machine installations.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListEnumSources as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szUserSid A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A <b>NULL</b> indicates the current user who is logged on. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_NETWORK"></a><a id="msisourcetype_network"></a><dl>
     * <dt><b>MSISOURCETYPE_NETWORK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The  source  is  a network type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSISOURCETYPE_URL"></a><a id="msisourcetype_url"></a><dl>
     * <dt><b>MSISOURCETYPE_URL</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The source is a URL type.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumSources</b> function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.  The index should be incremented only if the previous call returned ERROR_SUCCESS.
     * @param {Pointer<PWSTR>} szSource A pointer to a  buffer that receives the path to the source that is  being enumerated. This buffer should be large enough to contain the received value. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szSource</i> is set to <b>NULL</b> and <i>pcchSource</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szSource</i> buffer large enough to contain *<i>pcchSource</i> + 1 characters. 
     * 
     * If <i>szSource</i> and <i>pcchSource</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchSource A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSource</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szSource</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistenumsourcesw
     * @since windows8.0
     */
    static MsiSourceListEnumSourcesW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, szSource, pcchSource) {
        DllCall("msi.dll\MsiSourceListEnumSourcesW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwIndex, "ptr", szSource, "ptr", pcchSource)
    }

    /**
     * The MsiSourceListEnumMediaDisks function enumerates the list of disks registered for the media source for a patch or product. (ANSI)
     * @remarks
     * When making multiple calls to <b>MsiSourceListEnumMediaDisks</b> to enumerate all the sources for a single product instance, each call must be made from the same thread.
     * 
     * An administrator can enumerate per-user unmanaged and managed installations for themselves, 		
     * 		per-machine installations, and per-user managed installations for any user. An administrator cannot 			
     * 		enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate 		
     * 		their own per-user unmanaged and managed installations and per-machine installations.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListEnumMediaDisks as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PSTR>} szUserSid A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value that  specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumMediaDisks</b>  function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.
     * @param {Pointer<UInt32>} pdwDiskId On entry to <b>MsiSourceListEnumMediaDisks</b> this parameter provides a pointer to a <b>DWORD</b> to receive the ID of the disk that is being enumerated.   This parameter is optional.
     * @param {Pointer<PSTR>} szVolumeLabel An output buffer that receives  the volume label of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchVolumeLabel</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szVolumeLabel</i> and <i>pcchVolumeLabel</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchVolumeLabel A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szVolumeLabel</i> buffer. When the function returns, this parameter is the number of <b>TCHAR</b> in the received  value,  not including the terminating null character. 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szVolumeLabel</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @param {Pointer<PSTR>} szDiskPrompt An output buffer that receives  the disk prompt of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If the <i>szDiskPrompt</i> is set to <b>NULL</b> and <i>pcchDiskPrompt</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szDiskPrompt</i> buffer large enough to contain *<i>pcchDiskPrompt</i> + 1 characters.
     * 
     * If <i>szDiskPrompt</i> and <i>pcchDiskPrompt</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchDiskPrompt A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szDiskPrompt</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szDiskPrompt</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistenummediadisksa
     * @since windows8.0
     */
    static MsiSourceListEnumMediaDisksA(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, pdwDiskId, szVolumeLabel, pcchVolumeLabel, szDiskPrompt, pcchDiskPrompt) {
        DllCall("msi.dll\MsiSourceListEnumMediaDisksA", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwIndex, "ptr", pdwDiskId, "ptr", szVolumeLabel, "ptr", pcchVolumeLabel, "ptr", szDiskPrompt, "ptr", pcchDiskPrompt)
    }

    /**
     * The MsiSourceListEnumMediaDisks function enumerates the list of disks registered for the media source for a patch or product. (Unicode)
     * @remarks
     * When making multiple calls to <b>MsiSourceListEnumMediaDisks</b> to enumerate all the sources for a single product instance, each call must be made from the same thread.
     * 
     * An administrator can enumerate per-user unmanaged and managed installations for themselves, 		
     * 		per-machine installations, and per-user managed installations for any user. An administrator cannot 			
     * 		enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate 		
     * 		their own per-user unmanaged and managed installations and per-machine installations.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiSourceListEnumMediaDisks as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProductCodeOrPatchCode The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.
     * @param {Pointer<PWSTR>} szUserSid A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. 
     * 
     * <table>
     * <tr>
     * <th>Type of SID</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="NULL"></a><a id="null"></a><dl>
     * <dt><b><b>NULL</b></b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="User_SID"></a><a id="user_sid"></a><a id="USER_SID"></a><dl>
     * <dt><b>User SID</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="s-1-1-0"></a><a id="S-1-1-0"></a><dl>
     * <dt><b>s-1-1-0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * <div class="alert"><b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</div>
     * <div> </div>
     * @param {Integer} dwContext 
     * @param {Integer} dwOptions The <i>dwOptions</i> value that  specifies the meaning of <i>szProductCodeOrPatchCode</i>.
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PRODUCT"></a><a id="msicode_product"></a><dl>
     * <dt><b>MSICODE_PRODUCT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a product code GUID. 
     * 
     * 
     * 
     * 							
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSICODE_PATCH"></a><a id="msicode_patch"></a><dl>
     * <dt><b>MSICODE_PATCH</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <i>szProductCodeOrPatchCode</i> is a patch code GUID.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} dwIndex The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumMediaDisks</b>  function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.
     * @param {Pointer<UInt32>} pdwDiskId On entry to <b>MsiSourceListEnumMediaDisks</b> this parameter provides a pointer to a <b>DWORD</b> to receive the ID of the disk that is being enumerated.   This parameter is optional.
     * @param {Pointer<PWSTR>} szVolumeLabel An output buffer that receives  the volume label of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchVolumeLabel</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If <i>szVolumeLabel</i> and <i>pcchVolumeLabel</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchVolumeLabel A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szVolumeLabel</i> buffer. When the function returns, this parameter is the number of <b>TCHAR</b> in the received  value,  not including the terminating null character. 
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szVolumeLabel</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @param {Pointer<PWSTR>} szDiskPrompt An output buffer that receives  the disk prompt of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.
     * 
     * 
     * 
     * If the <i>szDiskPrompt</i> is set to <b>NULL</b> and <i>pcchDiskPrompt</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szDiskPrompt</i> buffer large enough to contain *<i>pcchDiskPrompt</i> + 1 characters.
     * 
     * If <i>szDiskPrompt</i> and <i>pcchDiskPrompt</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.
     * @param {Pointer<UInt32>} pcchDiskPrompt A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szDiskPrompt</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.
     * 
     * This parameter can be set to <b>NULL</b> only if <i>szDiskPrompt</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msisourcelistenummediadisksw
     * @since windows8.0
     */
    static MsiSourceListEnumMediaDisksW(szProductCodeOrPatchCode, szUserSid, dwContext, dwOptions, dwIndex, pdwDiskId, szVolumeLabel, pcchVolumeLabel, szDiskPrompt, pcchDiskPrompt) {
        DllCall("msi.dll\MsiSourceListEnumMediaDisksW", "ptr", szProductCodeOrPatchCode, "ptr", szUserSid, "int", dwContext, "uint", dwOptions, "uint", dwIndex, "ptr", pdwDiskId, "ptr", szVolumeLabel, "ptr", pcchVolumeLabel, "ptr", szDiskPrompt, "ptr", pcchDiskPrompt)
    }

    /**
     * The MsiGetFileVersion returns the version string and language string in the format that the installer expects to find them in the database. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiGetFileVersion as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szFilePath Specifies the path to the file.
     * @param {Pointer<PSTR>} lpVersionBuf Returns the file version. 
     * 
     * Set to 0 for language information only.
     * @param {Pointer<UInt32>} pcchVersionBuf In and out buffer count as the number of <b>TCHAR</b>. 
     * 
     * Set to 0 (zero) for language information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @param {Pointer<PSTR>} lpLangBuf Returns the file language. 
     * 
     * Set to 0 (zero) for version information only.
     * @param {Pointer<UInt32>} pcchLangBuf In and out buffer count as the number of <b>TCHAR</b>. 
     * 
     * Set to 0 (zero) for version information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetfileversiona
     * @since windows8.0
     */
    static MsiGetFileVersionA(szFilePath, lpVersionBuf, pcchVersionBuf, lpLangBuf, pcchLangBuf) {
        DllCall("msi.dll\MsiGetFileVersionA", "ptr", szFilePath, "ptr", lpVersionBuf, "ptr", pcchVersionBuf, "ptr", lpLangBuf, "ptr", pcchLangBuf)
    }

    /**
     * The MsiGetFileVersion returns the version string and language string in the format that the installer expects to find them in the database. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiGetFileVersion as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szFilePath Specifies the path to the file.
     * @param {Pointer<PWSTR>} lpVersionBuf Returns the file version. 
     * 
     * Set to 0 for language information only.
     * @param {Pointer<UInt32>} pcchVersionBuf In and out buffer count as the number of <b>TCHAR</b>. 
     * 
     * Set to 0 (zero) for language information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @param {Pointer<PWSTR>} lpLangBuf Returns the file language. 
     * 
     * Set to 0 (zero) for version information only.
     * @param {Pointer<UInt32>} pcchLangBuf In and out buffer count as the number of <b>TCHAR</b>. 
     * 
     * Set to 0 (zero) for version information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetfileversionw
     * @since windows8.0
     */
    static MsiGetFileVersionW(szFilePath, lpVersionBuf, pcchVersionBuf, lpLangBuf, pcchLangBuf) {
        DllCall("msi.dll\MsiGetFileVersionW", "ptr", szFilePath, "ptr", lpVersionBuf, "ptr", pcchVersionBuf, "ptr", lpLangBuf, "ptr", pcchLangBuf)
    }

    /**
     * The MsiGetFileHash function takes the path to a file and returns a 128-bit hash of that file. Authoring tools may use MsiGetFileHash to obtain the file hash needed to populate the MsiFileHash table. (ANSI)
     * @remarks
     * The entire 128-bit file hash is returned as four 32-bit fields. The numbering of the four fields is zero-based. The values returned by 
     * <b>MsiGetFileHash</b> correspond to the four fields of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msifilehashinfo">MSIFILEHASHINFO</a> structure. The first field corresponds to the HashPart1 column of the MsiFileHash table, the second field corresponds to the HashPart2 column, the third field corresponds to the HashPart3 column, and the fourth field corresponds to the HashPart4 column.
     * 
     * The hash information entered into the MsiFileHash table must be obtained by calling 
     * <b>MsiGetFileHash</b> or the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installer-filehash">FileHash</a> method. Do not attempt to use other methods to generate the file hash.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetFileHash as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szFilePath Path to file that is to be hashed.
     * @param {Integer} dwOptions The value in this column must be 0. This parameter is reserved for future use.
     * @param {Pointer<MSIFILEHASHINFO>} pHash Pointer to the returned file hash information.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetfilehasha
     * @since windows8.0
     */
    static MsiGetFileHashA(szFilePath, dwOptions, pHash) {
        DllCall("msi.dll\MsiGetFileHashA", "ptr", szFilePath, "uint", dwOptions, "ptr", pHash)
    }

    /**
     * The MsiGetFileHash function takes the path to a file and returns a 128-bit hash of that file. Authoring tools may use MsiGetFileHash to obtain the file hash needed to populate the MsiFileHash table. (Unicode)
     * @remarks
     * The entire 128-bit file hash is returned as four 32-bit fields. The numbering of the four fields is zero-based. The values returned by 
     * <b>MsiGetFileHash</b> correspond to the four fields of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/ns-msi-msifilehashinfo">MSIFILEHASHINFO</a> structure. The first field corresponds to the HashPart1 column of the MsiFileHash table, the second field corresponds to the HashPart2 column, the third field corresponds to the HashPart3 column, and the fourth field corresponds to the HashPart4 column.
     * 
     * The hash information entered into the MsiFileHash table must be obtained by calling 
     * <b>MsiGetFileHash</b> or the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installer-filehash">FileHash</a> method. Do not attempt to use other methods to generate the file hash.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetFileHash as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szFilePath Path to file that is to be hashed.
     * @param {Integer} dwOptions The value in this column must be 0. This parameter is reserved for future use.
     * @param {Pointer<MSIFILEHASHINFO>} pHash Pointer to the returned file hash information.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetfilehashw
     * @since windows8.0
     */
    static MsiGetFileHashW(szFilePath, dwOptions, pHash) {
        DllCall("msi.dll\MsiGetFileHashW", "ptr", szFilePath, "uint", dwOptions, "ptr", pHash)
    }

    /**
     * The MsiGetFileSignatureInformation function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash. (ANSI)
     * @remarks
     * When requesting only the certificate context, an invalid hash in the digital signature does not cause 
     * <b>MsiGetFileSignatureInformation</b> to return a fatal error. To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag in the <i>dwFlags</i> parameter.
     * 
     * The certificate context and hash information is extracted from the file by a call to <a href="https://docs.microsoft.com/windows/desktop/api/wintrust/nf-wintrust-winverifytrust">WinVerifyTrust</a>. The <i>ppcCertContext</i> parameter is a duplicate of the signer certificate context from the signature. It is the responsibility of the caller to call <i>CertFreeCertificateContext</i> to free the certificate context when finished.
     * 
     * Note that 
     * <b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetFileSignatureInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szSignedObjectPath Pointer to a null-terminated string specifying the full path to the file that contains the digital signature.
     * @param {Integer} dwFlags Special error case flags. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSI_INVALID_HASH_IS_FATAL"></a><a id="msi_invalid_hash_is_fatal"></a><dl>
     * <dt><b>MSI_INVALID_HASH_IS_FATAL</b></dt>
     * <dt>0x1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Without this flag set, and when requesting only the certificate context, an invalid hash in the digital signature does not cause 
     * <b>MsiGetFileSignatureInformation</b> to return a fatal error. 
     * 
     * 
     * 
     * 
     * To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<CERT_CONTEXT>} ppcCertContext Returned signer certificate context
     * @param {Pointer<Byte>} pbHashData Returned hash buffer. This parameter can be <b>NULL</b> if the hash data is not being requested.
     * @param {Pointer<UInt32>} pcbHashData Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbHashData</i> parameter. This parameter cannot be <b>NULL</b> if <i>pbHashData</i> is non-<b>NULL</b>. If ERROR_MORE_DATA is returned, <i>pbHashData</i> gives the size of the buffer required to hold the hash data. If ERROR_SUCCESS is returned, it gives the number of bytes written to the hash buffer. The <i>pcbHashData</i> parameter is ignored if <i>pbHashData</i> is <b>NULL</b>.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS/S_OK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Successful completion.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Invalid parameter was specified.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 
     * <a href="https://docs.microsoft.com/windows/desktop/api/wintrust/nf-wintrust-winverifytrust">WinVerifyTrust</a> is not available on the system. 
     * <b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data. If ERROR_MORE_DATA is returned, <i>pcbHashData</i> gives the size of the buffer required to hold the hash data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_NOSIGNATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * File is not signed
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_BAD_DIGEST</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file's current hash is invalid according to the hash stored in the file's digital signature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>CERT_E_REVOKED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file's signer certificate has been revoked. The file's digital signature is compromised.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_SUBJECT_NOT_TRUSTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The subject failed the specified verification action. Most trust providers return a more detailed error code that describes the reason for the failure.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_PROVIDER_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider is not recognized on this system.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_ACTION_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider does not support the specified action.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_SUBJECT_FORM_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider does not support the form specified for the subject.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * 
     * 
     * <b>MsiGetFileSignatureInformation</b> also returns all the Win32 error values mapped to their equivalent <b>HRESULT</b> data type by 
     * <b>HRESULT_FROM_WIN32</b>.
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetfilesignatureinformationa
     * @since windows8.0
     */
    static MsiGetFileSignatureInformationA(szSignedObjectPath, dwFlags, ppcCertContext, pbHashData, pcbHashData) {
        result := DllCall("msi.dll\MsiGetFileSignatureInformationA", "ptr", szSignedObjectPath, "uint", dwFlags, "ptr", ppcCertContext, "ptr", pbHashData, "ptr", pcbHashData, "int")
        return result
    }

    /**
     * The MsiGetFileSignatureInformation function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash. (Unicode)
     * @remarks
     * When requesting only the certificate context, an invalid hash in the digital signature does not cause 
     * <b>MsiGetFileSignatureInformation</b> to return a fatal error. To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag in the <i>dwFlags</i> parameter.
     * 
     * The certificate context and hash information is extracted from the file by a call to <a href="https://docs.microsoft.com/windows/desktop/api/wintrust/nf-wintrust-winverifytrust">WinVerifyTrust</a>. The <i>ppcCertContext</i> parameter is a duplicate of the signer certificate context from the signature. It is the responsibility of the caller to call <i>CertFreeCertificateContext</i> to free the certificate context when finished.
     * 
     * Note that 
     * <b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetFileSignatureInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szSignedObjectPath Pointer to a null-terminated string specifying the full path to the file that contains the digital signature.
     * @param {Integer} dwFlags Special error case flags. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSI_INVALID_HASH_IS_FATAL"></a><a id="msi_invalid_hash_is_fatal"></a><dl>
     * <dt><b>MSI_INVALID_HASH_IS_FATAL</b></dt>
     * <dt>0x1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Without this flag set, and when requesting only the certificate context, an invalid hash in the digital signature does not cause 
     * <b>MsiGetFileSignatureInformation</b> to return a fatal error. 
     * 
     * 
     * 
     * 
     * To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<CERT_CONTEXT>} ppcCertContext Returned signer certificate context
     * @param {Pointer<Byte>} pbHashData Returned hash buffer. This parameter can be <b>NULL</b> if the hash data is not being requested.
     * @param {Pointer<UInt32>} pcbHashData Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbHashData</i> parameter. This parameter cannot be <b>NULL</b> if <i>pbHashData</i> is non-<b>NULL</b>. If ERROR_MORE_DATA is returned, <i>pbHashData</i> gives the size of the buffer required to hold the hash data. If ERROR_SUCCESS is returned, it gives the number of bytes written to the hash buffer. The <i>pcbHashData</i> parameter is ignored if <i>pbHashData</i> is <b>NULL</b>.
     * @returns {Integer} <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_SUCCESS/S_OK</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Successful completion.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_INVALID_PARAMETER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Invalid parameter was specified.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_FUNCTION_FAILED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * 
     * <a href="https://docs.microsoft.com/windows/desktop/api/wintrust/nf-wintrust-winverifytrust">WinVerifyTrust</a> is not available on the system. 
     * <b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>ERROR_MORE_DATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A buffer is too small to hold the requested data. If ERROR_MORE_DATA is returned, <i>pcbHashData</i> gives the size of the buffer required to hold the hash data.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_NOSIGNATURE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * File is not signed
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_BAD_DIGEST</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file's current hash is invalid according to the hash stored in the file's digital signature.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>CERT_E_REVOKED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The file's signer certificate has been revoked. The file's digital signature is compromised.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_SUBJECT_NOT_TRUSTED</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The subject failed the specified verification action. Most trust providers return a more detailed error code that describes the reason for the failure.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_PROVIDER_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider is not recognized on this system.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_ACTION_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider does not support the specified action.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt><b>TRUST_E_SUBJECT_FORM_UNKNOWN</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The trust provider does not support the form specified for the subject.
     * 
     * </td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * 
     * 
     * <b>MsiGetFileSignatureInformation</b> also returns all the Win32 error values mapped to their equivalent <b>HRESULT</b> data type by 
     * <b>HRESULT_FROM_WIN32</b>.
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetfilesignatureinformationw
     * @since windows8.0
     */
    static MsiGetFileSignatureInformationW(szSignedObjectPath, dwFlags, ppcCertContext, pbHashData, pcbHashData) {
        result := DllCall("msi.dll\MsiGetFileSignatureInformationW", "ptr", szSignedObjectPath, "uint", dwFlags, "ptr", ppcCertContext, "ptr", pbHashData, "ptr", pcbHashData, "int")
        return result
    }

    /**
     * The MsiGetShortcutTarget function examines a shortcut and returns its product, feature name, and component if available. (ANSI)
     * @remarks
     * If the function fails, and the shortcut exists, the regular contents of the shortcut may be accessed through the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishelllinka">IShellLink</a> interface.
     * 
     * Otherwise, the state of the target may be determined by using the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/database-functions">Installer Selection Functions</a>.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetShortcutTarget as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szShortcutPath A null-terminated string specifying the full path to a shortcut.
     * @param {Pointer<PSTR>} szProductCode A GUID for the product code of the shortcut. This string buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.
     * @param {Pointer<PSTR>} szFeatureId The feature name of the shortcut. The string buffer must be MAX_FEATURE_CHARS+1 characters long. This parameter can be null.
     * @param {Pointer<PSTR>} szComponentCode A GUID of the component code. This string buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetshortcuttargeta
     * @since windows8.0
     */
    static MsiGetShortcutTargetA(szShortcutPath, szProductCode, szFeatureId, szComponentCode) {
        DllCall("msi.dll\MsiGetShortcutTargetA", "ptr", szShortcutPath, "ptr", szProductCode, "ptr", szFeatureId, "ptr", szComponentCode)
    }

    /**
     * The MsiGetShortcutTarget function examines a shortcut and returns its product, feature name, and component if available. (Unicode)
     * @remarks
     * If the function fails, and the shortcut exists, the regular contents of the shortcut may be accessed through the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/shobjidl_core/nn-shobjidl_core-ishelllinka">IShellLink</a> interface.
     * 
     * Otherwise, the state of the target may be determined by using the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/database-functions">Installer Selection Functions</a>.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiGetShortcutTarget as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szShortcutPath A null-terminated string specifying the full path to a shortcut.
     * @param {Pointer<PWSTR>} szProductCode A GUID for the product code of the shortcut. This string buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.
     * @param {Pointer<PWSTR>} szFeatureId The feature name of the shortcut. The string buffer must be MAX_FEATURE_CHARS+1 characters long. This parameter can be null.
     * @param {Pointer<PWSTR>} szComponentCode A GUID of the component code. This string buffer must be 39 characters long. The first 38 characters are for the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msigetshortcuttargetw
     * @since windows8.0
     */
    static MsiGetShortcutTargetW(szShortcutPath, szProductCode, szFeatureId, szComponentCode) {
        DllCall("msi.dll\MsiGetShortcutTargetW", "ptr", szShortcutPath, "ptr", szProductCode, "ptr", szFeatureId, "ptr", szComponentCode)
    }

    /**
     * The MsiIsProductElevated function returns whether or not the product is managed. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiIsProductElevated as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szProduct The full product code GUID of the product. 
     * 
     * This parameter is required and cannot be <b>NULL</b> or empty.
     * @param {Pointer<Int32>} pfElevated A pointer to a BOOL for the result. 
     * 
     * This parameter cannot be <b>NULL</b>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiisproductelevateda
     * @since windows8.0
     */
    static MsiIsProductElevatedA(szProduct, pfElevated) {
        DllCall("msi.dll\MsiIsProductElevatedA", "ptr", szProduct, "ptr", pfElevated)
    }

    /**
     * The MsiIsProductElevated function returns whether or not the product is managed. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiIsProductElevated as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szProduct The full product code GUID of the product. 
     * 
     * This parameter is required and cannot be <b>NULL</b> or empty.
     * @param {Pointer<Int32>} pfElevated A pointer to a BOOL for the result. 
     * 
     * This parameter cannot be <b>NULL</b>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiisproductelevatedw
     * @since windows8.0
     */
    static MsiIsProductElevatedW(szProduct, pfElevated) {
        DllCall("msi.dll\MsiIsProductElevatedW", "ptr", szProduct, "ptr", pfElevated)
    }

    /**
     * The MsiNotifySidChange function notifies and updates the Windows Installer internal information with changes to user SIDs. (ANSI)
     * @remarks
     * <b>Windows Installer 2.0 and Windows Installer 3.0:  </b>Not supported. This function is available beginning with Windows Installer 3.1.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiNotifySidChange as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} pOldSid Null-terminated string that specifies the string value of the previous security identifier(SID).
     * @param {Pointer<PSTR>} pNewSid Null-terminated string that specifies the string value of the new security identifier(SID).
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msinotifysidchangea
     * @since windows8.0
     */
    static MsiNotifySidChangeA(pOldSid, pNewSid) {
        DllCall("msi.dll\MsiNotifySidChangeA", "ptr", pOldSid, "ptr", pNewSid)
    }

    /**
     * The MsiNotifySidChange function notifies and updates the Windows Installer internal information with changes to user SIDs. (Unicode)
     * @remarks
     * <b>Windows Installer 2.0 and Windows Installer 3.0:  </b>Not supported. This function is available beginning with Windows Installer 3.1.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msi.h header defines MsiNotifySidChange as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} pOldSid Null-terminated string that specifies the string value of the previous security identifier(SID).
     * @param {Pointer<PWSTR>} pNewSid Null-terminated string that specifies the string value of the new security identifier(SID).
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msinotifysidchangew
     * @since windows8.0
     */
    static MsiNotifySidChangeW(pOldSid, pNewSid) {
        DllCall("msi.dll\MsiNotifySidChangeW", "ptr", pOldSid, "ptr", pNewSid)
    }

    /**
     * The MsiBeginTransaction function starts transaction processing of a multiple-package installation and returns an identifier for the transaction. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiBeginTransaction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szName Name of the multiple-package installation.
     * @param {Integer} dwTransactionAttributes Attributes of the multiple-package installation. 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * When 0 or no value is set it Windows Installer closes the UI from the previous installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTION_CHAIN_EMBEDDEDUI</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} phTransactionHandle Transaction ID is a <b>MSIHANDLE</b> value that identifies the transaction. Only one process can own a transaction at a  time.
     * @param {Pointer<HANDLE>} phChangeOfOwnerEvent This parameter returns a handle to an event that  is set when the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msijointransaction">MsiJoinTransaction</a> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msibegintransactiona
     * @since windows8.0
     */
    static MsiBeginTransactionA(szName, dwTransactionAttributes, phTransactionHandle, phChangeOfOwnerEvent) {
        DllCall("msi.dll\MsiBeginTransactionA", "ptr", szName, "uint", dwTransactionAttributes, "ptr", phTransactionHandle, "ptr", phChangeOfOwnerEvent)
    }

    /**
     * The MsiBeginTransaction function starts transaction processing of a multiple-package installation and returns an identifier for the transaction. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msi.h header defines MsiBeginTransaction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szName Name of the multiple-package installation.
     * @param {Integer} dwTransactionAttributes Attributes of the multiple-package installation. 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * When 0 or no value is set it Windows Installer closes the UI from the previous installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTION_CHAIN_EMBEDDEDUI</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} phTransactionHandle Transaction ID is a <b>MSIHANDLE</b> value that identifies the transaction. Only one process can own a transaction at a  time.
     * @param {Pointer<HANDLE>} phChangeOfOwnerEvent This parameter returns a handle to an event that  is set when the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msijointransaction">MsiJoinTransaction</a> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msibegintransactionw
     * @since windows8.0
     */
    static MsiBeginTransactionW(szName, dwTransactionAttributes, phTransactionHandle, phChangeOfOwnerEvent) {
        DllCall("msi.dll\MsiBeginTransactionW", "ptr", szName, "uint", dwTransactionAttributes, "ptr", phTransactionHandle, "ptr", phChangeOfOwnerEvent)
    }

    /**
     * The MsiEndTransaction function can commit or roll back all the installations belonging to the transaction opened by the MsiBeginTransaction function.
     * @param {Integer} dwTransactionState The value of this parameter determines whether the installer commits or rolls back all the installations belonging to the transaction. The value can be one of the following.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTIONSTATE_ROLLBACK</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Performs a <a href="https://docs.microsoft.com/windows/desktop/Msi/rollback-installation">Rollback Installation</a> to undo changes to the system belonging to the transaction opened by the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msibegintransactiona">MsiBeginTransaction</a> function.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTIONSTATE_COMMIT</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Commits all changes to the system belonging to the transaction. Runs any <a href="https://docs.microsoft.com/windows/desktop/Msi/commit-custom-actions">Commit Custom Actions</a> and commits to the system any changes to Win32 or common language runtime assemblies. Deletes the rollback script, and after using this option, the transaction's changes can no longer be undone with a  <a href="https://docs.microsoft.com/windows/desktop/Msi/rollback-installation">Rollback Installation</a>.  
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msiendtransaction
     * @since windows8.0
     */
    static MsiEndTransaction(dwTransactionState) {
        DllCall("msi.dll\MsiEndTransaction", "uint", dwTransactionState)
    }

    /**
     * The MsiJoinTransaction function requests that the Windows Installer make the current process the owner of the transaction installing the multiple-package installation.
     * @remarks
     * Because a transaction can be owned by no more than one process at a time, the functions authored into the <a href="https://docs.microsoft.com/windows/desktop/Msi/msiembeddedchainer-table">MsiEmbeddedChainer table</a> can use <b>MsiJoinTransaction</b> to request ownership of the transaction before using the Windows Installer API to configure or install an application. The installer verifies that there is no installation in progress. The installer verifies that the process requesting ownership and the process that currently owns the transaction share a parent process in the same process tree.  If the function succeeds, the process that calls <b>MsiJoinTransaction</b> becomes the current owner of the transaction.
     * 
     * <b>MsiJoinTransaction</b> sets the internal UI of the new installation to the UI level of the original installation. After the new installation owns the transaction, it can call <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msisetinternalui">MsiSetInternalUI</a> to change the UI level.  This enables the new installation to run at a higher UI level than the original installation.
     * @param {Integer} hTransactionHandle The transaction ID, which identifies the transaction and is the identifier returned by the <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msibegintransactiona">MsiBeginTransaction</a> function.
     * @param {Integer} dwTransactionAttributes Attributes of the multiple-package installation.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * When 0 or no value is set, Windows Installer closes the UI from the previous installation.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTION_CHAIN_EMBEDDEDUI</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>MSITRANSACTION_JOIN_EXISTING_EMBEDDEDUI</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Set this attribute to request that the Windows Installer transfer the embedded UI from the original installation. If the original installation has no embedded UI, setting this attribute does nothing.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<HANDLE>} phChangeOfOwnerEvent This parameter returns a handle to an event that  is set when the <b>MsiJoinTransaction</b> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msi/nf-msi-msijointransaction
     * @since windows8.0
     */
    static MsiJoinTransaction(hTransactionHandle, dwTransactionAttributes, phChangeOfOwnerEvent) {
        DllCall("msi.dll\MsiJoinTransaction", "uint", hTransactionHandle, "uint", dwTransactionAttributes, "ptr", phChangeOfOwnerEvent)
    }

    /**
     * The MsiDatabaseOpenView function prepares a database query and creates a view object. This function returns a handle that should be closed using MsiCloseHandle. (ANSI)
     * @remarks
     * The 
     * <b>MsiDatabaseOpenView</b> function opens a view object for a database. You must open a view object for a database before performing any execution or fetching.
     * 
     * If an error occurs, you can call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a> for more information.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseOpenView as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database to which you want to open a view object. You can get the handle as described in <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {Pointer<PSTR>} szQuery Specifies a SQL query string for querying the database. For correct syntax, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/sql-syntax">SQL Syntax</a>.
     * @param {Pointer<UInt32>} phView Pointer to a handle for the returned view.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabaseopenviewa
     * @since windows8.0
     */
    static MsiDatabaseOpenViewA(hDatabase, szQuery, phView) {
        DllCall("msi.dll\MsiDatabaseOpenViewA", "uint", hDatabase, "ptr", szQuery, "ptr", phView)
    }

    /**
     * The MsiDatabaseOpenView function prepares a database query and creates a view object. This function returns a handle that should be closed using MsiCloseHandle. (Unicode)
     * @remarks
     * The 
     * <b>MsiDatabaseOpenView</b> function opens a view object for a database. You must open a view object for a database before performing any execution or fetching.
     * 
     * If an error occurs, you can call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a> for more information.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseOpenView as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database to which you want to open a view object. You can get the handle as described in <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {Pointer<PWSTR>} szQuery Specifies a SQL query string for querying the database. For correct syntax, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/sql-syntax">SQL Syntax</a>.
     * @param {Pointer<UInt32>} phView Pointer to a handle for the returned view.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabaseopenvieww
     * @since windows8.0
     */
    static MsiDatabaseOpenViewW(hDatabase, szQuery, phView) {
        DllCall("msi.dll\MsiDatabaseOpenViewW", "uint", hDatabase, "ptr", szQuery, "ptr", phView)
    }

    /**
     * The MsiViewGetError function returns the error that occurred in the MsiViewModify function. (ANSI)
     * @remarks
     * You should only call the 
     * <b>MsiViewGetError</b> function when 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiviewmodify">MsiViewModify</a> returns ERROR_INVALID_DATA, indicating that the data is invalid. Errors are only recorded for MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, and MSIMODIFY_VALIDATEFIELD.
     * 
     * If ERROR_MORE_DATA is returned, the parameter that  is a pointer gives the size of the buffer required to hold the string. Upon success, it gives the number of characters written to the string buffer. Therefore you can get the required size of the buffer by passing a small buffer (one character minimum) and examining the value at <i>pcchPathBuf</i> when the function returns MSIDBERROR_MOREDATA. Do not attempt to determine the size of the buffer by passing in null as <i>szColumnNameBuffer</i> or a buffer size of 0 in the <b>DWORD</b> referenced by <i>pcchBuf</i>.
     * 
     * Once MSIDBERROR_NOERROR is returned, no more validation errors remain. The MSIDBERROR return value indicates the type of validation error that occurred for the value located in the column identified by the <i>szColumnNameBuffer</i>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiViewGetError as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hView Handle to the view.
     * @param {Pointer<PSTR>} szColumnNameBuffer Pointer to the buffer that receives the null-terminated column name. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szColumnName</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns MSIDBERROR_MOREDATA and <i>pcchBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of MSIDBERROR_NOERROR, <i>pcchBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.
     * @param {Pointer<UInt32>} pcchBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szColumnNameBuffer</i>. When the function returns MSIDBERROR_NOERROR, this variable contains the size of the data copied to <i>szColumnNameBuffer</i>, not including the terminating null character. If <i>szColumnNameBuffer</i> is not large enough, the function returns MSIDBERROR_MOREDATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiviewgeterrora
     * @since windows8.0
     */
    static MsiViewGetErrorA(hView, szColumnNameBuffer, pcchBuf) {
        DllCall("msi.dll\MsiViewGetErrorA", "uint", hView, "ptr", szColumnNameBuffer, "ptr", pcchBuf)
    }

    /**
     * The MsiViewGetError function returns the error that occurred in the MsiViewModify function. (Unicode)
     * @remarks
     * You should only call the 
     * <b>MsiViewGetError</b> function when 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiviewmodify">MsiViewModify</a> returns ERROR_INVALID_DATA, indicating that the data is invalid. Errors are only recorded for MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, and MSIMODIFY_VALIDATEFIELD.
     * 
     * If ERROR_MORE_DATA is returned, the parameter that  is a pointer gives the size of the buffer required to hold the string. Upon success, it gives the number of characters written to the string buffer. Therefore you can get the required size of the buffer by passing a small buffer (one character minimum) and examining the value at <i>pcchPathBuf</i> when the function returns MSIDBERROR_MOREDATA. Do not attempt to determine the size of the buffer by passing in null as <i>szColumnNameBuffer</i> or a buffer size of 0 in the <b>DWORD</b> referenced by <i>pcchBuf</i>.
     * 
     * Once MSIDBERROR_NOERROR is returned, no more validation errors remain. The MSIDBERROR return value indicates the type of validation error that occurred for the value located in the column identified by the <i>szColumnNameBuffer</i>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiViewGetError as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hView Handle to the view.
     * @param {Pointer<PWSTR>} szColumnNameBuffer Pointer to the buffer that receives the null-terminated column name. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szColumnName</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns MSIDBERROR_MOREDATA and <i>pcchBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of MSIDBERROR_NOERROR, <i>pcchBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.
     * @param {Pointer<UInt32>} pcchBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szColumnNameBuffer</i>. When the function returns MSIDBERROR_NOERROR, this variable contains the size of the data copied to <i>szColumnNameBuffer</i>, not including the terminating null character. If <i>szColumnNameBuffer</i> is not large enough, the function returns MSIDBERROR_MOREDATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiviewgeterrorw
     * @since windows8.0
     */
    static MsiViewGetErrorW(hView, szColumnNameBuffer, pcchBuf) {
        DllCall("msi.dll\MsiViewGetErrorW", "uint", hView, "ptr", szColumnNameBuffer, "ptr", pcchBuf)
    }

    /**
     * The MsiViewExecute function executes a SQL view query and supplies any required parameters.
     * @remarks
     * The 
     * <b>MsiViewExecute</b> function must be called before any calls to 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiviewfetch">MsiViewFetch</a>.
     * 
     * If the SQL query specifies values with parameter markers (?), a record must be supplied that contains all of the replacement values in the exact order and of compatible data types. When used with INSERT and UPDATE queries all the parameterized values must precede all nonparameterized values.
     * 
     * For example, these queries are valid.
     * 
     * UPDATE {table-list} SET {column}= ? , {column}= {constant}
     * 
     * INSERT INTO {table} ({column-list}) VALUES (?, {constant-list})
     * 
     * However these queries are invalid.
     * 
     * UPDATE {table-list} SET {column}= {constant}, {column}=?
     * 
     * INSERT INTO {table} ({column-list}) VALUES ({constant-list}, ? )
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * @param {Integer} hView Handle to the view upon which to execute the query.
     * @param {Integer} hRecord Handle to a record that supplies the parameters. This parameter contains values to replace the parameter tokens in the SQL query. It is optional, so <i>hRecord</i> can be zero. For a reference on syntax, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/sql-syntax">SQL Syntax</a>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiviewexecute
     * @since windows8.0
     */
    static MsiViewExecute(hView, hRecord) {
        DllCall("msi.dll\MsiViewExecute", "uint", hView, "uint", hRecord)
    }

    /**
     * The MsiViewFetch function fetches the next sequential record from the view. This function returns a handle that should be closed using MsiCloseHandle.
     * @remarks
     * If the 
     * <b>MsiViewFetch</b> function returns ERROR_FUNCTION_FAILED, it is possible that the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiviewexecute">MsiViewExecute</a> function was not called first. If more rows are available in the result set, 
     * <b>MsiViewFetch</b> returns <i>phRecord</i> as a handle to a record containing the requested column data, or <i>phRecord</i> is 0. For maximum performance, the same record should be used for all retrievals, or the record should be released by going out of scope.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * @param {Integer} hView Handle to the view to fetch from.
     * @param {Pointer<UInt32>} phRecord Pointer to the handle for the fetched record.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiviewfetch
     * @since windows8.0
     */
    static MsiViewFetch(hView, phRecord) {
        DllCall("msi.dll\MsiViewFetch", "uint", hView, "ptr", phRecord)
    }

    /**
     * The MsiViewModify function updates a fetched record.
     * @remarks
     * The MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, MSIMODIFY_VALIDATE_FIELD, and MSIMODIFY_VALIDATE_DELETE values of the 
     * <b>MsiViewModify</b> function do not perform actual updates; they ensure that the data in the record is valid. Use of these validation enumerations requires that the database contains the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/-validation-table">_Validation table</a>.
     * 
     * You can call MSIMODIFY_UPDATE or MSIMODIFY_DELETE with a record immediately after using MSIMODIFY_INSERT, MSIMODIFY_INSERT_TEMPORARY, or MSIMODIFY_SEEK provided you have NOT modified the 0th field of the inserted or sought record.
     * 
     * To execute any SQL statement, a view must be created. However, a view that does not create a result set, such as CREATE TABLE, or INSERT INTO, cannot be used with 
     * <b>MsiViewModify</b> to update tables though the view.
     * 
     * You cannot fetch a record that contains binary data from one database and then use that record to insert the data into another database. To move binary data from one database to another, you should export the data to a file and then import it into the new database using a query and the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msirecordsetstreama">MsiRecordSetStream</a>. This ensures that each database has its own copy of the binary data.
     * 
     * Note that custom actions can only add, modify, or remove temporary rows, columns, or tables from a database. Custom actions cannot modify persistent data in a database, such as data that is a part of the database stored on disk. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/accessing-the-current-installer-session-from-inside-a-custom-action">Accessing the Current Installer Session from Inside a Custom Action</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * @param {Integer} hView Handle to a view.
     * @param {Integer} eModifyMode 
     * @param {Integer} hRecord Handle to the record to modify.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiviewmodify
     * @since windows8.0
     */
    static MsiViewModify(hView, eModifyMode, hRecord) {
        DllCall("msi.dll\MsiViewModify", "uint", hView, "int", eModifyMode, "uint", hRecord)
    }

    /**
     * The MsiViewGetColumnInfo function returns a record containing column names or definitions. This function returns a handle that should be closed using MsiCloseHandle.
     * @remarks
     * The column description returned by 
     * <b>MsiViewGetColumnInfo</b> is in the format described in the section: 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/column-definition-format">Column Definition Format</a>. Each column is described by a string in the corresponding record field. The definition string consists of a single letter representing the data type followed by the width of the column (in characters when applicable, bytes otherwise). A width of zero designates an unbounded width (for example, long text fields and streams). An uppercase letter indicates that null values are allowed in the column.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * @param {Integer} hView Handle to the view from which to obtain column information.
     * @param {Integer} eColumnInfo 
     * @param {Pointer<UInt32>} phRecord Pointer to a handle to receive the column information data record.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiviewgetcolumninfo
     * @since windows8.0
     */
    static MsiViewGetColumnInfo(hView, eColumnInfo, phRecord) {
        DllCall("msi.dll\MsiViewGetColumnInfo", "uint", hView, "int", eColumnInfo, "ptr", phRecord)
    }

    /**
     * The MsiViewClose function releases the result set for an executed view.
     * @remarks
     * The 
     * <b>MsiViewClose</b> function must be called before the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiviewexecute">MsiViewExecute</a> function is called again on the view, unless all rows of the result set have been obtained with the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiviewfetch">MsiViewFetch</a> function.
     * @param {Integer} hView Handle to a view that is set to release.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiviewclose
     * @since windows8.0
     */
    static MsiViewClose(hView) {
        DllCall("msi.dll\MsiViewClose", "uint", hView)
    }

    /**
     * The MsiDatabaseGetPrimaryKeys function returns a record containing the names of all the primary key columns for a specified table. This function returns a handle that should be closed using MsiCloseHandle. (ANSI)
     * @remarks
     * The field count of the returned record is the count of primary key columns returned by the 
     * <b>MsiDatabaseGetPrimaryKeys</b> function. The returned record contains the table name in Field (0) and the column names that make up the primary key names in succeeding fields. These primary key names correspond to the column numbers for the fields.
     * 
     * This function cannot be used with the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/-tables-table">_Tables table</a> or the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/-columns-table">_Columns table</a>.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseGetPrimaryKeys as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database. See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {Pointer<PSTR>} szTableName Specifies the name of the table from which to obtain primary key names.
     * @param {Pointer<UInt32>} phRecord Pointer to the handle of the record that holds the primary key names.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabasegetprimarykeysa
     * @since windows8.0
     */
    static MsiDatabaseGetPrimaryKeysA(hDatabase, szTableName, phRecord) {
        DllCall("msi.dll\MsiDatabaseGetPrimaryKeysA", "uint", hDatabase, "ptr", szTableName, "ptr", phRecord)
    }

    /**
     * The MsiDatabaseGetPrimaryKeys function returns a record containing the names of all the primary key columns for a specified table. This function returns a handle that should be closed using MsiCloseHandle. (Unicode)
     * @remarks
     * The field count of the returned record is the count of primary key columns returned by the 
     * <b>MsiDatabaseGetPrimaryKeys</b> function. The returned record contains the table name in Field (0) and the column names that make up the primary key names in succeeding fields. These primary key names correspond to the column numbers for the fields.
     * 
     * This function cannot be used with the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/-tables-table">_Tables table</a> or the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/-columns-table">_Columns table</a>.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseGetPrimaryKeys as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database. See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {Pointer<PWSTR>} szTableName Specifies the name of the table from which to obtain primary key names.
     * @param {Pointer<UInt32>} phRecord Pointer to the handle of the record that holds the primary key names.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabasegetprimarykeysw
     * @since windows8.0
     */
    static MsiDatabaseGetPrimaryKeysW(hDatabase, szTableName, phRecord) {
        DllCall("msi.dll\MsiDatabaseGetPrimaryKeysW", "uint", hDatabase, "ptr", szTableName, "ptr", phRecord)
    }

    /**
     * The MsiDatabaseIsTablePersistent function returns an enumeration that describes the state of a specific table. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseIsTablePersistent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database that belongs to the relevant table. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {Pointer<PSTR>} szTableName Specifies the name of the relevant table.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabaseistablepersistenta
     * @since windows8.0
     */
    static MsiDatabaseIsTablePersistentA(hDatabase, szTableName) {
        DllCall("msi.dll\MsiDatabaseIsTablePersistentA", "uint", hDatabase, "ptr", szTableName)
    }

    /**
     * The MsiDatabaseIsTablePersistent function returns an enumeration that describes the state of a specific table. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseIsTablePersistent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database that belongs to the relevant table. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.
     * @param {Pointer<PWSTR>} szTableName Specifies the name of the relevant table.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabaseistablepersistentw
     * @since windows8.0
     */
    static MsiDatabaseIsTablePersistentW(hDatabase, szTableName) {
        DllCall("msi.dll\MsiDatabaseIsTablePersistentW", "uint", hDatabase, "ptr", szTableName)
    }

    /**
     * The MsiGetSummaryInformation function obtains a handle to the _SummaryInformation stream for an installer database. This function returns a handle that should be closed using MsiCloseHandle. (ANSI)
     * @remarks
     * If the database specified by the 
     * <b>MsiGetSummaryInformation</b> function is not open, you must specify 0 for <i>hDatabase</i> and specify the path to the database in <i>szDatabasePath</i>. If the database is open, you must set <i>szDatabasePath</i> to 0.
     * 
     * If a value of <i>uiUpdateCount</i> greater than 0 is used to open an existing summary information stream, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msisummaryinfopersist">MsiSummaryInfoPersist</a> must be called before closing the <i>phSummaryInfo</i> handle. Failing to do this will lose the existing stream information.
     * 
     * To view the summary information of a patch using <b>MsiGetSummaryInformation</b>, set <i>szDatabasePath</i> to the path to the patch. Alternately, you can create a handle to the patch using 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> and then pass that handle to 
     * <b>MsiGetSummaryInformation</b> as the <i>hDatabase</i> parameter.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetSummaryInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database.
     * @param {Pointer<PSTR>} szDatabasePath Specifies the path to the database.
     * @param {Integer} uiUpdateCount Specifies the maximum number of updated values.
     * @param {Pointer<UInt32>} phSummaryInfo Pointer to the location from which to receive the summary information handle.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetsummaryinformationa
     * @since windows8.0
     */
    static MsiGetSummaryInformationA(hDatabase, szDatabasePath, uiUpdateCount, phSummaryInfo) {
        DllCall("msi.dll\MsiGetSummaryInformationA", "uint", hDatabase, "ptr", szDatabasePath, "uint", uiUpdateCount, "ptr", phSummaryInfo)
    }

    /**
     * The MsiGetSummaryInformation function obtains a handle to the _SummaryInformation stream for an installer database. This function returns a handle that should be closed using MsiCloseHandle. (Unicode)
     * @remarks
     * If the database specified by the 
     * <b>MsiGetSummaryInformation</b> function is not open, you must specify 0 for <i>hDatabase</i> and specify the path to the database in <i>szDatabasePath</i>. If the database is open, you must set <i>szDatabasePath</i> to 0.
     * 
     * If a value of <i>uiUpdateCount</i> greater than 0 is used to open an existing summary information stream, 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msisummaryinfopersist">MsiSummaryInfoPersist</a> must be called before closing the <i>phSummaryInfo</i> handle. Failing to do this will lose the existing stream information.
     * 
     * To view the summary information of a patch using <b>MsiGetSummaryInformation</b>, set <i>szDatabasePath</i> to the path to the patch. Alternately, you can create a handle to the patch using 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> and then pass that handle to 
     * <b>MsiGetSummaryInformation</b> as the <i>hDatabase</i> parameter.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetSummaryInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database.
     * @param {Pointer<PWSTR>} szDatabasePath Specifies the path to the database.
     * @param {Integer} uiUpdateCount Specifies the maximum number of updated values.
     * @param {Pointer<UInt32>} phSummaryInfo Pointer to the location from which to receive the summary information handle.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetsummaryinformationw
     * @since windows8.0
     */
    static MsiGetSummaryInformationW(hDatabase, szDatabasePath, uiUpdateCount, phSummaryInfo) {
        DllCall("msi.dll\MsiGetSummaryInformationW", "uint", hDatabase, "ptr", szDatabasePath, "uint", uiUpdateCount, "ptr", phSummaryInfo)
    }

    /**
     * The MsiSummaryInfoGetPropertyCount function returns the number of existing properties in the summary information stream.
     * @param {Integer} hSummaryInfo Handle to summary information.
     * @param {Pointer<UInt32>} puiPropertyCount Location to receive the total property count.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisummaryinfogetpropertycount
     * @since windows8.0
     */
    static MsiSummaryInfoGetPropertyCount(hSummaryInfo, puiPropertyCount) {
        DllCall("msi.dll\MsiSummaryInfoGetPropertyCount", "uint", hSummaryInfo, "ptr", puiPropertyCount)
    }

    /**
     * The MsiSummaryInfoSetProperty function sets a single summary information property. (ANSI)
     * @remarks
     * > [!NOTE]
     * > The msiquery.h header defines MsiSummaryInfoSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hSummaryInfo Handle to summary information.
     * @param {Integer} uiProperty Specifies the property ID of the summary property being set. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not set values for PID_DICTIONARY OR PID_THUMBNAIL property.
     * @param {Integer} uiDataType Specifies the type of property to set. This parameter can be a type listed in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.
     * @param {Integer} iValue Specifies the integer value.
     * @param {Pointer<FILETIME>} pftValue Specifies the file-time value.
     * @param {Pointer<PSTR>} szValue Specifies the text value.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisummaryinfosetpropertya
     * @since windows8.0
     */
    static MsiSummaryInfoSetPropertyA(hSummaryInfo, uiProperty, uiDataType, iValue, pftValue, szValue) {
        DllCall("msi.dll\MsiSummaryInfoSetPropertyA", "uint", hSummaryInfo, "uint", uiProperty, "uint", uiDataType, "int", iValue, "ptr", pftValue, "ptr", szValue)
    }

    /**
     * The MsiSummaryInfoSetProperty function sets a single summary information property. (Unicode)
     * @remarks
     * > [!NOTE]
     * > The msiquery.h header defines MsiSummaryInfoSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hSummaryInfo Handle to summary information.
     * @param {Integer} uiProperty Specifies the property ID of the summary property being set. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not set values for PID_DICTIONARY OR PID_THUMBNAIL property.
     * @param {Integer} uiDataType Specifies the type of property to set. This parameter can be a type listed in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.
     * @param {Integer} iValue Specifies the integer value.
     * @param {Pointer<FILETIME>} pftValue Specifies the file-time value.
     * @param {Pointer<PWSTR>} szValue Specifies the text value.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisummaryinfosetpropertyw
     * @since windows8.0
     */
    static MsiSummaryInfoSetPropertyW(hSummaryInfo, uiProperty, uiDataType, iValue, pftValue, szValue) {
        DllCall("msi.dll\MsiSummaryInfoSetPropertyW", "uint", hSummaryInfo, "uint", uiProperty, "uint", uiDataType, "int", iValue, "ptr", pftValue, "ptr", szValue)
    }

    /**
     * The MsiSummaryInfoGetProperty function gets a single property from the summary information stream. (ANSI)
     * @remarks
     * If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * Windows Installer functions that return data in a user provided memory location should not be called with null as the value for the pointer. These functions return a string or return data as integer pointers, but return inconsistent values when passing null as the value for the output argument. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</a>.
     * 
     * The property information returned by the <b>MsiSummaryInfoGetProperty</b> function is received by the <i>piValue</i>, <i>pftValue</i>, or  <i>szValueBuf</i> parameter depending upon the type of property value that has been specified in the <i>puiDataType</i> parameter.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSummaryInfoGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hSummaryInfo Handle to summary information.
     * @param {Integer} uiProperty Specifies the property ID of the summary property. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not return values for PID_DICTIONARY OR PID_THUMBNAIL property.
     * @param {Pointer<UInt32>} puiDataType Receives the returned property type. This  parameter can be a type listed in the  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.
     * @param {Pointer<Int32>} piValue Receives the returned integer property data.
     * @param {Pointer<FILETIME>} pftValue Pointer to a file value.
     * @param {Pointer<PSTR>} szValueBuf Pointer to the buffer that receives the null terminated summary information property value. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchValueBuf</i> contains the required buffer size in <b>TCHARs</b>, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisummaryinfogetpropertya
     * @since windows8.0
     */
    static MsiSummaryInfoGetPropertyA(hSummaryInfo, uiProperty, puiDataType, piValue, pftValue, szValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiSummaryInfoGetPropertyA", "uint", hSummaryInfo, "uint", uiProperty, "ptr", puiDataType, "ptr", piValue, "ptr", pftValue, "ptr", szValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * The MsiSummaryInfoGetProperty function gets a single property from the summary information stream. (Unicode)
     * @remarks
     * If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * Windows Installer functions that return data in a user provided memory location should not be called with null as the value for the pointer. These functions return a string or return data as integer pointers, but return inconsistent values when passing null as the value for the output argument. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</a>.
     * 
     * The property information returned by the <b>MsiSummaryInfoGetProperty</b> function is received by the <i>piValue</i>, <i>pftValue</i>, or  <i>szValueBuf</i> parameter depending upon the type of property value that has been specified in the <i>puiDataType</i> parameter.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSummaryInfoGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hSummaryInfo Handle to summary information.
     * @param {Integer} uiProperty Specifies the property ID of the summary property. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not return values for PID_DICTIONARY OR PID_THUMBNAIL property.
     * @param {Pointer<UInt32>} puiDataType Receives the returned property type. This  parameter can be a type listed in the  
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.
     * @param {Pointer<Int32>} piValue Receives the returned integer property data.
     * @param {Pointer<FILETIME>} pftValue Pointer to a file value.
     * @param {Pointer<PWSTR>} szValueBuf Pointer to the buffer that receives the null terminated summary information property value. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchValueBuf</i> contains the required buffer size in <b>TCHARs</b>, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisummaryinfogetpropertyw
     * @since windows8.0
     */
    static MsiSummaryInfoGetPropertyW(hSummaryInfo, uiProperty, puiDataType, piValue, pftValue, szValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiSummaryInfoGetPropertyW", "uint", hSummaryInfo, "uint", uiProperty, "ptr", puiDataType, "ptr", piValue, "ptr", pftValue, "ptr", szValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * The MsiSummaryInfoPersist function writes changed summary information back to the summary information stream.
     * @param {Integer} hSummaryInfo Handle to summary information.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisummaryinfopersist
     * @since windows8.0
     */
    static MsiSummaryInfoPersist(hSummaryInfo) {
        DllCall("msi.dll\MsiSummaryInfoPersist", "uint", hSummaryInfo)
    }

    /**
     * The MsiOpenDatabase function opens a database file for data access. This function returns a handle that should be closed using MsiCloseHandle. (ANSI)
     * @remarks
     * To make and save changes to a database first open the database in transaction (MSIDBOPEN_TRANSACT), create (MSIDBOPEN_CREATE or MSIDBOPEN_CREATEDIRECT), or direct (MSIDBOPEN_DIRECT) mode. After making the changes, always call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabasecommit">MsiDatabaseCommit</a> before closing the database handle. 
     * <b>MsiDatabaseCommit</b> flushes all buffers.
     * 
     * Always call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabasecommit">MsiDatabaseCommit</a> on a database that has been opened in direct mode (MSIDBOPEN_DIRECT or MSIDBOPEN_CREATEDIRECT) before closing the database's handle. Failure to do this may corrupt the database.
     * 
     * Because 
     * <b>MsiOpenDatabase</b> initiates database access, it cannot be used with a running installation.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * 
     * <div class="alert"><b>Note</b>  When a database is opened as the output of another database, the summary information stream of the output database is actually a read-only mirror of the original database, and, thus, cannot be changed. Additionally, it is not persisted with the database. To create or modify the summary information for the output database, it must be closed and reopened.</div>
     * <div> </div>
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiOpenDatabase as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PSTR>} szDatabasePath Specifies the full path or relative path to the database file.
     * @param {Pointer<PSTR>} szPersist Receives the full path to the file or the persistence mode. You can use the <i>szPersist</i> parameter to direct the persistent output to a new file or to specify one of the following predefined persistence modes.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_CREATEDIRECT"></a><a id="msidbopen_createdirect"></a><dl>
     * <dt><b>MSIDBOPEN_CREATEDIRECT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create a new database, direct mode read/write.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_CREATE"></a><a id="msidbopen_create"></a><dl>
     * <dt><b>MSIDBOPEN_CREATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create a new database, transact mode read/write.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_DIRECT"></a><a id="msidbopen_direct"></a><dl>
     * <dt><b>MSIDBOPEN_DIRECT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database direct read/write without transaction.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_READONLY"></a><a id="msidbopen_readonly"></a><dl>
     * <dt><b>MSIDBOPEN_READONLY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database read-only, no persistent changes.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_TRANSACT"></a><a id="msidbopen_transact"></a><dl>
     * <dt><b>MSIDBOPEN_TRANSACT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database read/write in transaction mode.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_PATCHFILE"></a><a id="msidbopen_patchfile"></a><dl>
     * <dt><b>MSIDBOPEN_PATCHFILE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Add this flag to indicate a patch file.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} phDatabase Pointer to the location of the returned database handle.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiopendatabasea
     * @since windows8.0
     */
    static MsiOpenDatabaseA(szDatabasePath, szPersist, phDatabase) {
        DllCall("msi.dll\MsiOpenDatabaseA", "ptr", szDatabasePath, "ptr", szPersist, "ptr", phDatabase)
    }

    /**
     * The MsiOpenDatabase function opens a database file for data access. This function returns a handle that should be closed using MsiCloseHandle. (Unicode)
     * @remarks
     * To make and save changes to a database first open the database in transaction (MSIDBOPEN_TRANSACT), create (MSIDBOPEN_CREATE or MSIDBOPEN_CREATEDIRECT), or direct (MSIDBOPEN_DIRECT) mode. After making the changes, always call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabasecommit">MsiDatabaseCommit</a> before closing the database handle. 
     * <b>MsiDatabaseCommit</b> flushes all buffers.
     * 
     * Always call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabasecommit">MsiDatabaseCommit</a> on a database that has been opened in direct mode (MSIDBOPEN_DIRECT or MSIDBOPEN_CREATEDIRECT) before closing the database's handle. Failure to do this may corrupt the database.
     * 
     * Because 
     * <b>MsiOpenDatabase</b> initiates database access, it cannot be used with a running installation.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * 
     * <div class="alert"><b>Note</b>  When a database is opened as the output of another database, the summary information stream of the output database is actually a read-only mirror of the original database, and, thus, cannot be changed. Additionally, it is not persisted with the database. To create or modify the summary information for the output database, it must be closed and reopened.</div>
     * <div> </div>
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiOpenDatabase as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<PWSTR>} szDatabasePath Specifies the full path or relative path to the database file.
     * @param {Pointer<PWSTR>} szPersist Receives the full path to the file or the persistence mode. You can use the <i>szPersist</i> parameter to direct the persistent output to a new file or to specify one of the following predefined persistence modes.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_CREATEDIRECT"></a><a id="msidbopen_createdirect"></a><dl>
     * <dt><b>MSIDBOPEN_CREATEDIRECT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create a new database, direct mode read/write.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_CREATE"></a><a id="msidbopen_create"></a><dl>
     * <dt><b>MSIDBOPEN_CREATE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create a new database, transact mode read/write.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_DIRECT"></a><a id="msidbopen_direct"></a><dl>
     * <dt><b>MSIDBOPEN_DIRECT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database direct read/write without transaction.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_READONLY"></a><a id="msidbopen_readonly"></a><dl>
     * <dt><b>MSIDBOPEN_READONLY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database read-only, no persistent changes.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_TRANSACT"></a><a id="msidbopen_transact"></a><dl>
     * <dt><b>MSIDBOPEN_TRANSACT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Open a database read/write in transaction mode.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSIDBOPEN_PATCHFILE"></a><a id="msidbopen_patchfile"></a><dl>
     * <dt><b>MSIDBOPEN_PATCHFILE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Add this flag to indicate a patch file.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<UInt32>} phDatabase Pointer to the location of the returned database handle.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiopendatabasew
     * @since windows8.0
     */
    static MsiOpenDatabaseW(szDatabasePath, szPersist, phDatabase) {
        DllCall("msi.dll\MsiOpenDatabaseW", "ptr", szDatabasePath, "ptr", szPersist, "ptr", phDatabase)
    }

    /**
     * The MsiDatabaseImport function imports an installer text archive file into an open database table. (ANSI)
     * @remarks
     * When you use the 
     * <b>MsiDatabaseImport</b> function to import a text archive table named _SummaryInformation into an installer database, you write the "05SummaryInformation" stream. This stream contains standard properties that can be viewed using Windows Explorer and are defined by COM. The rows of the table are written to the property stream as pairs of property ID numbers and corresponding data values. See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>. Date and time in _SummaryInformation are in the format: YYYY/MM/DD hh::mm::ss. For example, 1999/03/22 15:25:45. If the table contains binary streams, the name of the stream is in the data field, and the actual stream is retrieved from a file of that name in a subfolder with the same name as the table.
     * 
     * Text archive files that are exported from a database by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabaseexporta">MsiDatabaseExport</a> are intended for use with version control systems, and are not intended to be used as a means of editing data. Use the database API functions and tools designed for that purpose. Note that control characters in text archive files are translated to avoid conflicts with file delimiters. If a text archive file contains non-ASCII data, it is stamped with the code page of the data, and can only be imported into a database of that exact code page, or into a neutral database. Neutral databases are set to the code page of the imported file. A database can be unconditionally set to a particular code page by importing a pseudo table named: _ForceCodepage. The format of such a file is: Two blank lines, followed by a line that contains the numeric code page, a tab delimiter and the exact string: _ForceCodepage
     * 
     * This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseImport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {Pointer<PSTR>} szFolderPath Specifies the path to the folder that contains archive files.
     * @param {Pointer<PSTR>} szFileName Specifies the name of the file to import.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabaseimporta
     * @since windows8.0
     */
    static MsiDatabaseImportA(hDatabase, szFolderPath, szFileName) {
        DllCall("msi.dll\MsiDatabaseImportA", "uint", hDatabase, "ptr", szFolderPath, "ptr", szFileName)
    }

    /**
     * The MsiDatabaseImport function imports an installer text archive file into an open database table. (Unicode)
     * @remarks
     * When you use the 
     * <b>MsiDatabaseImport</b> function to import a text archive table named _SummaryInformation into an installer database, you write the "05SummaryInformation" stream. This stream contains standard properties that can be viewed using Windows Explorer and are defined by COM. The rows of the table are written to the property stream as pairs of property ID numbers and corresponding data values. See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>. Date and time in _SummaryInformation are in the format: YYYY/MM/DD hh::mm::ss. For example, 1999/03/22 15:25:45. If the table contains binary streams, the name of the stream is in the data field, and the actual stream is retrieved from a file of that name in a subfolder with the same name as the table.
     * 
     * Text archive files that are exported from a database by 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabaseexporta">MsiDatabaseExport</a> are intended for use with version control systems, and are not intended to be used as a means of editing data. Use the database API functions and tools designed for that purpose. Note that control characters in text archive files are translated to avoid conflicts with file delimiters. If a text archive file contains non-ASCII data, it is stamped with the code page of the data, and can only be imported into a database of that exact code page, or into a neutral database. Neutral databases are set to the code page of the imported file. A database can be unconditionally set to a particular code page by importing a pseudo table named: _ForceCodepage. The format of such a file is: Two blank lines, followed by a line that contains the numeric code page, a tab delimiter and the exact string: _ForceCodepage
     * 
     * This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseImport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {Pointer<PWSTR>} szFolderPath Specifies the path to the folder that contains archive files.
     * @param {Pointer<PWSTR>} szFileName Specifies the name of the file to import.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabaseimportw
     * @since windows8.0
     */
    static MsiDatabaseImportW(hDatabase, szFolderPath, szFileName) {
        DllCall("msi.dll\MsiDatabaseImportW", "uint", hDatabase, "ptr", szFolderPath, "ptr", szFileName)
    }

    /**
     * The MsiDatabaseExport function exports a Microsoft Installer table from an open database to a Text Archive File. (ANSI)
     * @remarks
     * If a table contains streams, 
     * <b>MsiDatabaseExport</b> exports each stream to a separate file.
     * 
     * For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabaseimporta">MsiDatabaseImport</a>.
     * 
     * This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.
     * 
     * If the function fails, you can get extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseExport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase The handle to a database  from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {Pointer<PSTR>} szTableName The name of the table to export.
     * @param {Pointer<PSTR>} szFolderPath The name of the folder that contains archive files.
     * @param {Pointer<PSTR>} szFileName The name of the exported table archive file.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabaseexporta
     * @since windows8.0
     */
    static MsiDatabaseExportA(hDatabase, szTableName, szFolderPath, szFileName) {
        DllCall("msi.dll\MsiDatabaseExportA", "uint", hDatabase, "ptr", szTableName, "ptr", szFolderPath, "ptr", szFileName)
    }

    /**
     * The MsiDatabaseExport function exports a Microsoft Installer table from an open database to a Text Archive File. (Unicode)
     * @remarks
     * If a table contains streams, 
     * <b>MsiDatabaseExport</b> exports each stream to a separate file.
     * 
     * For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabaseimporta">MsiDatabaseImport</a>.
     * 
     * This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.
     * 
     * If the function fails, you can get extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseExport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase The handle to a database  from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {Pointer<PWSTR>} szTableName The name of the table to export.
     * @param {Pointer<PWSTR>} szFolderPath The name of the folder that contains archive files.
     * @param {Pointer<PWSTR>} szFileName The name of the exported table archive file.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabaseexportw
     * @since windows8.0
     */
    static MsiDatabaseExportW(hDatabase, szTableName, szFolderPath, szFileName) {
        DllCall("msi.dll\MsiDatabaseExportW", "uint", hDatabase, "ptr", szTableName, "ptr", szFolderPath, "ptr", szFileName)
    }

    /**
     * The MsiDatabaseMerge function merges two databases together, which allows duplicate rows. (ANSI)
     * @remarks
     * The <b>MsiDatabaseMerge</b> function and the <a href="https://docs.microsoft.com/windows/desktop/Msi/database-merge">Merge</a> method of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/database-object">Database</a> object cannot be used to merge a module that is included in the installation package. They should not be used to merge 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/merge-modules">Merge Modules</a> into a Windows Installer package.  To include a merge module in an installation package, authors of installation packages should follow the guidelines that are described in the <a href="https://docs.microsoft.com/windows/desktop/Msi/applying-merge-modules">Applying Merge Modules</a> topic.
     * 
     * <b>MsiDatabaseMerge</b> does not copy over embedded 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/cabinet-files">Cabinet Files</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/embedded-transforms">embedded transforms</a> from the reference database into the target database. Embedded data streams that are listed in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/binary-table">Binary Table</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/icon-table">Icon Table</a> are copied from the reference database to the target database. Storage embedded in the reference database are not copied to the target database.
     * 
     * The 
     * <b>MsiDatabaseMerge</b> function merges the data of two databases. These databases must have the same code page. 
     * <b>MsiDatabaseMerge</b> fails if any tables or rows in the databases conflict. A conflict exists if the data in any row in the first database differs from the data in the corresponding row of the second database. Corresponding rows are in the same table of both databases and have the same primary key in both databases. The tables of non-conflicting databases must have the same number of primary keys, same number of columns, same column types, same column names, and the same data in rows with identical primary keys. Temporary columns however don't matter in the column count and corresponding tables can have a different number of temporary columns without creating conflict as long as the persistent columns match.
     * 
     * If the number, type, or name of columns in corresponding tables are different, the schema of the two databases are incompatible and the installer stops processing tables and the merge fails. The installer checks that the two databases have the same schema before checking for row merge conflicts. If ERROR_DATATYPE_MISMATCH is returned, you are guaranteed that the databases have not been changed.
     * 
     * If the data in particular rows differ, this is a row merge conflict, the installer returns ERROR_FUNCTION_FAILED and creates a new table named <i>szTableName</i>. The first column of this table is the name of the table having the conflict. The second column gives the number of rows in the table having the conflict. The table that reports conflicts appears as follows.
     * 
     * <table>
     * <tr>
     * <th>Column</th>
     * <th>Type</th>
     * <th>Key</th>
     * <th>Nullable</th>
     * </tr>
     * <tr>
     * <td>Table</td>
     * <td>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/text">Text</a>
     * </td>
     * <td>Y</td>
     * <td>N</td>
     * </tr>
     * <tr>
     * <td>NumRowMergeConflicts</td>
     * <td>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/integer">Integer</a>
     * </td>
     * <td> </td>
     * <td>N</td>
     * </tr>
     * </table>
     *  
     * 
     * This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseMerge as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase The handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {Integer} hDatabaseMerge The handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> to merge into the base database.
     * @param {Pointer<PSTR>} szTableName The name of the table to receive merge conflict information.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabasemergea
     * @since windows8.0
     */
    static MsiDatabaseMergeA(hDatabase, hDatabaseMerge, szTableName) {
        DllCall("msi.dll\MsiDatabaseMergeA", "uint", hDatabase, "uint", hDatabaseMerge, "ptr", szTableName)
    }

    /**
     * The MsiDatabaseMerge function merges two databases together, which allows duplicate rows. (Unicode)
     * @remarks
     * The <b>MsiDatabaseMerge</b> function and the <a href="https://docs.microsoft.com/windows/desktop/Msi/database-merge">Merge</a> method of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/database-object">Database</a> object cannot be used to merge a module that is included in the installation package. They should not be used to merge 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/merge-modules">Merge Modules</a> into a Windows Installer package.  To include a merge module in an installation package, authors of installation packages should follow the guidelines that are described in the <a href="https://docs.microsoft.com/windows/desktop/Msi/applying-merge-modules">Applying Merge Modules</a> topic.
     * 
     * <b>MsiDatabaseMerge</b> does not copy over embedded 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/cabinet-files">Cabinet Files</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/embedded-transforms">embedded transforms</a> from the reference database into the target database. Embedded data streams that are listed in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/binary-table">Binary Table</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/icon-table">Icon Table</a> are copied from the reference database to the target database. Storage embedded in the reference database are not copied to the target database.
     * 
     * The 
     * <b>MsiDatabaseMerge</b> function merges the data of two databases. These databases must have the same code page. 
     * <b>MsiDatabaseMerge</b> fails if any tables or rows in the databases conflict. A conflict exists if the data in any row in the first database differs from the data in the corresponding row of the second database. Corresponding rows are in the same table of both databases and have the same primary key in both databases. The tables of non-conflicting databases must have the same number of primary keys, same number of columns, same column types, same column names, and the same data in rows with identical primary keys. Temporary columns however don't matter in the column count and corresponding tables can have a different number of temporary columns without creating conflict as long as the persistent columns match.
     * 
     * If the number, type, or name of columns in corresponding tables are different, the schema of the two databases are incompatible and the installer stops processing tables and the merge fails. The installer checks that the two databases have the same schema before checking for row merge conflicts. If ERROR_DATATYPE_MISMATCH is returned, you are guaranteed that the databases have not been changed.
     * 
     * If the data in particular rows differ, this is a row merge conflict, the installer returns ERROR_FUNCTION_FAILED and creates a new table named <i>szTableName</i>. The first column of this table is the name of the table having the conflict. The second column gives the number of rows in the table having the conflict. The table that reports conflicts appears as follows.
     * 
     * <table>
     * <tr>
     * <th>Column</th>
     * <th>Type</th>
     * <th>Key</th>
     * <th>Nullable</th>
     * </tr>
     * <tr>
     * <td>Table</td>
     * <td>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/text">Text</a>
     * </td>
     * <td>Y</td>
     * <td>N</td>
     * </tr>
     * <tr>
     * <td>NumRowMergeConflicts</td>
     * <td>
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/integer">Integer</a>
     * </td>
     * <td> </td>
     * <td>N</td>
     * </tr>
     * </table>
     *  
     * 
     * This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseMerge as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase The handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @param {Integer} hDatabaseMerge The handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> to merge into the base database.
     * @param {Pointer<PWSTR>} szTableName The name of the table to receive merge conflict information.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabasemergew
     * @since windows8.0
     */
    static MsiDatabaseMergeW(hDatabase, hDatabaseMerge, szTableName) {
        DllCall("msi.dll\MsiDatabaseMergeW", "uint", hDatabase, "uint", hDatabaseMerge, "ptr", szTableName)
    }

    /**
     * The MsiDatabaseGenerateTransform function generates a transform file of differences between two databases. (ANSI)
     * @remarks
     * To generate a difference file between two databases, use the 
     * <b>MsiDatabaseGenerateTransform</b> function. A transform contains information regarding insertion and deletion of columns and rows. The validation flags are stored in the summary information stream of the transform file.
     * 
     * For tables that exist in both databases, the only difference between the two schemas that is allowed is the addition of columns to the end of the reference table. You cannot add primary key columns to a table or change the order or names or column definitions of the existing columns as defined in the base table. In other words, if neither table contains data and columns are removed from the reference table, the resulting table is identical to the base table.
     * 
     * Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.
     * 
     * This function does not generate a Summary Information stream. Use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msicreatetransformsummaryinfoa">MsiCreateTransformSummaryInfo</a> to create the stream for an existing transform.
     * 
     * If <i>szTransformFile</i> is null, you can test whether two databases are identical without creating a transform. If the databases are identical, ERROR_NO_DATA is returned, NOERROR is returned if differences are found.
     * 
     * This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseGenerateTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> that includes the changes.
     * @param {Integer} hDatabaseReference Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> that does not include the changes.
     * @param {Pointer<PSTR>} szTransformFile A null-terminated string that specifies the name of the transform file being generated. This parameter can be null. If <i>szTransformFile</i> is null, you can use 
     * <b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform. If the databases are identical, the function returns ERROR_NO_DATA. If the databases are different the function returns NOERROR.
     * @param {Integer} iReserved1 This is a reserved argument and must be set to 0.
     * @param {Integer} iReserved2 This is a reserved argument and must be set to 0.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabasegeneratetransforma
     * @since windows8.0
     */
    static MsiDatabaseGenerateTransformA(hDatabase, hDatabaseReference, szTransformFile, iReserved1, iReserved2) {
        DllCall("msi.dll\MsiDatabaseGenerateTransformA", "uint", hDatabase, "uint", hDatabaseReference, "ptr", szTransformFile, "int", iReserved1, "int", iReserved2)
    }

    /**
     * The MsiDatabaseGenerateTransform function generates a transform file of differences between two databases. (Unicode)
     * @remarks
     * To generate a difference file between two databases, use the 
     * <b>MsiDatabaseGenerateTransform</b> function. A transform contains information regarding insertion and deletion of columns and rows. The validation flags are stored in the summary information stream of the transform file.
     * 
     * For tables that exist in both databases, the only difference between the two schemas that is allowed is the addition of columns to the end of the reference table. You cannot add primary key columns to a table or change the order or names or column definitions of the existing columns as defined in the base table. In other words, if neither table contains data and columns are removed from the reference table, the resulting table is identical to the base table.
     * 
     * Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.
     * 
     * This function does not generate a Summary Information stream. Use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msicreatetransformsummaryinfoa">MsiCreateTransformSummaryInfo</a> to create the stream for an existing transform.
     * 
     * If <i>szTransformFile</i> is null, you can test whether two databases are identical without creating a transform. If the databases are identical, ERROR_NO_DATA is returned, NOERROR is returned if differences are found.
     * 
     * This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseGenerateTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> that includes the changes.
     * @param {Integer} hDatabaseReference Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> that does not include the changes.
     * @param {Pointer<PWSTR>} szTransformFile A null-terminated string that specifies the name of the transform file being generated. This parameter can be null. If <i>szTransformFile</i> is null, you can use 
     * <b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform. If the databases are identical, the function returns ERROR_NO_DATA. If the databases are different the function returns NOERROR.
     * @param {Integer} iReserved1 This is a reserved argument and must be set to 0.
     * @param {Integer} iReserved2 This is a reserved argument and must be set to 0.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabasegeneratetransformw
     * @since windows8.0
     */
    static MsiDatabaseGenerateTransformW(hDatabase, hDatabaseReference, szTransformFile, iReserved1, iReserved2) {
        DllCall("msi.dll\MsiDatabaseGenerateTransformW", "uint", hDatabase, "uint", hDatabaseReference, "ptr", szTransformFile, "int", iReserved1, "int", iReserved2)
    }

    /**
     * The MsiDatabaseApplyTransform function applies a transform to a database. (ANSI)
     * @remarks
     * The 
     * <b>MsiDatabaseApplyTransform</b> function delays transforming tables until it is necessary. Any tables to be added or dropped are processed immediately. However, changes to the existing table are delayed until the table is loaded or the database is committed.
     * 
     * An error occurs if 
     * <b>MsiDatabaseApplyTransform</b> is called when tables have already been loaded and saved to storage.
     * 
     * Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.
     * 
     * This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseApplyTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> to the transform.
     * @param {Pointer<PSTR>} szTransformFile Specifies the name of the transform file to apply.
     * @param {Integer} iErrorConditions Error conditions that should be suppressed. This parameter is a bit field that can contain the following bits. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Error condition</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_ADDEXISTINGROW"></a><a id="msitransform_error_addexistingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b></dt>
     * <dt>0x0001</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Adding a row that already exists.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_DELMISSINGROW"></a><a id="msitransform_error_delmissingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_DELMISSINGROW</b></dt>
     * <dt>0x0002</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Deleting a row that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_ADDEXISTINGTABLE"></a><a id="msitransform_error_addexistingtable"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b></dt>
     * <dt>0x0004</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Adding a table that already exists.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_DELMISSINGTABLE"></a><a id="msitransform_error_delmissingtable"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b></dt>
     * <dt>0x0008</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Deleting a table that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_UPDATEMISSINGROW"></a><a id="msitransform_error_updatemissingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b></dt>
     * <dt>0x0010</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Updating a row that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_CHANGECODEPAGE"></a><a id="msitransform_error_changecodepage"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b></dt>
     * <dt>0x0020</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Transform and database code pages do not match and neither has a neutral code page.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_VIEWTRANSFORM"></a><a id="msitransform_error_viewtransform"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_VIEWTRANSFORM</b></dt>
     * <dt>0x0100</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create the temporary 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/-transformview-table">_TransformView table</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabaseapplytransforma
     * @since windows8.0
     */
    static MsiDatabaseApplyTransformA(hDatabase, szTransformFile, iErrorConditions) {
        DllCall("msi.dll\MsiDatabaseApplyTransformA", "uint", hDatabase, "ptr", szTransformFile, "int", iErrorConditions)
    }

    /**
     * The MsiDatabaseApplyTransform function applies a transform to a database. (Unicode)
     * @remarks
     * The 
     * <b>MsiDatabaseApplyTransform</b> function delays transforming tables until it is necessary. Any tables to be added or dropped are processed immediately. However, changes to the existing table are delayed until the table is loaded or the database is committed.
     * 
     * An error occurs if 
     * <b>MsiDatabaseApplyTransform</b> is called when tables have already been loaded and saved to storage.
     * 
     * Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.
     * 
     * This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDatabaseApplyTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a> to the transform.
     * @param {Pointer<PWSTR>} szTransformFile Specifies the name of the transform file to apply.
     * @param {Integer} iErrorConditions Error conditions that should be suppressed. This parameter is a bit field that can contain the following bits. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Error condition</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_ADDEXISTINGROW"></a><a id="msitransform_error_addexistingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b></dt>
     * <dt>0x0001</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Adding a row that already exists.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_DELMISSINGROW"></a><a id="msitransform_error_delmissingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_DELMISSINGROW</b></dt>
     * <dt>0x0002</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Deleting a row that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_ADDEXISTINGTABLE"></a><a id="msitransform_error_addexistingtable"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b></dt>
     * <dt>0x0004</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Adding a table that already exists.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_DELMISSINGTABLE"></a><a id="msitransform_error_delmissingtable"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b></dt>
     * <dt>0x0008</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Deleting a table that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_UPDATEMISSINGROW"></a><a id="msitransform_error_updatemissingrow"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b></dt>
     * <dt>0x0010</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Updating a row that does not exist.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_CHANGECODEPAGE"></a><a id="msitransform_error_changecodepage"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b></dt>
     * <dt>0x0020</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Transform and database code pages do not match and neither has a neutral code page.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="MSITRANSFORM_ERROR_VIEWTRANSFORM"></a><a id="msitransform_error_viewtransform"></a><dl>
     * <dt><b>MSITRANSFORM_ERROR_VIEWTRANSFORM</b></dt>
     * <dt>0x0100</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Create the temporary 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/-transformview-table">_TransformView table</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabaseapplytransformw
     * @since windows8.0
     */
    static MsiDatabaseApplyTransformW(hDatabase, szTransformFile, iErrorConditions) {
        DllCall("msi.dll\MsiDatabaseApplyTransformW", "uint", hDatabase, "ptr", szTransformFile, "int", iErrorConditions)
    }

    /**
     * The MsiCreateTransformSummaryInfo function creates summary information of an existing transform to include validation and error conditions. Execution of this function sets the error record, which is accessible by using MsiGetLastErrorRecord. (ANSI)
     * @remarks
     * The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> Property and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> Property  must be defined in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/property-table">Property Table</a> of both the base and reference databases. If MSITRANSFORM_VALIDATE_UPGRADECODE is used, the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/upgradecode">UpgradeCode</a> Property must also be defined in both databases. If these conditions are not met, 
     * <b>MsiCreateTransformSummaryInfo</b> returns ERROR_INSTALL_PACKAGE_INVALID.
     * 
     * <ul>
     * <li>Do not use the semicolon for filenames or paths, because it is used as a list delimiter for transforms, sources, and patches.</li>
     * <li>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</li>
     * </ul>
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiCreateTransformSummaryInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase The handle to the database that contains the new database summary information.
     * @param {Integer} hDatabaseReference The handle to the database that contains the original summary information.
     * @param {Pointer<PSTR>} szTransformFile The name of the transform to which the summary information is added.
     * @param {Integer} iErrorConditions 
     * @param {Integer} iValidation 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msicreatetransformsummaryinfoa
     * @since windows8.0
     */
    static MsiCreateTransformSummaryInfoA(hDatabase, hDatabaseReference, szTransformFile, iErrorConditions, iValidation) {
        DllCall("msi.dll\MsiCreateTransformSummaryInfoA", "uint", hDatabase, "uint", hDatabaseReference, "ptr", szTransformFile, "int", iErrorConditions, "int", iValidation)
    }

    /**
     * The MsiCreateTransformSummaryInfo function creates summary information of an existing transform to include validation and error conditions. Execution of this function sets the error record, which is accessible by using MsiGetLastErrorRecord. (Unicode)
     * @remarks
     * The <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> Property and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/productversion">ProductVersion</a> Property  must be defined in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/property-table">Property Table</a> of both the base and reference databases. If MSITRANSFORM_VALIDATE_UPGRADECODE is used, the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/upgradecode">UpgradeCode</a> Property must also be defined in both databases. If these conditions are not met, 
     * <b>MsiCreateTransformSummaryInfo</b> returns ERROR_INSTALL_PACKAGE_INVALID.
     * 
     * <ul>
     * <li>Do not use the semicolon for filenames or paths, because it is used as a list delimiter for transforms, sources, and patches.</li>
     * <li>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</li>
     * </ul>
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiCreateTransformSummaryInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hDatabase The handle to the database that contains the new database summary information.
     * @param {Integer} hDatabaseReference The handle to the database that contains the original summary information.
     * @param {Pointer<PWSTR>} szTransformFile The name of the transform to which the summary information is added.
     * @param {Integer} iErrorConditions 
     * @param {Integer} iValidation 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msicreatetransformsummaryinfow
     * @since windows8.0
     */
    static MsiCreateTransformSummaryInfoW(hDatabase, hDatabaseReference, szTransformFile, iErrorConditions, iValidation) {
        DllCall("msi.dll\MsiCreateTransformSummaryInfoW", "uint", hDatabase, "uint", hDatabaseReference, "ptr", szTransformFile, "int", iErrorConditions, "int", iValidation)
    }

    /**
     * The MsiDatabaseCommit function commits changes to a database.
     * @remarks
     * The 
     * <b>MsiDatabaseCommit</b> function finalizes the persistent form of the database. All persistent data is then written to the writable database. No temporary columns or rows are written. The 
     * <b>MsiDatabaseCommit</b> function has no effect on a database that is opened as read-only. You can call this function multiple times to save the current state of tables loaded into memory. When the database is finally closed, any changes made after the database is committed are rolled back. This function is normally called prior to shutdown when all database changes have been finalized.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * @param {Integer} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidatabasecommit
     * @since windows8.0
     */
    static MsiDatabaseCommit(hDatabase) {
        DllCall("msi.dll\MsiDatabaseCommit", "uint", hDatabase)
    }

    /**
     * The MsiGetDatabaseState function returns the state of the database.
     * @remarks
     * The 
     * <b>MsiGetDatabaseState</b> function returns the update state of the database.
     * @param {Integer} hDatabase Handle to the database obtained from <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetdatabasestate
     * @since windows8.0
     */
    static MsiGetDatabaseState(hDatabase) {
        DllCall("msi.dll\MsiGetDatabaseState", "uint", hDatabase)
    }

    /**
     * The MsiCreateRecord function creates a new record object with the specified number of fields. This function returns a handle that should be closed using MsiCloseHandle.
     * @remarks
     * Field 0 of the record object created by the 
     * <b>MsiCreateRecord</b> function is used for format strings and operation codes and is not included in the count specified by <i>cParams</i>. All fields are initialized to null.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * @param {Integer} cParams Specifies the number of fields the record will have. The maximum number of fields in a record is limited to 65535.
     * @returns {Integer} If the function succeeds, the return value is handle to a new record object.
     * 
     * If the function fails, the return value is null.
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msicreaterecord
     * @since windows8.0
     */
    static MsiCreateRecord(cParams) {
        result := DllCall("msi.dll\MsiCreateRecord", "uint", cParams, "uint")
        return result
    }

    /**
     * Reports a null record field.
     * @remarks
     * The <i>iField</i> parameter is based on 1 (one).
     * @param {Integer} hRecord Handle to a record.
     * @param {Integer} iField Specifies the field to check.
     * @returns {Integer} This function returns BOOL.
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordisnull
     * @since windows8.0
     */
    static MsiRecordIsNull(hRecord, iField) {
        result := DllCall("msi.dll\MsiRecordIsNull", "uint", hRecord, "uint", iField, "int")
        return result
    }

    /**
     * The MsiRecordDataSize function returns the length of a record field. The count does not include the terminating null character.
     * @param {Integer} hRecord Handle to the record.
     * @param {Integer} iField Specifies a field of the record.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecorddatasize
     * @since windows8.0
     */
    static MsiRecordDataSize(hRecord, iField) {
        DllCall("msi.dll\MsiRecordDataSize", "uint", hRecord, "uint", iField)
    }

    /**
     * Sets a record field to an integer field.
     * @remarks
     * In the 
     * <b>MsiRecordSetInteger</b> function, attempting to store a value in a nonexistent field causes an error. Note that the following code returns <b>ERROR_INVALID_PARAMETER</b>.
     * 
     * 
     * ```cpp
     * MSIHANDLE hRecord;
     * UINT lReturn;  
     * 
     * //create an msirecord with no fields
     * hRecord = MsiCreateRecord(0); 
     * 
     * //attempting to set the first field's value gives you ERROR_INVALID_PARAMETER 
     * lReturn = MsiRecordSetInteger(hRecord, 1, 0);  
     * 
     * ```
     * 
     * 
     * To set a record integer field to <b>NULL_INTEGER</b>, set <i>iValue</i> to <b>MSI_NULL_INTEGER</b>.
     * @param {Integer} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record to set.
     * @param {Integer} iValue Specifies the value to which to set the field.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordsetinteger
     * @since windows8.0
     */
    static MsiRecordSetInteger(hRecord, iField, iValue) {
        DllCall("msi.dll\MsiRecordSetInteger", "uint", hRecord, "uint", iField, "int", iValue)
    }

    /**
     * The MsiRecordSetString function copies a string into the designated field. (ANSI)
     * @remarks
     * In the 
     * <b>MsiRecordSetString</b> function, a null string pointer and an empty string both set the field to null. Attempting to store a value in a nonexistent field causes an error.
     * 
     * To set a record string field to null, set szValue to either a null string or an empty string.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiRecordSetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record to set.
     * @param {Pointer<PSTR>} szValue Specifies the string value of the field.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordsetstringa
     * @since windows8.0
     */
    static MsiRecordSetStringA(hRecord, iField, szValue) {
        DllCall("msi.dll\MsiRecordSetStringA", "uint", hRecord, "uint", iField, "ptr", szValue)
    }

    /**
     * The MsiRecordSetString function copies a string into the designated field. (Unicode)
     * @remarks
     * In the 
     * <b>MsiRecordSetString</b> function, a null string pointer and an empty string both set the field to null. Attempting to store a value in a nonexistent field causes an error.
     * 
     * To set a record string field to null, set szValue to either a null string or an empty string.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiRecordSetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record to set.
     * @param {Pointer<PWSTR>} szValue Specifies the string value of the field.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordsetstringw
     * @since windows8.0
     */
    static MsiRecordSetStringW(hRecord, iField, szValue) {
        DllCall("msi.dll\MsiRecordSetStringW", "uint", hRecord, "uint", iField, "ptr", szValue)
    }

    /**
     * The MsiRecordGetInteger function returns the integer value from a record field.
     * @remarks
     * The 
     * <b>MsiRecordGetInteger</b> function returns <b>MSI_NULL_INTEGER</b> if the field is null or if the field is a string that cannot be converted to an integer.
     * @param {Integer} hRecord Handle to a record.
     * @param {Integer} iField Specifies the field of the record from which to obtain the value.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordgetinteger
     * @since windows8.0
     */
    static MsiRecordGetInteger(hRecord, iField) {
        DllCall("msi.dll\MsiRecordGetInteger", "uint", hRecord, "uint", iField)
    }

    /**
     * The MsiRecordGetString function returns the string value of a record field. (ANSI)
     * @remarks
     * If <b>ERROR_MORE_DATA</b> is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If <b>ERROR_SUCCESS</b> is returned, it gives the number of characters written to the string buffer. To get the size of the buffer, pass in the address of a 1 character buffer as <i>szValueBuf</i> and specify the size of the buffer with <i>pcchValueBuf</i> as 0. This ensures that no string value returned by the function fits into the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiRecordGetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field requested.
     * @param {Pointer<PSTR>} szValueBuf Pointer to the buffer that receives the null terminated string containing the value of the record field. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchValueBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordgetstringa
     * @since windows8.0
     */
    static MsiRecordGetStringA(hRecord, iField, szValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiRecordGetStringA", "uint", hRecord, "uint", iField, "ptr", szValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * The MsiRecordGetString function returns the string value of a record field. (Unicode)
     * @remarks
     * If <b>ERROR_MORE_DATA</b> is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If <b>ERROR_SUCCESS</b> is returned, it gives the number of characters written to the string buffer. To get the size of the buffer, pass in the address of a 1 character buffer as <i>szValueBuf</i> and specify the size of the buffer with <i>pcchValueBuf</i> as 0. This ensures that no string value returned by the function fits into the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiRecordGetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field requested.
     * @param {Pointer<PWSTR>} szValueBuf Pointer to the buffer that receives the null terminated string containing the value of the record field. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchValueBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordgetstringw
     * @since windows8.0
     */
    static MsiRecordGetStringW(hRecord, iField, szValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiRecordGetStringW", "uint", hRecord, "uint", iField, "ptr", szValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * Returns the number of fields in a record.
     * @remarks
     * The count returned by the 
     * <b>MsiRecordGetFieldCount</b> parameter does not include field 0. Read access to fields beyond this count returns null values. Write access fails.
     * @param {Integer} hRecord Handle to a record.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordgetfieldcount
     * @since windows8.0
     */
    static MsiRecordGetFieldCount(hRecord) {
        DllCall("msi.dll\MsiRecordGetFieldCount", "uint", hRecord)
    }

    /**
     * The MsiRecordSetStream function sets a record stream field from a file. Stream data cannot be inserted into temporary fields. (ANSI)
     * @remarks
     * The contents of the file specified in the 
     * <b>MsiRecordSetStream</b> function is read into a stream object. The stream persists if the record is inserted into the database and the database is committed.
     * 
     * To reset the stream to its beginning you must pass in a Null pointer for <i>szFilePath</i>. Do not pass a pointer to an empty string, "", to reset the stream.
     * 
     * See also 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/ole-limitations-on-streams">OLE Limitations on Streams</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiRecordSetStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record to set.
     * @param {Pointer<PSTR>} szFilePath Specifies the path to the file containing the stream.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordsetstreama
     * @since windows8.0
     */
    static MsiRecordSetStreamA(hRecord, iField, szFilePath) {
        DllCall("msi.dll\MsiRecordSetStreamA", "uint", hRecord, "uint", iField, "ptr", szFilePath)
    }

    /**
     * The MsiRecordSetStream function sets a record stream field from a file. Stream data cannot be inserted into temporary fields. (Unicode)
     * @remarks
     * The contents of the file specified in the 
     * <b>MsiRecordSetStream</b> function is read into a stream object. The stream persists if the record is inserted into the database and the database is committed.
     * 
     * To reset the stream to its beginning you must pass in a Null pointer for <i>szFilePath</i>. Do not pass a pointer to an empty string, "", to reset the stream.
     * 
     * See also 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/ole-limitations-on-streams">OLE Limitations on Streams</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiRecordSetStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record to set.
     * @param {Pointer<PWSTR>} szFilePath Specifies the path to the file containing the stream.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordsetstreamw
     * @since windows8.0
     */
    static MsiRecordSetStreamW(hRecord, iField, szFilePath) {
        DllCall("msi.dll\MsiRecordSetStreamW", "uint", hRecord, "uint", iField, "ptr", szFilePath)
    }

    /**
     * The MsiRecordReadStream function reads bytes from a record stream field into a buffer.
     * @remarks
     * To read a stream, set <i>pcbDataBuf</i> to the number of bytes that are to be transferred from stream to buffer each time the function is called. On return, the 
     * <b>MsiRecordReadStream</b> resets <i>pcbDataBuf </i> to the number of bytes that were actually transferred. If the buffer is smaller than the stream, the stream is repositioned when the buffer becomes full such that the next data in the stream is transferred by the next call to the function. When no more bytes are available, 
     * <b>MsiRecordReadStream</b> returns ERROR_SUCCESS.
     * 
     * If you pass 0 for <i>szDataBuf</i> then <i>pcbDataBuf</i> is reset to the number of bytes in the stream remaining to be read.
     * 
     * The following code sample reads from a stream that is in field 1 of a record specified by hRecord and reads the entire stream 8 bytes at a time.
     * 
     * 
     * ```cpp
     * char szBuffer[8];
     * PMSIHANDLE hRecord;
     * DWORD cbBuf = sizeof(szBuffer);
     * do 
     * {
     *     if (MsiRecordReadStream(hRecord, 1, szBuffer, 
     *         &cbBuf) != ERROR_SUCCESS)
     *         break; // error 
     * }
     * while (cbBuf == 8);  //continue reading the stream while you receive a full buffer
     * //cbBuf will be less once you reach the end of the stream and cannot fill your 
     * //buffer with stream data
     * 
     * ```
     * 
     * 
     * See also 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/ole-limitations-on-streams">OLE Limitations on Streams</a>.
     * @param {Integer} hRecord Handle to the record.
     * @param {Integer} iField Specifies the field of the record.
     * @param {Pointer<PSTR>} szDataBuf A buffer to receive the stream field. You should ensure the destination buffer is the same size or larger than the source buffer. See the Remarks section.
     * @param {Pointer<UInt32>} pcbDataBuf Specifies the in and out buffer count. On input, this is the full size of the buffer. On output, this is the number of bytes that were actually written to the buffer. See the Remarks section.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordreadstream
     * @since windows8.0
     */
    static MsiRecordReadStream(hRecord, iField, szDataBuf, pcbDataBuf) {
        DllCall("msi.dll\MsiRecordReadStream", "uint", hRecord, "uint", iField, "ptr", szDataBuf, "ptr", pcbDataBuf)
    }

    /**
     * The MsiRecordClearData function sets all fields in a record to null.
     * @param {Integer} hRecord Handle to the record.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msirecordcleardata
     * @since windows8.0
     */
    static MsiRecordClearData(hRecord) {
        DllCall("msi.dll\MsiRecordClearData", "uint", hRecord)
    }

    /**
     * The MsiGetActiveDatabase function returns the active database for the installation. This function returns a read-only handle that should be closed using MsiCloseHandle.
     * @remarks
     * The 
     * <b>MsiGetActiveDatabase</b> function accesses the database in use by the running the installation.
     * 
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @returns {Integer} If the function succeeds, it returns a read-only handle to the database currently in use by the installer. If the function fails, the function returns zero, 0.
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetactivedatabase
     * @since windows8.0
     */
    static MsiGetActiveDatabase(hInstall) {
        result := DllCall("msi.dll\MsiGetActiveDatabase", "uint", hInstall, "uint")
        return result
    }

    /**
     * The MsiSetProperty function sets the value for an installation property. (ANSI)
     * @remarks
     * If the property is not defined, it is created by the 
     * <b>MsiSetProperty</b> function. If the value is null or an empty string, the property is removed.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szName Specifies the name of the property.
     * @param {Pointer<PSTR>} szValue Specifies the value of the property.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisetpropertya
     * @since windows8.0
     */
    static MsiSetPropertyA(hInstall, szName, szValue) {
        DllCall("msi.dll\MsiSetPropertyA", "uint", hInstall, "ptr", szName, "ptr", szValue)
    }

    /**
     * The MsiSetProperty function sets the value for an installation property. (Unicode)
     * @remarks
     * If the property is not defined, it is created by the 
     * <b>MsiSetProperty</b> function. If the value is null or an empty string, the property is removed.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szName Specifies the name of the property.
     * @param {Pointer<PWSTR>} szValue Specifies the value of the property.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisetpropertyw
     * @since windows8.0
     */
    static MsiSetPropertyW(hInstall, szName, szValue) {
        DllCall("msi.dll\MsiSetPropertyW", "uint", hInstall, "ptr", szName, "ptr", szValue)
    }

    /**
     * The MsiGetProperty function gets the value for an installer property. (ANSI)
     * @remarks
     * If the value for the property retrieved by the 
     * <b>MsiGetProperty</b> function is not defined, it is equivalent to a 0-length value. It is not an error.
     * 
     * If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * The following example shows how a DLL custom action could access the value of a property by dynamically determining the size of the value buffer.
     * 
     * 
     * ```cpp
     * UINT __stdcall MyCustomAction(MSIHANDLE hInstall)
     * {
     *     TCHAR* szValueBuf = NULL;
     *     DWORD cchValueBuf = 0;
     *     UINT uiStat =  MsiGetProperty(hInstall, TEXT("MyProperty"), TEXT(""), &cchValueBuf);
     *     //cchValueBuf now contains the size of the property's string, without null termination
     *     if (ERROR_MORE_DATA == uiStat)
     *     {
     *         ++cchValueBuf; // add 1 for null termination
     *         szValueBuf = new TCHAR[cchValueBuf];
     *         if (szValueBuf)
     *         {
     *             uiStat = MsiGetProperty(hInstall, TEXT("MyProperty"), szValueBuf, &cchValueBuf);
     *         }
     *     }
     *     if (ERROR_SUCCESS != uiStat)
     *     {
     *         if (szValueBuf != NULL) 
     *            delete[] szValueBuf;
     *         return ERROR_INSTALL_FAILURE;
     *     }
     * 
     *     // custom action uses MyProperty
     *     // ...
     * 
     *     delete[] szValueBuf;
     * 
     *     return ERROR_SUCCESS;
     * }
     * 
     * ```
     * 
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szName A null-terminated string that specifies the name of the property.
     * @param {Pointer<PSTR>} szValueBuf Pointer to the buffer that receives the null terminated string containing the value of the property. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return ERROR_MORE_DATA and <i>pchValueBuf </i> will contain the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf </i> contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf </i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pchValueBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetpropertya
     * @since windows8.0
     */
    static MsiGetPropertyA(hInstall, szName, szValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiGetPropertyA", "uint", hInstall, "ptr", szName, "ptr", szValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * The MsiGetProperty function gets the value for an installer property. (Unicode)
     * @remarks
     * If the value for the property retrieved by the 
     * <b>MsiGetProperty</b> function is not defined, it is equivalent to a 0-length value. It is not an error.
     * 
     * If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * The following example shows how a DLL custom action could access the value of a property by dynamically determining the size of the value buffer.
     * 
     * 
     * ```cpp
     * UINT __stdcall MyCustomAction(MSIHANDLE hInstall)
     * {
     *     TCHAR* szValueBuf = NULL;
     *     DWORD cchValueBuf = 0;
     *     UINT uiStat =  MsiGetProperty(hInstall, TEXT("MyProperty"), TEXT(""), &cchValueBuf);
     *     //cchValueBuf now contains the size of the property's string, without null termination
     *     if (ERROR_MORE_DATA == uiStat)
     *     {
     *         ++cchValueBuf; // add 1 for null termination
     *         szValueBuf = new TCHAR[cchValueBuf];
     *         if (szValueBuf)
     *         {
     *             uiStat = MsiGetProperty(hInstall, TEXT("MyProperty"), szValueBuf, &cchValueBuf);
     *         }
     *     }
     *     if (ERROR_SUCCESS != uiStat)
     *     {
     *         if (szValueBuf != NULL) 
     *            delete[] szValueBuf;
     *         return ERROR_INSTALL_FAILURE;
     *     }
     * 
     *     // custom action uses MyProperty
     *     // ...
     * 
     *     delete[] szValueBuf;
     * 
     *     return ERROR_SUCCESS;
     * }
     * 
     * ```
     * 
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szName A null-terminated string that specifies the name of the property.
     * @param {Pointer<PWSTR>} szValueBuf Pointer to the buffer that receives the null terminated string containing the value of the property. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return ERROR_MORE_DATA and <i>pchValueBuf </i> will contain the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf </i> contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<UInt32>} pcchValueBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf </i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pchValueBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetpropertyw
     * @since windows8.0
     */
    static MsiGetPropertyW(hInstall, szName, szValueBuf, pcchValueBuf) {
        DllCall("msi.dll\MsiGetPropertyW", "uint", hInstall, "ptr", szName, "ptr", szValueBuf, "ptr", pcchValueBuf)
    }

    /**
     * The MsiGetLanguage function returns the numeric language of the installation that is currently running.
     * @remarks
     * The 
     * <b>MsiGetLanguage</b> function returns 0 if an installation is not running.
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @returns {Integer} If the function succeeds, the return value is the numeric LANGID for the install.
     * 
     * If the function fails, the return value can be the following value.
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetlanguage
     * @since windows8.0
     */
    static MsiGetLanguage(hInstall) {
        result := DllCall("msi.dll\MsiGetLanguage", "uint", hInstall, "ushort")
        return result
    }

    /**
     * The MsiGetMode function is used to determine whether the installer is currently running in a specified mode, as listed in the table.
     * @remarks
     * Note that not all the run mode values of <i>iRunMode</i> are available when calling 
     * <b>MsiGetMode</b> from a deferred custom action. For details, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-context-information-for-deferred-execution-custom-actions">Obtaining Context Information for Deferred Execution Custom Actions</a>.
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Integer} eRunMode 
     * @returns {Integer} <b>TRUE</b> indicates the specific property passed into the function is currently set.
     * 
     * <b>FALSE</b> indicates the specific property passed into the function is currently not set.
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetmode
     * @since windows8.0
     */
    static MsiGetMode(hInstall, eRunMode) {
        result := DllCall("msi.dll\MsiGetMode", "uint", hInstall, "int", eRunMode, "int")
        return result
    }

    /**
     * The MsiSetMode function sets an internal engine Boolean state.
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Integer} eRunMode 
     * @param {Integer} fState Specifies the state to set to <b>TRUE</b> or <b>FALSE</b>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisetmode
     * @since windows8.0
     */
    static MsiSetMode(hInstall, eRunMode, fState) {
        DllCall("msi.dll\MsiSetMode", "uint", hInstall, "int", eRunMode, "int", fState)
    }

    /**
     * The MsiFormatRecord function formats record field data and properties using a format string. (ANSI)
     * @remarks
     * The 
     * <b>MsiFormatRecord</b> function uses the following format process.
     * 
     * Parameters that are to be 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/formatted">formatted</a> are enclosed in square brackets [...]. The square brackets can be iterated because the substitutions are resolved from the inside out.
     * 
     * If a part of the string is enclosed in curly braces { } and contains no square brackets, it is left unchanged, including the curly braces.
     * 
     * If a part of the string is enclosed in curly braces { } and contains one or more property names, and if all the properties are found, the text (with the resolved substitutions) is displayed without the curly braces. If any of the properties is not found, all the text in the braces and the braces themselves are removed.
     * 
     * Note in the case of deferred execution custom actions, 
     * <b>MsiFormatRecord</b> only supports <b>CustomActionData</b> and <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> properties. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-context-information-for-deferred-execution-custom-actions">Obtaining Context Information for Deferred Execution Custom Actions</a>.
     * 
     * The following steps describe how to format strings using the 
     * <b>MsiFormatRecord</b> function:
     * 
     * <p class="proch"><b>To format strings using the MsiFormatRecord function</b>
     * 
     * <ol>
     * <li>The numeric parameters are substituted by replacing the marker with the value of the corresponding record field, with missing or null values producing no text.</li>
     * <li>
     * The resultant string is processed by replacing the nonrecord parameters with the corresponding values, described next.
     * 
     * <ul>
     * <li>If a substring of the form "[propertyname]" is encountered, it is replaced by the value of the property.</li>
     * <li>If a substring of the form "[%environmentvariable]" is found, the value of the environment variable is substituted.</li>
     * <li>If a substring of the form" [#<i>filekey</i>]" is found, it is replaced by the full path of the file, with the value <i>filekey</i> used as a key into the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/file-table">File table</a>. The value of "[#<i>filekey</i>]" remains blank and is not replaced by a path until the installer runs the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize action</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/filecost-action">FileCost action</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The value of "[#<i>filekey</i>]" depends upon the installation state of the component to which the file belongs. If the component is being run from source, the value is the path to the source location of the file. If the component is being run locally, the value is the path to the target location of the file after installation. If the component is absent, the path is blank. For more information about checking the installation state of components, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/checking-the-installation-of-features-components-files">Checking the Installation of Features, Components, Files</a>.</li>
     * <li>If a substring of the form "[$<i>componentkey</i>]" is found, it is replaced by the install directory of the component, with the value <i>componentkey</i> used as a key into the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component table</a>. The value of "[$<i>componentkey</i>]" remains blank and is not replaced by a directory until the installer runs the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize action</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/filecost-action">FileCost action</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The value of "[$<i>componentkey</i>]" depends upon the installation state of the component. If the component is being run from source, the value is the source directory of the file. If the component is being run locally, the value is the target directory after installation. If the component is absent, the value is left blank. For more information about checking the installation state of components, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/checking-the-installation-of-features-components-files">Checking the Installation of Features, Components, Files</a>.</li>
     * <li>Note that if a component is already installed, and is not being reinstalled, removed, or moved during the current installation, the action state of the component is null and therefore the string "[$componentkey]" evaluates to Null.</li>
     * <li>If a substring of the form "[\c]" is found, it is replaced by the character without any further processing. Only the first character after the backslash is kept; everything else is removed.</li>
     * </ul>
     * </li>
     * </ol>
     * If <b>ERROR_MORE_DATA</b> is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If <b>ERROR_SUCCESS</b> is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiFormatRecord as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation. This may be omitted, in which case only the record field parameters are processed and properties are not available for substitution.
     * @param {Integer} hRecord Handle to the record to format. The template string must be stored in record field 0 followed by referenced data parameters.
     * @param {Pointer<PSTR>} szResultBuf Pointer to the buffer that receives the null terminated formatted string. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szResultBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchResultBuf</i> contains the required buffer size in <b>TCHAR</b>s, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchResultBuf</i> contains the number of <b>TCHAR</b>s written to the buffer, not including the terminating null character.
     * @param {Pointer<UInt32>} pcchResultBuf Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szResultBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szResultBuf</i>, not including the terminating null character. If <i>szResultBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchResultBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiformatrecorda
     * @since windows8.0
     */
    static MsiFormatRecordA(hInstall, hRecord, szResultBuf, pcchResultBuf) {
        DllCall("msi.dll\MsiFormatRecordA", "uint", hInstall, "uint", hRecord, "ptr", szResultBuf, "ptr", pcchResultBuf)
    }

    /**
     * The MsiFormatRecord function formats record field data and properties using a format string. (Unicode)
     * @remarks
     * The 
     * <b>MsiFormatRecord</b> function uses the following format process.
     * 
     * Parameters that are to be 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/formatted">formatted</a> are enclosed in square brackets [...]. The square brackets can be iterated because the substitutions are resolved from the inside out.
     * 
     * If a part of the string is enclosed in curly braces { } and contains no square brackets, it is left unchanged, including the curly braces.
     * 
     * If a part of the string is enclosed in curly braces { } and contains one or more property names, and if all the properties are found, the text (with the resolved substitutions) is displayed without the curly braces. If any of the properties is not found, all the text in the braces and the braces themselves are removed.
     * 
     * Note in the case of deferred execution custom actions, 
     * <b>MsiFormatRecord</b> only supports <b>CustomActionData</b> and <a href="https://docs.microsoft.com/windows/desktop/Msi/productcode">ProductCode</a> properties. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/obtaining-context-information-for-deferred-execution-custom-actions">Obtaining Context Information for Deferred Execution Custom Actions</a>.
     * 
     * The following steps describe how to format strings using the 
     * <b>MsiFormatRecord</b> function:
     * 
     * <p class="proch"><b>To format strings using the MsiFormatRecord function</b>
     * 
     * <ol>
     * <li>The numeric parameters are substituted by replacing the marker with the value of the corresponding record field, with missing or null values producing no text.</li>
     * <li>
     * The resultant string is processed by replacing the nonrecord parameters with the corresponding values, described next.
     * 
     * <ul>
     * <li>If a substring of the form "[propertyname]" is encountered, it is replaced by the value of the property.</li>
     * <li>If a substring of the form "[%environmentvariable]" is found, the value of the environment variable is substituted.</li>
     * <li>If a substring of the form" [#<i>filekey</i>]" is found, it is replaced by the full path of the file, with the value <i>filekey</i> used as a key into the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/file-table">File table</a>. The value of "[#<i>filekey</i>]" remains blank and is not replaced by a path until the installer runs the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize action</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/filecost-action">FileCost action</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The value of "[#<i>filekey</i>]" depends upon the installation state of the component to which the file belongs. If the component is being run from source, the value is the path to the source location of the file. If the component is being run locally, the value is the path to the target location of the file after installation. If the component is absent, the path is blank. For more information about checking the installation state of components, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/checking-the-installation-of-features-components-files">Checking the Installation of Features, Components, Files</a>.</li>
     * <li>If a substring of the form "[$<i>componentkey</i>]" is found, it is replaced by the install directory of the component, with the value <i>componentkey</i> used as a key into the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component table</a>. The value of "[$<i>componentkey</i>]" remains blank and is not replaced by a directory until the installer runs the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize action</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/filecost-action">FileCost action</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The value of "[$<i>componentkey</i>]" depends upon the installation state of the component. If the component is being run from source, the value is the source directory of the file. If the component is being run locally, the value is the target directory after installation. If the component is absent, the value is left blank. For more information about checking the installation state of components, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/checking-the-installation-of-features-components-files">Checking the Installation of Features, Components, Files</a>.</li>
     * <li>Note that if a component is already installed, and is not being reinstalled, removed, or moved during the current installation, the action state of the component is null and therefore the string "[$componentkey]" evaluates to Null.</li>
     * <li>If a substring of the form "[\c]" is found, it is replaced by the character without any further processing. Only the first character after the backslash is kept; everything else is removed.</li>
     * </ul>
     * </li>
     * </ol>
     * If <b>ERROR_MORE_DATA</b> is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If <b>ERROR_SUCCESS</b> is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiFormatRecord as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation. This may be omitted, in which case only the record field parameters are processed and properties are not available for substitution.
     * @param {Integer} hRecord Handle to the record to format. The template string must be stored in record field 0 followed by referenced data parameters.
     * @param {Pointer<PWSTR>} szResultBuf Pointer to the buffer that receives the null terminated formatted string. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szResultBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchResultBuf</i> contains the required buffer size in <b>TCHAR</b>s, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchResultBuf</i> contains the number of <b>TCHAR</b>s written to the buffer, not including the terminating null character.
     * @param {Pointer<UInt32>} pcchResultBuf Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szResultBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szResultBuf</i>, not including the terminating null character. If <i>szResultBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchResultBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiformatrecordw
     * @since windows8.0
     */
    static MsiFormatRecordW(hInstall, hRecord, szResultBuf, pcchResultBuf) {
        DllCall("msi.dll\MsiFormatRecordW", "uint", hInstall, "uint", hRecord, "ptr", szResultBuf, "ptr", pcchResultBuf)
    }

    /**
     * The MsiDoAction function executes a built-in action, custom action, or user-interface wizard action. (ANSI)
     * @remarks
     * The 
     * <b>MsiDoAction</b> function executes the action that corresponds to the name supplied. If the name is not recognized by the installer as a built-in action or as a custom action in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/customaction-table">CustomAction table</a>, the name is passed to the user-interface handler object, which can invoke a function or a dialog box. If a null action name is supplied, the installer uses the upper-case value of the <a href="https://docs.microsoft.com/windows/desktop/Msi/action">ACTION</a> property as the action to perform. If no property value is defined, the default action is performed, defined as "INSTALL".
     * 
     * Actions that update the system, such as the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installfiles-action">InstallFiles</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling 
     * <b>MsiDoAction</b>. The exception to this rule is if 
     * <b>MsiDoAction</b> is called from a custom action that is scheduled in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/appsearch-action">AppSearch</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDoAction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szAction Specifies the action to execute.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidoactiona
     * @since windows8.0
     */
    static MsiDoActionA(hInstall, szAction) {
        DllCall("msi.dll\MsiDoActionA", "uint", hInstall, "ptr", szAction)
    }

    /**
     * The MsiDoAction function executes a built-in action, custom action, or user-interface wizard action. (Unicode)
     * @remarks
     * The 
     * <b>MsiDoAction</b> function executes the action that corresponds to the name supplied. If the name is not recognized by the installer as a built-in action or as a custom action in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/customaction-table">CustomAction table</a>, the name is passed to the user-interface handler object, which can invoke a function or a dialog box. If a null action name is supplied, the installer uses the upper-case value of the <a href="https://docs.microsoft.com/windows/desktop/Msi/action">ACTION</a> property as the action to perform. If no property value is defined, the default action is performed, defined as "INSTALL".
     * 
     * Actions that update the system, such as the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installfiles-action">InstallFiles</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling 
     * <b>MsiDoAction</b>. The exception to this rule is if 
     * <b>MsiDoAction</b> is called from a custom action that is scheduled in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/appsearch-action">AppSearch</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiDoAction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szAction Specifies the action to execute.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msidoactionw
     * @since windows8.0
     */
    static MsiDoActionW(hInstall, szAction) {
        DllCall("msi.dll\MsiDoActionW", "uint", hInstall, "ptr", szAction)
    }

    /**
     * The MsiSequence function executes another action sequence, as described in the specified table. (ANSI)
     * @remarks
     * The 
     * <b>MsiSequence</b> function queries the specified table, ordering the actions by the numbers in the Sequence column. For each row retrieved, an action is executed, provided that any supplied condition expression does not evaluate to FALSE.
     * 
     * An action sequence containing any actions that update the system, such as the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installfiles-action">InstallFiles</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling 
     * <b>MsiSequence</b>. The exception to this rule is if 
     * <b>MsiSequence</b> is called from a custom action that is scheduled in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/appsearch-action">AppSearch</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szTable Specifies the name of the table containing the action sequence.
     * @param {Integer} iSequenceMode This parameter is currently unimplemented. It is reserved for future use and must be 0.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisequencea
     * @since windows8.0
     */
    static MsiSequenceA(hInstall, szTable, iSequenceMode) {
        DllCall("msi.dll\MsiSequenceA", "uint", hInstall, "ptr", szTable, "int", iSequenceMode)
    }

    /**
     * The MsiSequence function executes another action sequence, as described in the specified table. (Unicode)
     * @remarks
     * The 
     * <b>MsiSequence</b> function queries the specified table, ordering the actions by the numbers in the Sequence column. For each row retrieved, an action is executed, provided that any supplied condition expression does not evaluate to FALSE.
     * 
     * An action sequence containing any actions that update the system, such as the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installfiles-action">InstallFiles</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling 
     * <b>MsiSequence</b>. The exception to this rule is if 
     * <b>MsiSequence</b> is called from a custom action that is scheduled in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/appsearch-action">AppSearch</a> or 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szTable Specifies the name of the table containing the action sequence.
     * @param {Integer} iSequenceMode This parameter is currently unimplemented. It is reserved for future use and must be 0.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisequencew
     * @since windows8.0
     */
    static MsiSequenceW(hInstall, szTable, iSequenceMode) {
        DllCall("msi.dll\MsiSequenceW", "uint", hInstall, "ptr", szTable, "int", iSequenceMode)
    }

    /**
     * The MsiProcessMessage function sends an error record to the installer for processing.
     * @remarks
     * The 
     * <b>MsiProcessMessage</b> function performs any enabled logging operations and defers execution. You can selectively enable logging for various message types.
     * 
     * For INSTALLMESSAGE_FATALEXIT, INSTALLMESSAGE_ERROR, INSTALLMESSAGE_WARNING, and INSTALLMESSAGE_USER messages, if field 0 is not set field 1 must be set to the error code corresponding to the error message in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/error-table">Error table</a>. Then, the message is formatted using the template from the Error table before passing it to the user-interface handler for display.
     * 
     * <h3><a id="Record_Fields_for_Progress_Bar_Messages"></a><a id="record_fields_for_progress_bar_messages"></a><a id="RECORD_FIELDS_FOR_PROGRESS_BAR_MESSAGES"></a>Record Fields for Progress Bar Messages</h3>
     * The following describes the record fields when eMessageType is set to INSTALLMESSAGE_PROGRESS. Field 1 specifies the type of the progress message. The meaning of the other fields depend upon the value in this field. The possible values that can be set into Field 1 are as follows.
     * 
     * <table>
     * <tr>
     * <th>Field 1 value</th>
     * <th>Field 1 description</th>
     * </tr>
     * <tr>
     * <td>0</td>
     * <td>Resets progress bar and sets the expected total number of ticks in the bar.</td>
     * </tr>
     * <tr>
     * <td>1</td>
     * <td>Provides information related to progress messages to be sent by the current action.</td>
     * </tr>
     * <tr>
     * <td>2</td>
     * <td>Increments the progress bar.</td>
     * </tr>
     * <tr>
     * <td>3</td>
     * <td>Enables an action (such as CustomAction) to add ticks to the expected total number of progress of the progress bar.</td>
     * </tr>
     * </table>
     *  
     * 
     * The meaning of Field 2 depends upon the value in Field 1 as follows.
     * 
     * <table>
     * <tr>
     * <th>Field 1 value</th>
     * <th>Field 2 description</th>
     * </tr>
     * <tr>
     * <td>0</td>
     * <td>Expected total number of ticks in the progress bar.</td>
     * </tr>
     * <tr>
     * <td>1</td>
     * <td>Number of ticks the progress bar moves for each ActionData message that is sent by the current action. This field is ignored if Field 3 is 0.</td>
     * </tr>
     * <tr>
     * <td>2</td>
     * <td>Number of ticks the progress bar has moved.</td>
     * </tr>
     * <tr>
     * <td>3</td>
     * <td>Number of ticks to add to total expected progress.</td>
     * </tr>
     * </table>
     *  
     * 
     * The meaning of Field 3 depends upon the value in Field 1 as follows.
     * 
     * <table>
     * <tr>
     * <th>Field 1 value</th>
     * <th>Field 3 value</th>
     * <th>Field 3 description</th>
     * </tr>
     * <tr>
     * <td>0</td>
     * <td>0</td>
     * <td>Forward progress bar (left to right)</td>
     * </tr>
     * <tr>
     * <td> </td>
     * <td>1</td>
     * <td>Backward progress bar (right to left)</td>
     * </tr>
     * <tr>
     * <td>1</td>
     * <td>0</td>
     * <td>The current action will send explicit ProgressReport messages.</td>
     * </tr>
     * <tr>
     * <td> </td>
     * <td>1</td>
     * <td>Increment the progress bar by the number of ticks specified in Field 2 each time an ActionData message is sent by the current action.</td>
     * </tr>
     * <tr>
     * <td>2</td>
     * <td>Unused</td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>3</td>
     * <td>Unused</td>
     * <td> </td>
     * </tr>
     * </table>
     *  
     * 
     * The meaning of Field 4 depends upon the value in Field 1 as follows.
     * 
     * <table>
     * <tr>
     * <th>Field 1 value</th>
     * <th>Field 4 value</th>
     * <th>Field 4 description</th>
     * </tr>
     * <tr>
     * <td>0</td>
     * <td>0</td>
     * <td>Execution is in progress. In this case, the UI could calculate and display the time remaining.</td>
     * </tr>
     * <tr>
     * <td> </td>
     * <td>1</td>
     * <td>Creating the execution script. In this case, the UI could display a message to please wait while the installer finishes preparing the installation.</td>
     * </tr>
     * <tr>
     * <td>1</td>
     * <td>Unused</td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>2</td>
     * <td>Unused</td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>3</td>
     * <td>Unused</td>
     * <td> </td>
     * </tr>
     * </table>
     *  
     * 
     * For more information and a code sample, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/adding-custom-actions-to-the-progressbar">Adding Custom Actions to the ProgressBar</a>.
     * 
     * <h3><a id="Display_of_Message_Boxes"></a><a id="display_of_message_boxes"></a><a id="DISPLAY_OF_MESSAGE_BOXES"></a>Display of Message Boxes</h3>
     * To display a message box with push buttons or icons, use OR-operators to add INSTALLMESSAGE_ERROR, INSTALLMESSAGE_WARNING, or INSTALLMESSAGE_USER with the message box options used by <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-messagebox">MessageBox</a> and <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-messageboxexa">MessageBoxEx</a>. The available push button options are MB_OK, MB_OKCANCEL, MB_ABORTRETRYIGNORE, MB_YESNOCANCEL, MB_YESNO, and MB_RETRYCANCEL. The available default button options are MB_DEFBUTTON1, MB_DEFBUTTON2, and MB_DEFBUTTON3. The available icon options are MB_ICONERROR, MB_ICONQUESTION, MB_ICONWARNING, and MB_ICONINFORMATION. If no icon options is specified, Windows Installer chooses a default icon style based upon the message type.
     * 
     * For example, the following call to 
     * <b>MsiProcessMessage</b> sends an INSTALLMESSAGE_ERROR message with the MB_ICONWARNING icon and the MB_ABORTRETRYCANCEL buttons.
     * 
     * 
     * ```cpp
     * PMSIHANDLE hInstall;
     * PMSIHANDLE hRec;
     * MsiProcessMessage(hInstall, 
     *                   INSTALLMESSAGE(INSTALLMESSAGE_ERROR|MB_ABORTRETRYIGNORE|MB_ICONWARNING),
     *                   hRec);
     * 
     * ```
     * 
     * 
     * If a custom action calls <b>MsiProcessMessage</b>, the custom action should be capable of handling a cancellation by the user and should return ERROR_INSTALL_USEREXIT.
     * 
     * 
     * For more information on sending messages with 
     * <b>MsiProcessMessage</b>, see the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/sending-messages-to-windows-installer-using-msiprocessmessage">Sending Messages to Windows Installer Using MsiProcessMessage</a>.
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Integer} eMessageType The <i>eMessage</i> parameter must be a value specifying one of the following message types. To display a message box with push buttons or icons, use OR-operators to add INSTALLMESSAGE_ERROR, INSTALLMESSAGE_WARNING, or INSTALLMESSAGE_USER to the standard message box styles used by 
     * the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-messagebox">MessageBox</a> and 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-messageboxexa">MessageBoxEx</a> functions. For more information, see the Remarks below. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_FATALEXIT"></a><a id="installmessage_fatalexit"></a><dl>
     * <dt><b>INSTALLMESSAGE_FATALEXIT</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Premature termination, possibly fatal out of memory.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_ERROR"></a><a id="installmessage_error"></a><dl>
     * <dt><b>INSTALLMESSAGE_ERROR</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Formatted error message,<div> </div>[1] is message number in 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/error-table">Error table</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_WARNING"></a><a id="installmessage_warning"></a><dl>
     * <dt><b>INSTALLMESSAGE_WARNING</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Formatted warning message,<div> </div>[1] is message number in Error table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_USER"></a><a id="installmessage_user"></a><dl>
     * <dt><b>INSTALLMESSAGE_USER</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * User request message,<div> </div>[1] is message number in Error table.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_INFO"></a><a id="installmessage_info"></a><dl>
     * <dt><b>INSTALLMESSAGE_INFO</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Informative message for log,<div> </div> not to be displayed.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_FILESINUSE"></a><a id="installmessage_filesinuse"></a><dl>
     * <dt><b>INSTALLMESSAGE_FILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * List of files currently in use that must be closed before being replaced. 
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_RESOLVESOURCE"></a><a id="installmessage_resolvesource"></a><dl>
     * <dt><b>INSTALLMESSAGE_RESOLVESOURCE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Request to determine a valid source location.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_RMFILESINUSE"></a><a id="installmessage_rmfilesinuse"></a><dl>
     * <dt><b>INSTALLMESSAGE_RMFILESINUSE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * List of files currently in use that must be closed before being replaced. Available beginning with Windows Installer version 4.0. For more information about this message see <a href="https://docs.microsoft.com/windows/desktop/Msi/using-restart-manager-with-an-external-ui-">Using Restart Manager with an External UI</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_OUTOFDISKSPACE"></a><a id="installmessage_outofdiskspace"></a><dl>
     * <dt><b>INSTALLMESSAGE_OUTOFDISKSPACE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Insufficient disk space message.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_ACTIONSTART"></a><a id="installmessage_actionstart"></a><dl>
     * <dt><b>INSTALLMESSAGE_ACTIONSTART</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Progress: start of action,<div> </div>[1] action name,<div> </div>[2] description,<div> </div>[3] template for ACTIONDATA messages.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_ACTIONDATA"></a><a id="installmessage_actiondata"></a><dl>
     * <dt><b>INSTALLMESSAGE_ACTIONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Action data. Record fields correspond to the template of ACTIONSTART message.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_PROGRESS"></a><a id="installmessage_progress"></a><dl>
     * <dt><b>INSTALLMESSAGE_PROGRESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Progress bar information. See the description of record fields below.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLMESSAGE_COMMONDATA"></a><a id="installmessage_commondata"></a><dl>
     * <dt><b>INSTALLMESSAGE_COMMONDATA</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * To enable the Cancel button set [1] to 2 and [2] to 1. 
     * 
     * 
     * 
     * 
     * To disable the Cancel button set [1] to 2 and [2] to 0
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} hRecord Handle to a record containing message format and data.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiprocessmessage
     * @since windows8.0
     */
    static MsiProcessMessage(hInstall, eMessageType, hRecord) {
        DllCall("msi.dll\MsiProcessMessage", "uint", hInstall, "int", eMessageType, "uint", hRecord)
    }

    /**
     * The MsiEvaluateCondition function evaluates a conditional expression containing property names and values. (ANSI)
     * @remarks
     * The following table shows the feature and component state values used by the 
     * <b>MsiEvaluateCondition</b> function. These states are not set until 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msisetinstalllevel">MsiSetInstallLevel</a> is called, either directly or by the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. Therefore, state checking is generally only useful for conditional expressions in an action sequence table.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td>INSTALLSTATE_ABSENT</td>
     * <td>Feature or component not present.</td>
     * </tr>
     * <tr>
     * <td>INSTALLSTATE_LOCAL </td>
     * <td>Feature or component on local computer.</td>
     * </tr>
     * <tr>
     * <td>INSTALLSTATE_SOURCE</td>
     * <td>Feature or component run from source.</td>
     * </tr>
     * <tr>
     * <td>(null value)</td>
     * <td>No action to be taken on feature or component.</td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * 
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiEvaluateCondition as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szCondition Specifies the conditional expression. This parameter must not be <b>NULL</b>. For the syntax of conditional expressions see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/conditional-statement-syntax">Conditional Statement Syntax</a>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msievaluateconditiona
     * @since windows8.0
     */
    static MsiEvaluateConditionA(hInstall, szCondition) {
        DllCall("msi.dll\MsiEvaluateConditionA", "uint", hInstall, "ptr", szCondition)
    }

    /**
     * The MsiEvaluateCondition function evaluates a conditional expression containing property names and values. (Unicode)
     * @remarks
     * The following table shows the feature and component state values used by the 
     * <b>MsiEvaluateCondition</b> function. These states are not set until 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msisetinstalllevel">MsiSetInstallLevel</a> is called, either directly or by the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. Therefore, state checking is generally only useful for conditional expressions in an action sequence table.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td>INSTALLSTATE_ABSENT</td>
     * <td>Feature or component not present.</td>
     * </tr>
     * <tr>
     * <td>INSTALLSTATE_LOCAL </td>
     * <td>Feature or component on local computer.</td>
     * </tr>
     * <tr>
     * <td>INSTALLSTATE_SOURCE</td>
     * <td>Feature or component run from source.</td>
     * </tr>
     * <tr>
     * <td>(null value)</td>
     * <td>No action to be taken on feature or component.</td>
     * </tr>
     * </table>
     *  
     * 
     * 
     * <div> </div>
     * 
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiEvaluateCondition as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szCondition Specifies the conditional expression. This parameter must not be <b>NULL</b>. For the syntax of conditional expressions see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/conditional-statement-syntax">Conditional Statement Syntax</a>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msievaluateconditionw
     * @since windows8.0
     */
    static MsiEvaluateConditionW(hInstall, szCondition) {
        DllCall("msi.dll\MsiEvaluateConditionW", "uint", hInstall, "ptr", szCondition)
    }

    /**
     * The MsiGetFeatureState function gets the requested state of a feature. (ANSI)
     * @remarks
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szFeature Specifies the feature name within the product.
     * @param {Pointer<Int32>} piInstalled 
     * @param {Pointer<Int32>} piAction Receives the action taken during the installation session. This parameter must not be null. For return values, see <i>piInstalled</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetfeaturestatea
     * @since windows8.0
     */
    static MsiGetFeatureStateA(hInstall, szFeature, piInstalled, piAction) {
        DllCall("msi.dll\MsiGetFeatureStateA", "uint", hInstall, "ptr", szFeature, "ptr", piInstalled, "ptr", piAction)
    }

    /**
     * The MsiGetFeatureState function gets the requested state of a feature. (Unicode)
     * @remarks
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szFeature Specifies the feature name within the product.
     * @param {Pointer<Int32>} piInstalled 
     * @param {Pointer<Int32>} piAction Receives the action taken during the installation session. This parameter must not be null. For return values, see <i>piInstalled</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetfeaturestatew
     * @since windows8.0
     */
    static MsiGetFeatureStateW(hInstall, szFeature, piInstalled, piAction) {
        DllCall("msi.dll\MsiGetFeatureStateW", "uint", hInstall, "ptr", szFeature, "ptr", piInstalled, "ptr", piAction)
    }

    /**
     * The MsiSetFeatureState function sets a feature to a specified state. (ANSI)
     * @remarks
     * The 
     * <b>MsiSetFeatureState</b> function requests a change in the select state of a feature in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature</a> table and its children. In turn, the action state of all the components linked to the changed feature records are also updated appropriately, based on the new feature select state.
     * 
     * The 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msisetinstalllevel">MsiSetInstallLevel</a> function must be called before calling 
     * <b>MsiSetFeatureState</b>.
     * 
     * When <b>MsiSetFeatureState</b> is called, the installer attempts to set the action state of each component tied to the specified feature to the specified state. However, there are common situations when the request cannot be fully implemented. For example, if a feature is tied to two components, component A and component B, through the <a href="https://docs.microsoft.com/windows/desktop/Msi/featurecomponents-table">FeatureComponents</a> table, and component A has the <b>msidbComponentAttributesLocalOnly</b> attribute and component B has the <b>msidbComponentAttributesSourceOnly</b> attribute. In this case, if <b>MsiSetFeatureState</b> is called with a requested state of either INSTALLSTATE_LOCAL or INSTALLSTATE_SOURCE, the request cannot be fully implemented for both components. In this case, both components are turned ON, with component A set to Local and component B set to Source.
     * 
     * If more than one feature is linked to a single component (a common scenario), the final action state of that component is determined as follows:
     * 
     * <ul>
     * <li>If at least one feature requires the component to be installed locally, the feature is installed with a state of local.</li>
     * <li>If at least one feature requires the component to be run from the source, the feature is installed with a state of source.</li>
     * <li>If at least one feature requires the removal of the component, the action state is absent.</li>
     * </ul>
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szFeature Specifies the name of the feature.
     * @param {Integer} iState 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisetfeaturestatea
     * @since windows8.0
     */
    static MsiSetFeatureStateA(hInstall, szFeature, iState) {
        DllCall("msi.dll\MsiSetFeatureStateA", "uint", hInstall, "ptr", szFeature, "int", iState)
    }

    /**
     * The MsiSetFeatureState function sets a feature to a specified state. (Unicode)
     * @remarks
     * The 
     * <b>MsiSetFeatureState</b> function requests a change in the select state of a feature in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature</a> table and its children. In turn, the action state of all the components linked to the changed feature records are also updated appropriately, based on the new feature select state.
     * 
     * The 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msisetinstalllevel">MsiSetInstallLevel</a> function must be called before calling 
     * <b>MsiSetFeatureState</b>.
     * 
     * When <b>MsiSetFeatureState</b> is called, the installer attempts to set the action state of each component tied to the specified feature to the specified state. However, there are common situations when the request cannot be fully implemented. For example, if a feature is tied to two components, component A and component B, through the <a href="https://docs.microsoft.com/windows/desktop/Msi/featurecomponents-table">FeatureComponents</a> table, and component A has the <b>msidbComponentAttributesLocalOnly</b> attribute and component B has the <b>msidbComponentAttributesSourceOnly</b> attribute. In this case, if <b>MsiSetFeatureState</b> is called with a requested state of either INSTALLSTATE_LOCAL or INSTALLSTATE_SOURCE, the request cannot be fully implemented for both components. In this case, both components are turned ON, with component A set to Local and component B set to Source.
     * 
     * If more than one feature is linked to a single component (a common scenario), the final action state of that component is determined as follows:
     * 
     * <ul>
     * <li>If at least one feature requires the component to be installed locally, the feature is installed with a state of local.</li>
     * <li>If at least one feature requires the component to be run from the source, the feature is installed with a state of source.</li>
     * <li>If at least one feature requires the removal of the component, the action state is absent.</li>
     * </ul>
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szFeature Specifies the name of the feature.
     * @param {Integer} iState 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisetfeaturestatew
     * @since windows8.0
     */
    static MsiSetFeatureStateW(hInstall, szFeature, iState) {
        DllCall("msi.dll\MsiSetFeatureStateW", "uint", hInstall, "ptr", szFeature, "int", iState)
    }

    /**
     * The MsiSetFeatureAttributes function can modify the default attributes of a feature at runtime. Note that the default attributes of features are authored in the Attributes column of the Feature table. (ANSI)
     * @remarks
     * <b>MsiSetFeatureAttributes</b> must be called after 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize action</a> and before 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The function returns ERROR_FUNCTION_FAILED if called at any other time.
     * 
     * The INSTALLFEATUREATTRIBUTE_FAVORLOCAL, INSTALLFEATUREATTRIBUTE_FAVORSOURCE, and INSTALLFEATUREATTRIBUTE_FOLLOWPARENT flags are mutually exclusive. Only one of these bits can be set for any feature. If more than one of these flags is set, the behavior of that feature is undefined.
     * 
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSetFeatureAttributes as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szFeature Specifies the feature name within the product.
     * @param {Integer} dwAttributes Feature attributes specified at run time as a set of bit flags: 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Constant</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORLOCAL"></a><a id="installfeatureattribute_favorlocal"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORLOCAL</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorLocal at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORSOURCE"></a><a id="installfeatureattribute_favorsource"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORSOURCE</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorSource at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FOLLOWPARENT"></a><a id="installfeatureattribute_followparent"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFollowParent at run time. Note that this is not a valid attribute to be set for top-level features. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORADVERTISE"></a><a id="installfeatureattribute_favoradvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE</b></dt>
     * <dt>8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE"></a><a id="installfeatureattribute_disallowadvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE</b></dt>
     * <dt>16</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesDisallowAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE"></a><a id="installfeatureattribute_nounsupportedadvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE</b></dt>
     * <dt>32</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesNoUnsupportedAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisetfeatureattributesa
     * @since windows8.0
     */
    static MsiSetFeatureAttributesA(hInstall, szFeature, dwAttributes) {
        DllCall("msi.dll\MsiSetFeatureAttributesA", "uint", hInstall, "ptr", szFeature, "uint", dwAttributes)
    }

    /**
     * The MsiSetFeatureAttributes function can modify the default attributes of a feature at runtime. Note that the default attributes of features are authored in the Attributes column of the Feature table. (Unicode)
     * @remarks
     * <b>MsiSetFeatureAttributes</b> must be called after 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize action</a> and before 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The function returns ERROR_FUNCTION_FAILED if called at any other time.
     * 
     * The INSTALLFEATUREATTRIBUTE_FAVORLOCAL, INSTALLFEATUREATTRIBUTE_FAVORSOURCE, and INSTALLFEATUREATTRIBUTE_FOLLOWPARENT flags are mutually exclusive. Only one of these bits can be set for any feature. If more than one of these flags is set, the behavior of that feature is undefined.
     * 
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSetFeatureAttributes as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szFeature Specifies the feature name within the product.
     * @param {Integer} dwAttributes Feature attributes specified at run time as a set of bit flags: 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Constant</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORLOCAL"></a><a id="installfeatureattribute_favorlocal"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORLOCAL</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorLocal at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORSOURCE"></a><a id="installfeatureattribute_favorsource"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORSOURCE</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorSource at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FOLLOWPARENT"></a><a id="installfeatureattribute_followparent"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFollowParent at run time. Note that this is not a valid attribute to be set for top-level features. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_FAVORADVERTISE"></a><a id="installfeatureattribute_favoradvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE</b></dt>
     * <dt>8</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesFavorAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE"></a><a id="installfeatureattribute_disallowadvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE</b></dt>
     * <dt>16</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesDisallowAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE"></a><a id="installfeatureattribute_nounsupportedadvertise"></a><dl>
     * <dt><b>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE</b></dt>
     * <dt>32</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Modifies default feature attributes to msidbFeatureAttributesNoUnsupportedAdvertise at run time. See Attributes column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a> for a description.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisetfeatureattributesw
     * @since windows8.0
     */
    static MsiSetFeatureAttributesW(hInstall, szFeature, dwAttributes) {
        DllCall("msi.dll\MsiSetFeatureAttributesW", "uint", hInstall, "ptr", szFeature, "uint", dwAttributes)
    }

    /**
     * The MsiGetComponentState function obtains the state of a component. (ANSI)
     * @remarks
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szComponent A null-terminated string that specifies the component name within the product.
     * @param {Pointer<Int32>} piInstalled 
     * @param {Pointer<Int32>} piAction Receives the action taken during the installation. This parameter must not be null. For return values, see <i>piInstalled</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetcomponentstatea
     * @since windows8.0
     */
    static MsiGetComponentStateA(hInstall, szComponent, piInstalled, piAction) {
        DllCall("msi.dll\MsiGetComponentStateA", "uint", hInstall, "ptr", szComponent, "ptr", piInstalled, "ptr", piAction)
    }

    /**
     * The MsiGetComponentState function obtains the state of a component. (Unicode)
     * @remarks
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szComponent A null-terminated string that specifies the component name within the product.
     * @param {Pointer<Int32>} piInstalled 
     * @param {Pointer<Int32>} piAction Receives the action taken during the installation. This parameter must not be null. For return values, see <i>piInstalled</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetcomponentstatew
     * @since windows8.0
     */
    static MsiGetComponentStateW(hInstall, szComponent, piInstalled, piAction) {
        DllCall("msi.dll\MsiGetComponentStateW", "uint", hInstall, "ptr", szComponent, "ptr", piInstalled, "ptr", piAction)
    }

    /**
     * The MsiSetComponentState function sets a component to the requested state. (ANSI)
     * @remarks
     * The 
     * <b>MsiSetComponentState</b> function requests a change in the Action state of a record in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component table</a>.
     * 
     * For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szComponent Specifies the name of the component.
     * @param {Integer} iState 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisetcomponentstatea
     * @since windows8.0
     */
    static MsiSetComponentStateA(hInstall, szComponent, iState) {
        DllCall("msi.dll\MsiSetComponentStateA", "uint", hInstall, "ptr", szComponent, "int", iState)
    }

    /**
     * The MsiSetComponentState function sets a component to the requested state. (Unicode)
     * @remarks
     * The 
     * <b>MsiSetComponentState</b> function requests a change in the Action state of a record in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component table</a>.
     * 
     * For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szComponent Specifies the name of the component.
     * @param {Integer} iState 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisetcomponentstatew
     * @since windows8.0
     */
    static MsiSetComponentStateW(hInstall, szComponent, iState) {
        DllCall("msi.dll\MsiSetComponentStateW", "uint", hInstall, "ptr", szComponent, "int", iState)
    }

    /**
     * The MsiGetFeatureCost function returns the disk space required by a feature and its selected children and parent features. (ANSI)
     * @remarks
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * With the 
     * <b>MsiGetFeatureCost</b> function, the MSICOSTTREE_SELFONLY value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature only. This returned value does not include the children or the parent features of the specified feature. This total cost is made up of the disk costs attributed to every component linked to the feature.
     * 
     * The MSICOSTTREE_CHILDREN value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its children. For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.
     * 
     * The MSICOSTTREE_PARENTS value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its parent features (up to the root of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a>). For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.
     * 
     * <b>MsiGetFeatureCost</b> is dependent upon several other functions to be successful. The following example demonstrates the order in which these functions must be called:
     * 
     * 
     * ``` syntax
     * MSIHANDLE   hInstall;      //product handle, must be closed
     * int         iCost;         //cost returned by MsiGetFeatureCost
     * 
     * MsiOpenPackage("Path to package....",&amp;hInstall);   //"Path to package...." should be replaced with the full path to the package to be opened
     * MsiDoAction(hInstall,"CostInitialize");         //
     * MsiDoAction(hInstall,"FileCost");
     * MsiDoAction(hInstall,"CostFinalize");
     * MsiDoAction(hInstall,"InstallValidate");
     * MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;iCost);
     * MsiCloseHandle(hInstall);                        //close the open product handle
     * ```
     * 
     * The process to query the cost of features scheduled to be removed is slightly different:
     * 
     * 
     * ``` syntax
     * MSIHANDLE   hInstall;      //product handle, must be closed
     * int         iCost;         //cost returned by MsiGetFeatureCost
     * 
     * MsiOpenPackage("Path to package....",&amp;hInstall);              //"Path to package...." should be replaced with the full path to the package to be opened
     * MsiDoAction(hInstall,"CostInitialize");                          //
     * MsiDoAction(hInstall,"FileCost");
     * MsiDoAction(hInstall,"CostFinalize");
     * MsiSetFeatureState(hInstall,"FeatureName",INSTALLSTATE_ABSENT);  //set the feature's state to "not installed"
     * MsiDoAction(hInstall,"InstallValidate");
     * MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;iCost);
     * MsiCloseHandle(hInstall);                                        //close the open product handle
     * ```
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetFeatureCost as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szFeature Specifies the name of the feature.
     * @param {Integer} iCostTree 
     * @param {Integer} iState 
     * @param {Pointer<Int32>} piCost Receives the disk space requirements in units of 512 bytes. This parameter must not be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetfeaturecosta
     * @since windows8.0
     */
    static MsiGetFeatureCostA(hInstall, szFeature, iCostTree, iState, piCost) {
        DllCall("msi.dll\MsiGetFeatureCostA", "uint", hInstall, "ptr", szFeature, "int", iCostTree, "int", iState, "ptr", piCost)
    }

    /**
     * The MsiGetFeatureCost function returns the disk space required by a feature and its selected children and parent features. (Unicode)
     * @remarks
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * With the 
     * <b>MsiGetFeatureCost</b> function, the MSICOSTTREE_SELFONLY value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature only. This returned value does not include the children or the parent features of the specified feature. This total cost is made up of the disk costs attributed to every component linked to the feature.
     * 
     * The MSICOSTTREE_CHILDREN value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its children. For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.
     * 
     * The MSICOSTTREE_PARENTS value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its parent features (up to the root of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a>). For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.
     * 
     * <b>MsiGetFeatureCost</b> is dependent upon several other functions to be successful. The following example demonstrates the order in which these functions must be called:
     * 
     * 
     * ``` syntax
     * MSIHANDLE   hInstall;      //product handle, must be closed
     * int         iCost;         //cost returned by MsiGetFeatureCost
     * 
     * MsiOpenPackage("Path to package....",&amp;hInstall);   //"Path to package...." should be replaced with the full path to the package to be opened
     * MsiDoAction(hInstall,"CostInitialize");         //
     * MsiDoAction(hInstall,"FileCost");
     * MsiDoAction(hInstall,"CostFinalize");
     * MsiDoAction(hInstall,"InstallValidate");
     * MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;iCost);
     * MsiCloseHandle(hInstall);                        //close the open product handle
     * ```
     * 
     * The process to query the cost of features scheduled to be removed is slightly different:
     * 
     * 
     * ``` syntax
     * MSIHANDLE   hInstall;      //product handle, must be closed
     * int         iCost;         //cost returned by MsiGetFeatureCost
     * 
     * MsiOpenPackage("Path to package....",&amp;hInstall);              //"Path to package...." should be replaced with the full path to the package to be opened
     * MsiDoAction(hInstall,"CostInitialize");                          //
     * MsiDoAction(hInstall,"FileCost");
     * MsiDoAction(hInstall,"CostFinalize");
     * MsiSetFeatureState(hInstall,"FeatureName",INSTALLSTATE_ABSENT);  //set the feature's state to "not installed"
     * MsiDoAction(hInstall,"InstallValidate");
     * MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;iCost);
     * MsiCloseHandle(hInstall);                                        //close the open product handle
     * ```
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetFeatureCost as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szFeature Specifies the name of the feature.
     * @param {Integer} iCostTree 
     * @param {Integer} iState 
     * @param {Pointer<Int32>} piCost Receives the disk space requirements in units of 512 bytes. This parameter must not be null.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetfeaturecostw
     * @since windows8.0
     */
    static MsiGetFeatureCostW(hInstall, szFeature, iCostTree, iState, piCost) {
        DllCall("msi.dll\MsiGetFeatureCostW", "uint", hInstall, "ptr", szFeature, "int", iCostTree, "int", iState, "ptr", piCost)
    }

    /**
     * The MsiEnumComponentCosts function enumerates the disk-space per drive required to install a component. (ANSI)
     * @remarks
     * The recommended method for enumerating the disk-space costs per drive is as follows. Start with the dwIndex set to 0 and increment it by one after each call. Continue the enumeration as long as 
     * <b>MsiEnumComponentCosts</b> returns ERROR_SUCCESS.
     * 
     * <b>MsiEnumComponentCosts</b> may be called from custom actions.
     * 
     * The total final disk cost for the installation is the sum of the costs of all components plus the cost of the Windows Installer (<i>szComponent</i> = null).
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiEnumComponentCosts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szComponent A null-terminated string specifying the component's name as it is listed in the Component column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component table</a>. This parameter can be null. If <i>szComponent</i> is null or an empty string, 
     * <b>MsiEnumComponentCosts</b> enumerates the total disk-space per drive used during the installation. In this case, <i>iState</i> is ignored. The costs of the installer include those costs for caching the database in the secure folder as well as the cost to create the installation script. Note that the total disk-space used during the installation may be larger than the space used after the component is installed.
     * @param {Integer} dwIndex 0-based index for drives. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponentCosts</b> function and then incremented for subsequent calls.
     * @param {Integer} iState Requested component state to be enumerated. If <i>szComponent</i> is passed as Null or an empty string, the installer ignores the <i>iState</i> parameter.
     * @param {Pointer<PSTR>} szDriveBuf Buffer that holds the drive name including the null terminator. This is an empty string in case of an error.
     * @param {Pointer<UInt32>} pcchDriveBuf Pointer to a variable that specifies the size, in TCHARs, of the buffer pointed to by the <i>lpDriveBuf</i> parameter. This size should include the terminating null character. If the buffer provided is too small, the variable pointed to by <i>pcchDriveBuf</i> contains the count of characters not including the null terminator.
     * @param {Pointer<Int32>} piCost Cost of the component per drive expressed in multiples of 512 bytes. This value is 0 if an error has occurred. The value returned in <i>piCost</i> is final disk-space used by the component after installation. If <i>szComponent</i> is passed as Null or an empty string, the installer sets the value at <i>piCost</i> to 0.
     * @param {Pointer<Int32>} piTempCost The component cost per drive for the duration of the installation, or 0 if an error occurred. The value in *<i>piTempCost</i> represents the temporary space requirements for the duration of the installation. This temporary space requirement is space needed only for the duration of the installation. This does not affect the final disk space requirement.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msienumcomponentcostsa
     * @since windows8.0
     */
    static MsiEnumComponentCostsA(hInstall, szComponent, dwIndex, iState, szDriveBuf, pcchDriveBuf, piCost, piTempCost) {
        DllCall("msi.dll\MsiEnumComponentCostsA", "uint", hInstall, "ptr", szComponent, "uint", dwIndex, "int", iState, "ptr", szDriveBuf, "ptr", pcchDriveBuf, "ptr", piCost, "ptr", piTempCost)
    }

    /**
     * The MsiEnumComponentCosts function enumerates the disk-space per drive required to install a component. (Unicode)
     * @remarks
     * The recommended method for enumerating the disk-space costs per drive is as follows. Start with the dwIndex set to 0 and increment it by one after each call. Continue the enumeration as long as 
     * <b>MsiEnumComponentCosts</b> returns ERROR_SUCCESS.
     * 
     * <b>MsiEnumComponentCosts</b> may be called from custom actions.
     * 
     * The total final disk cost for the installation is the sum of the costs of all components plus the cost of the Windows Installer (<i>szComponent</i> = null).
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiEnumComponentCosts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szComponent A null-terminated string specifying the component's name as it is listed in the Component column of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component table</a>. This parameter can be null. If <i>szComponent</i> is null or an empty string, 
     * <b>MsiEnumComponentCosts</b> enumerates the total disk-space per drive used during the installation. In this case, <i>iState</i> is ignored. The costs of the installer include those costs for caching the database in the secure folder as well as the cost to create the installation script. Note that the total disk-space used during the installation may be larger than the space used after the component is installed.
     * @param {Integer} dwIndex 0-based index for drives. This parameter should be zero for the first call to the 
     * <b>MsiEnumComponentCosts</b> function and then incremented for subsequent calls.
     * @param {Integer} iState Requested component state to be enumerated. If <i>szComponent</i> is passed as Null or an empty string, the installer ignores the <i>iState</i> parameter.
     * @param {Pointer<PWSTR>} szDriveBuf Buffer that holds the drive name including the null terminator. This is an empty string in case of an error.
     * @param {Pointer<UInt32>} pcchDriveBuf Pointer to a variable that specifies the size, in TCHARs, of the buffer pointed to by the <i>lpDriveBuf</i> parameter. This size should include the terminating null character. If the buffer provided is too small, the variable pointed to by <i>pcchDriveBuf</i> contains the count of characters not including the null terminator.
     * @param {Pointer<Int32>} piCost Cost of the component per drive expressed in multiples of 512 bytes. This value is 0 if an error has occurred. The value returned in <i>piCost</i> is final disk-space used by the component after installation. If <i>szComponent</i> is passed as Null or an empty string, the installer sets the value at <i>piCost</i> to 0.
     * @param {Pointer<Int32>} piTempCost The component cost per drive for the duration of the installation, or 0 if an error occurred. The value in *<i>piTempCost</i> represents the temporary space requirements for the duration of the installation. This temporary space requirement is space needed only for the duration of the installation. This does not affect the final disk space requirement.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msienumcomponentcostsw
     * @since windows8.0
     */
    static MsiEnumComponentCostsW(hInstall, szComponent, dwIndex, iState, szDriveBuf, pcchDriveBuf, piCost, piTempCost) {
        DllCall("msi.dll\MsiEnumComponentCostsW", "uint", hInstall, "ptr", szComponent, "uint", dwIndex, "int", iState, "ptr", szDriveBuf, "ptr", pcchDriveBuf, "ptr", piCost, "ptr", piTempCost)
    }

    /**
     * The MsiSetInstallLevel function sets the installation level for a full product installation.
     * @remarks
     * The 
     * <b>MsiSetInstallLevel</b> function sets the following:
     * 
     * <ul>
     * <li>The installation level for the current installation to a specified value.</li>
     * <li>The Select and Installed states for all features in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/feature-table">Feature table</a>.</li>
     * <li>The Action state of each component in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/component-table">Component table</a>, based on the new level.</li>
     * </ul>
     * For any installation, there is a defined install level, which is an integral value from 1 to 32,767. The initial value is determined by the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/installlevel">INSTALLLEVEL</a> property, which is set in the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/property-table">Property Table</a>.
     * 
     * If 0 (zero) or a negative number is passed in the <i>iInstallLevel</i> parameter, the current installation level does not change, but all features are still updated based on the current installation level. For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * @param {Integer} hInstall Handle to the installation that is provided to a DLL custom action or obtained by using <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Integer} iInstallLevel The installation level.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisetinstalllevel
     * @since windows8.0
     */
    static MsiSetInstallLevel(hInstall, iInstallLevel) {
        DllCall("msi.dll\MsiSetInstallLevel", "uint", hInstall, "int", iInstallLevel)
    }

    /**
     * The MsiGetFeatureValidStates function returns a valid installation state. (ANSI)
     * @remarks
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * The <b>MsiGetFeatureValidStates</b> function determines state validity by querying all components that are linked to the specified feature without taking into account the current installed state of any component.  
     * 
     * The possible valid states for a feature are determined as follows:
     * 
     * <ul>
     * <li>If the feature does not contain components, both INSTALLSTATE_LOCAL and INSTALLSTATE_SOURCE are valid states for the feature.</li>
     * <li>If at least one component of the feature has an attribute of msidbComponentAttributesLocalOnly or msidbComponentAttributesOptional, INSTALLSTATE_LOCAL is a valid state for the feature.</li>
     * <li>If at least one component of the feature has an attribute of msidbComponentAttributesSourceOnly or msidbComponentAttributesOptional, INSTALLSTATE_SOURCE is a valid state for the feature.</li>
     * <li>If a file of a component that belongs to the feature is patched or from a compressed source, then INSTALLSTATE_SOURCE is not included as a valid state for the feature.</li>
     * <li>INSTALLSTATE_ADVERTISE is not a valid state if the feature disallows advertisement (msidbFeatureAttributesDisallowAdvertise) or the feature requires platform support for advertisement (msidbFeatureAttributesNoUnsupportedAdvertise) and the platform does not support it.</li>
     * <li>INSTALLSTATE_ABSENT is a valid state for the feature if its attributes do not include msidbFeatureAttributesUIDisallowAbsent.</li>
     * <li>Valid states for child features marked to follow the parent feature (msidbFeatureAttributesFollowParent) are based upon the parent feature's action or installed state.</li>
     * </ul>
     * After calling 
     * <b>MsiGetFeatureValidStates</b> a conditional statement may then be used to test the valid installation states of a feature. For example, the following call to 
     * <b>MsiGetFeatureValidStates</b> gets the installation state of Feature1.
     * 
     * 
     * ``` syntax
     * MsiGetFeatureValidStates(hProduct, "Feature1", &amp;dwValidStates);
     * ```
     * 
     * If Feature1 has attributes of value 0 (favor local), and Feature1 has one component with attributes of value 0 (local only), the value of dwValidStates after the call is 14. This indicates that INSTALLSTATE_LOCAL, INSTALLSTATE_ABSENT,and INSTALLSTATE_ADVERTISED are valid states for Feature1. The following conditional statement evaluates to True if local is a valid state for this feature.
     * 
     * ( ( dwValidStates &amp; ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) ) == ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) )
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetFeatureValidStates as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szFeature Specifies the feature name.
     * @param {Pointer<UInt32>} lpInstallStates 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetfeaturevalidstatesa
     * @since windows8.0
     */
    static MsiGetFeatureValidStatesA(hInstall, szFeature, lpInstallStates) {
        DllCall("msi.dll\MsiGetFeatureValidStatesA", "uint", hInstall, "ptr", szFeature, "ptr", lpInstallStates)
    }

    /**
     * The MsiGetFeatureValidStates function returns a valid installation state. (Unicode)
     * @remarks
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * The <b>MsiGetFeatureValidStates</b> function determines state validity by querying all components that are linked to the specified feature without taking into account the current installed state of any component.  
     * 
     * The possible valid states for a feature are determined as follows:
     * 
     * <ul>
     * <li>If the feature does not contain components, both INSTALLSTATE_LOCAL and INSTALLSTATE_SOURCE are valid states for the feature.</li>
     * <li>If at least one component of the feature has an attribute of msidbComponentAttributesLocalOnly or msidbComponentAttributesOptional, INSTALLSTATE_LOCAL is a valid state for the feature.</li>
     * <li>If at least one component of the feature has an attribute of msidbComponentAttributesSourceOnly or msidbComponentAttributesOptional, INSTALLSTATE_SOURCE is a valid state for the feature.</li>
     * <li>If a file of a component that belongs to the feature is patched or from a compressed source, then INSTALLSTATE_SOURCE is not included as a valid state for the feature.</li>
     * <li>INSTALLSTATE_ADVERTISE is not a valid state if the feature disallows advertisement (msidbFeatureAttributesDisallowAdvertise) or the feature requires platform support for advertisement (msidbFeatureAttributesNoUnsupportedAdvertise) and the platform does not support it.</li>
     * <li>INSTALLSTATE_ABSENT is a valid state for the feature if its attributes do not include msidbFeatureAttributesUIDisallowAbsent.</li>
     * <li>Valid states for child features marked to follow the parent feature (msidbFeatureAttributesFollowParent) are based upon the parent feature's action or installed state.</li>
     * </ul>
     * After calling 
     * <b>MsiGetFeatureValidStates</b> a conditional statement may then be used to test the valid installation states of a feature. For example, the following call to 
     * <b>MsiGetFeatureValidStates</b> gets the installation state of Feature1.
     * 
     * 
     * ``` syntax
     * MsiGetFeatureValidStates(hProduct, "Feature1", &amp;dwValidStates);
     * ```
     * 
     * If Feature1 has attributes of value 0 (favor local), and Feature1 has one component with attributes of value 0 (local only), the value of dwValidStates after the call is 14. This indicates that INSTALLSTATE_LOCAL, INSTALLSTATE_ABSENT,and INSTALLSTATE_ADVERTISED are valid states for Feature1. The following conditional statement evaluates to True if local is a valid state for this feature.
     * 
     * ( ( dwValidStates &amp; ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) ) == ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) )
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetFeatureValidStates as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szFeature Specifies the feature name.
     * @param {Pointer<UInt32>} lpInstallStates 
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetfeaturevalidstatesw
     * @since windows8.0
     */
    static MsiGetFeatureValidStatesW(hInstall, szFeature, lpInstallStates) {
        DllCall("msi.dll\MsiGetFeatureValidStatesW", "uint", hInstall, "ptr", szFeature, "ptr", lpInstallStates)
    }

    /**
     * The MsiGetSourcePath function returns the full source path for a folder in the Directory table. (ANSI)
     * @remarks
     * Before calling this function, the installer must first run the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize action</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/filecost-action">FileCost action</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.
     * 
     * If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetSourcePath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szFolder A null-terminated string that specifies a record of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.
     * @param {Pointer<PSTR>} szPathBuf Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szPathBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetsourcepatha
     * @since windows8.0
     */
    static MsiGetSourcePathA(hInstall, szFolder, szPathBuf, pcchPathBuf) {
        DllCall("msi.dll\MsiGetSourcePathA", "uint", hInstall, "ptr", szFolder, "ptr", szPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiGetSourcePath function returns the full source path for a folder in the Directory table. (Unicode)
     * @remarks
     * Before calling this function, the installer must first run the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize action</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/filecost-action">FileCost action</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.
     * 
     * If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetSourcePath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szFolder A null-terminated string that specifies a record of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.
     * @param {Pointer<PWSTR>} szPathBuf Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szPathBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetsourcepathw
     * @since windows8.0
     */
    static MsiGetSourcePathW(hInstall, szFolder, szPathBuf, pcchPathBuf) {
        DllCall("msi.dll\MsiGetSourcePathW", "uint", hInstall, "ptr", szFolder, "ptr", szPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiGetTargetPath function returns the full target path for a folder in the Directory table. (ANSI)
     * @remarks
     * If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * Before calling this function, the installer must first run the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize action</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/filecost-action">FileCost action</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.
     * 
     * <b>MsiGetTargetPath</b> returns the default path of the target directory authored in the package if the target's current location is unavailable for an installation. For example, if during a 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/maintenance-installation">Maintenance Installation</a> a target directory at a network location is unavailable, the installer resets the target directory paths back to their defaults. To get the actual path of the target directory in this case call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiprovidecomponenta">MsiProvideComponent</a> for a component that is known to have been previously installed into the searched for directory and set <i>dwInstallMode</i> to INSTALLMODE_NODETECTION.
     * 
     * For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szFolder A null-terminated string that specifies a record of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.
     * @param {Pointer<PSTR>} szPathBuf Pointer to the buffer that receives the null terminated full target path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szPathBuf</i> When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigettargetpatha
     * @since windows8.0
     */
    static MsiGetTargetPathA(hInstall, szFolder, szPathBuf, pcchPathBuf) {
        DllCall("msi.dll\MsiGetTargetPathA", "uint", hInstall, "ptr", szFolder, "ptr", szPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiGetTargetPath function returns the full target path for a folder in the Directory table. (Unicode)
     * @remarks
     * If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).
     * 
     * Before calling this function, the installer must first run the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costinitialize-action">CostInitialize action</a>, 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/filecost-action">FileCost action</a>, and 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.
     * 
     * <b>MsiGetTargetPath</b> returns the default path of the target directory authored in the package if the target's current location is unavailable for an installation. For example, if during a 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/maintenance-installation">Maintenance Installation</a> a target directory at a network location is unavailable, the installer resets the target directory paths back to their defaults. To get the actual path of the target directory in this case call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiprovidecomponenta">MsiProvideComponent</a> for a component that is known to have been previously installed into the searched for directory and set <i>dwInstallMode</i> to INSTALLMODE_NODETECTION.
     * 
     * For more information, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiGetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szFolder A null-terminated string that specifies a record of the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.
     * @param {Pointer<PWSTR>} szPathBuf Pointer to the buffer that receives the null terminated full target path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.
     * @param {Pointer<UInt32>} pcchPathBuf Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szPathBuf</i> When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigettargetpathw
     * @since windows8.0
     */
    static MsiGetTargetPathW(hInstall, szFolder, szPathBuf, pcchPathBuf) {
        DllCall("msi.dll\MsiGetTargetPathW", "uint", hInstall, "ptr", szFolder, "ptr", szPathBuf, "ptr", pcchPathBuf)
    }

    /**
     * The MsiSetTargetPath function sets the full target path for a folder in the Directory table. (ANSI)
     * @remarks
     * The 
     * <b>MsiSetTargetPath</b> function changes the path specification for the target directory named in the in-memory 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/directory-table">Directory table</a>. Also, the path specifications of all other path objects in the table that are either subordinate or equivalent to the changed path are updated to reflect the change. The properties for each affected path are also updated.
     * 
     * <b>MsiSetTargetPath</b> fails if the selected directory is read only.
     * 
     * If an error occurs in this function, all updated paths and properties revert to their previous values. Therefore, it is safe to treat errors returned by this function as nonfatal.
     * 
     * Do not attempt to configure the target path if the components using those paths are already installed for the current user or for a different user. Check the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/productstate">ProductState</a> property before calling 
     * <b>MsiSetTargetPath</b> to determine if the product containing this component is installed.
     * 
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PSTR>} szFolder Specifies the folder identifier. This is a primary key in the Directory table.
     * @param {Pointer<PSTR>} szFolderPath Specifies the full path for the folder, ending in a directory separator.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisettargetpatha
     * @since windows8.0
     */
    static MsiSetTargetPathA(hInstall, szFolder, szFolderPath) {
        DllCall("msi.dll\MsiSetTargetPathA", "uint", hInstall, "ptr", szFolder, "ptr", szFolderPath)
    }

    /**
     * The MsiSetTargetPath function sets the full target path for a folder in the Directory table. (Unicode)
     * @remarks
     * The 
     * <b>MsiSetTargetPath</b> function changes the path specification for the target directory named in the in-memory 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/directory-table">Directory table</a>. Also, the path specifications of all other path objects in the table that are either subordinate or equivalent to the changed path are updated to reflect the change. The properties for each affected path are also updated.
     * 
     * <b>MsiSetTargetPath</b> fails if the selected directory is read only.
     * 
     * If an error occurs in this function, all updated paths and properties revert to their previous values. Therefore, it is safe to treat errors returned by this function as nonfatal.
     * 
     * Do not attempt to configure the target path if the components using those paths are already installed for the current user or for a different user. Check the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/productstate">ProductState</a> property before calling 
     * <b>MsiSetTargetPath</b> to determine if the product containing this component is installed.
     * 
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * 
     * If the function fails, you can obtain extended error information by using <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetlasterrorrecord">MsiGetLastErrorRecord</a>.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiSetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @param {Pointer<PWSTR>} szFolder Specifies the folder identifier. This is a primary key in the Directory table.
     * @param {Pointer<PWSTR>} szFolderPath Specifies the full path for the folder, ending in a directory separator.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msisettargetpathw
     * @since windows8.0
     */
    static MsiSetTargetPathW(hInstall, szFolder, szFolderPath) {
        DllCall("msi.dll\MsiSetTargetPathW", "uint", hInstall, "ptr", szFolder, "ptr", szFolderPath)
    }

    /**
     * The MsiVerifyDiskSpace function checks to see if sufficient disk space is present for the current installation.
     * @remarks
     * See 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.
     * @param {Integer} hInstall Handle to the installation provided to a DLL custom action or obtained through <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackagea">MsiOpenPackage</a>, <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenpackageexa">MsiOpenPackageEx</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiopenproducta">MsiOpenProduct</a>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msiverifydiskspace
     * @since windows8.0
     */
    static MsiVerifyDiskSpace(hInstall) {
        DllCall("msi.dll\MsiVerifyDiskSpace", "uint", hInstall)
    }

    /**
     * The MsiEnableUIPreview function enables preview mode of the user interface to facilitate authoring of user-interface dialog boxes. This function returns a handle that should be closed using MsiCloseHandle.
     * @remarks
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * @param {Integer} hDatabase Handle to the database.
     * @param {Pointer<UInt32>} phPreview Pointer to a returned handle for user-interface preview capability.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msienableuipreview
     * @since windows8.0
     */
    static MsiEnableUIPreview(hDatabase, phPreview) {
        DllCall("msi.dll\MsiEnableUIPreview", "uint", hDatabase, "ptr", phPreview)
    }

    /**
     * The MsiPreviewDialog function displays a dialog box as modeless and inactive. (ANSI)
     * @remarks
     * Supplying a null name in the 
     * <b>MsiPreviewDialog</b> function removes any current dialog box.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiPreviewDialog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hPreview Handle to the preview.
     * @param {Pointer<PSTR>} szDialogName Specifies the name of the dialog box to preview.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msipreviewdialoga
     * @since windows8.0
     */
    static MsiPreviewDialogA(hPreview, szDialogName) {
        DllCall("msi.dll\MsiPreviewDialogA", "uint", hPreview, "ptr", szDialogName)
    }

    /**
     * The MsiPreviewDialog function displays a dialog box as modeless and inactive. (Unicode)
     * @remarks
     * Supplying a null name in the 
     * <b>MsiPreviewDialog</b> function removes any current dialog box.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiPreviewDialog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hPreview Handle to the preview.
     * @param {Pointer<PWSTR>} szDialogName Specifies the name of the dialog box to preview.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msipreviewdialogw
     * @since windows8.0
     */
    static MsiPreviewDialogW(hPreview, szDialogName) {
        DllCall("msi.dll\MsiPreviewDialogW", "uint", hPreview, "ptr", szDialogName)
    }

    /**
     * The MsiPreviewBillboard function displays a billboard with the host control in the displayed dialog box. (ANSI)
     * @remarks
     * Supplying a null billboard name in the 
     * <b>MsiPreviewBillboard</b> function removes any billboard displayed.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiPreviewBillboard as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hPreview Handle to the preview.
     * @param {Pointer<PSTR>} szControlName Specifies the name of the host control.
     * @param {Pointer<PSTR>} szBillboard Specifies the name of the billboard to display.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msipreviewbillboarda
     * @since windows8.0
     */
    static MsiPreviewBillboardA(hPreview, szControlName, szBillboard) {
        DllCall("msi.dll\MsiPreviewBillboardA", "uint", hPreview, "ptr", szControlName, "ptr", szBillboard)
    }

    /**
     * The MsiPreviewBillboard function displays a billboard with the host control in the displayed dialog box. (Unicode)
     * @remarks
     * Supplying a null billboard name in the 
     * <b>MsiPreviewBillboard</b> function removes any billboard displayed.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The msiquery.h header defines MsiPreviewBillboard as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} hPreview Handle to the preview.
     * @param {Pointer<PWSTR>} szControlName Specifies the name of the host control.
     * @param {Pointer<PWSTR>} szBillboard Specifies the name of the billboard to display.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msipreviewbillboardw
     * @since windows8.0
     */
    static MsiPreviewBillboardW(hPreview, szControlName, szBillboard) {
        DllCall("msi.dll\MsiPreviewBillboardW", "uint", hPreview, "ptr", szControlName, "ptr", szBillboard)
    }

    /**
     * The MsiGetLastErrorRecord function returns the error record that was last returned for the calling process. This function returns a handle that should be closed using MsiCloseHandle.
     * @remarks
     * With the 
     * <b>MsiGetLastErrorRecord</b> function, field 1 of the record contains the installer error code. Other fields contain data specific to the particular error. The error record is released internally after this function is run.
     * 
     * If the record is passed to 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiprocessmessage">MsiProcessMessage</a>, it is formatted by looking up the string in the current database. If there is no installation session but a product database is open, the format string may be obtained by a query on the 
     * <a href="https://docs.microsoft.com/windows/desktop/Msi/error-table">Error table</a> using the error code, followed by a call to 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiformatrecorda">MsiFormatRecord</a>. If the error code is known, the parameters may be individually interpreted.
     * 
     * The following functions set the per-process error record or reset it to null if no error occurred. <b>MsiGetLastErrorRecord</b> also clears the error record after returning it.
     * 
     * <ul>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabasecommit">MsiDatabaseCommit</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabaseopenviewa">MsiDatabaseOpenView</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabaseimporta">MsiDatabaseImport</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabaseexporta">MsiDatabaseExport</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabasemergea">MsiDatabaseMerge</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabasegeneratetransforma">MsiDatabaseGenerateTransform</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabaseapplytransforma">MsiDatabaseApplyTransform</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiviewexecute">MsiViewExecute</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiviewmodify">MsiViewModify</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msirecordsetstreama">MsiRecordSetStream</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetsummaryinformationa">MsiGetSummaryInformation</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetsourcepatha">MsiGetSourcePath</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigettargetpatha">MsiGetTargetPath</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msisettargetpatha">MsiSetTargetPath</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetcomponentstatea">MsiGetComponentState</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msisetcomponentstatea">MsiSetComponentState</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetfeaturestatea">MsiGetFeatureState</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msisetfeaturestatea">MsiSetFeatureState</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetfeaturecosta">MsiGetFeatureCost</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msigetfeaturevalidstatesa">MsiGetFeatureValidStates</a>
     * </li>
     * <li>
     * <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msisetinstalllevel">MsiSetInstallLevel</a>
     * </li>
     * </ul>
     * Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/msi/nf-msi-msiclosehandle">MsiCloseHandle</a>. For more information see <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com/windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.
     * 
     * The following sample uses a call to <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msidatabaseopenviewa">MsiDatabaseOpenView</a> to  show how to obtain extended error information from one of the Windows Installer functions that supports <b>MsiGetLastErrorRecord</b>.  The example, OpenViewOnDatabase,  attempts to open a view on a database                 handle. The <i>hDatabase</i> handle can be
     * obtained by a call to <a href="https://docs.microsoft.com/windows/desktop/api/msiquery/nf-msiquery-msiopendatabasea">MsiOpenDatabase</a>. If opening
     * the view fails, the function then tries to obtain extended
     * error information by using <b>MsiGetLastErrorRecord</b>.
     * 
     * 
     * 
     * ```cpp
     * @returns {Integer} A handle to the error record. If the last function was successful, 
     * <b>MsiGetLastErrorRecord</b> returns a null <b>MSIHANDLE</b>.
     * @see https://learn.microsoft.com/windows/win32/api/msiquery/nf-msiquery-msigetlasterrorrecord
     * @since windows8.0
     */
    static MsiGetLastErrorRecord() {
        result := DllCall("msi.dll\MsiGetLastErrorRecord", "uint")
        return result
    }

    /**
     * Retrieves the complete list of protected files.
     * @param {Pointer<HANDLE>} RpcHandle This parameter must be <b>NULL</b>.
     * @param {Pointer<PROTECTED_FILE_DATA>} ProtFileData The list of protected files. The format of this structure is as follows. 
     * 
     * 
     * 
     * 
     * 
     * ``` syntax
     * typedef struct _PROTECTED_FILE_DATA {
     *     WCHAR   FileName[MAX_PATH];
     *     DWORD   FileNumber;
     * } PROTECTED_FILE_DATA, *PPROTECTED_FILE_DATA;
     * ```
     * 
     * Before calling this function the first time, set the <b>FileNumber</b> member to zero.
     * @returns {Integer} If the function succeeds, the return value is nonzero.
     * 
     * If there are no more protected files to enumerate, the return value is zero and 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns ERROR_NO_MORE_FILES. If the function fails, <b>GetLastError</b> will return a different error code.
     * @see https://learn.microsoft.com/windows/win32/api/sfc/nf-sfc-sfcgetnextprotectedfile
     * @since windows5.1.2600
     */
    static SfcGetNextProtectedFile(RpcHandle, ProtFileData) {
        A_LastError := 0

        result := DllCall("sfc.dll\SfcGetNextProtectedFile", "ptr", RpcHandle, "ptr", ProtFileData, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * Determines whether the specified file is protected.
     * @param {Pointer<HANDLE>} RpcHandle This parameter must be <b>NULL</b>.
     * @param {Pointer<PWSTR>} ProtFileName The name of the file.
     * @returns {Integer} If the file is protected, the return value is a nonzero value.
     * 
     * If the file is not protected, the return value is zero.
     * @see https://learn.microsoft.com/windows/win32/api/sfc/nf-sfc-sfcisfileprotected
     * @since windows5.1.2600
     */
    static SfcIsFileProtected(RpcHandle, ProtFileName) {
        result := DllCall("sfc.dll\SfcIsFileProtected", "ptr", RpcHandle, "ptr", ProtFileName, "int")
        return result
    }

    /**
     * Determines whether the specified registry key is protected.
     * @remarks
     * A key is protected by WRP if the path exists and is protected by WRP. The <b>SfcIsKeyProtected</b> function indicates that a subkey is protected by WRP if the subkey has a  parent key that is protected by WRP.  
     * 
     * For example, if the following registry key exists on the system and is protected by WRP:
     * 
     * 
     * <pre><b>HKEY_LOCAL_MACHINE</b>
     *    <b>SOFTWARE</b>
     *       <b>Classes</b>
     *          <b>Microsoft</b>
     *             <b>&lt;WinFeature&gt;</b></pre>
     * 
     * 
     * The <b>SfcIsKeyProtected</b> function returns a nonzero value for the following subkey. The new subkey does not need to exist for the function to determine that it is WRP-protected.
     * 
     * 
     * <pre><b>HKEY_LOCAL_MACHINE</b>
     *    <b>SOFTWARE</b>
     *       <b>Classes</b>
     *          <b>Microsoft</b>
     *             <b>&lt;WinFeature&gt;</b>
     *                <b>&lt;new subkey&gt;</b></pre>
     * @param {Pointer<HKEY>} KeyHandle A handle to the root registry key. This must be a handle to one of the following <a href="https://docs.microsoft.com/windows/desktop/SysInfo/predefined-keys">predefined keys</a>.
     * 
     * <p class="indent">HKEY_CLASSES_ROOT
     * 
     * <p class="indent">HKEY_CURRENT_USER
     * 
     * <p class="indent">HKEY_LOCAL_MACHINE
     * 
     * <p class="indent">HKEY_USERS
     * @param {Pointer<PWSTR>} SubKeyName A <b>null</b>-terminated string value containing the name of the subkey. This key must a subkey of the key identified by the <i>hKey</i> parameter. For more information about key names, see <a href="https://docs.microsoft.com/windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>. 
     * If this parameter is <b>NULL</b>, the function only checks whether the root registry key is protected.
     * @param {Integer} KeySam A constant that specifies the alternate registry view that should be used by applications that run on 64-bit Windows.  This flag is ignored on the x86 platform. For more information, see <a href="https://docs.microsoft.com/windows/desktop/WinProg64/accessing-an-alternate-registry-view">Accessing an Alternate Registry View</a>.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%">
     * <dl>
     * <dt>0x0000</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Use the 32-bit registry key from 32-bit applications and use the 64-bit registry key from 64-bit applications.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="KEY_WOW64_64KEY"></a><a id="key_wow64_64key"></a><dl>
     * <dt><b>KEY_WOW64_64KEY</b></dt>
     * <dt>0x0100</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Use the 64-bit registry key from either a 32-bit or 64-bit application.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="KEY_WOW64_32KEY"></a><a id="key_wow64_32key"></a><dl>
     * <dt><b>KEY_WOW64_32KEY</b></dt>
     * <dt>0x0200</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Use the 32-bit registry key from either a 32-bit or 64-bit application.
     * 
     * </td>
     * </tr>
     * </table>
     * @returns {Integer} If the key is protected, the return value is a nonzero value.
     * 
     * If the key is not protected, the return value is zero.
     * @see https://learn.microsoft.com/windows/win32/api/sfc/nf-sfc-sfciskeyprotected
     * @since windows6.0.6000
     */
    static SfcIsKeyProtected(KeyHandle, SubKeyName, KeySam) {
        result := DllCall("sfc.dll\SfcIsKeyProtected", "ptr", KeyHandle, "ptr", SubKeyName, "uint", KeySam, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PSTR>} pszFileName 
     * @param {Pointer<PSTR>} pszError 
     * @param {Integer} dwErrSize 
     * @returns {Integer} 
     */
    static SfpVerifyFile(pszFileName, pszError, dwErrSize) {
        result := DllCall("sfc.dll\SfpVerifyFile", "ptr", pszFileName, "ptr", pszError, "uint", dwErrSize, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PSTR>} OldFileName 
     * @param {Pointer<PSTR>} NewFileName 
     * @param {Pointer<PSTR>} PatchFileName 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @returns {Integer} 
     */
    static CreatePatchFileA(OldFileName, NewFileName, PatchFileName, OptionFlags, OptionData) {
        result := DllCall("mspatchc.dll\CreatePatchFileA", "ptr", OldFileName, "ptr", NewFileName, "ptr", PatchFileName, "uint", OptionFlags, "ptr", OptionData, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PWSTR>} OldFileName 
     * @param {Pointer<PWSTR>} NewFileName 
     * @param {Pointer<PWSTR>} PatchFileName 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @returns {Integer} 
     */
    static CreatePatchFileW(OldFileName, NewFileName, PatchFileName, OptionFlags, OptionData) {
        result := DllCall("mspatchc.dll\CreatePatchFileW", "ptr", OldFileName, "ptr", NewFileName, "ptr", PatchFileName, "uint", OptionFlags, "ptr", OptionData, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<HANDLE>} OldFileHandle 
     * @param {Pointer<HANDLE>} NewFileHandle 
     * @param {Pointer<HANDLE>} PatchFileHandle 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @returns {Integer} 
     */
    static CreatePatchFileByHandles(OldFileHandle, NewFileHandle, PatchFileHandle, OptionFlags, OptionData) {
        result := DllCall("mspatchc.dll\CreatePatchFileByHandles", "ptr", OldFileHandle, "ptr", NewFileHandle, "ptr", PatchFileHandle, "uint", OptionFlags, "ptr", OptionData, "int")
        return result
    }

    /**
     * Creates a delta between the specified source file and the specified target file.
     * @param {Integer} OldFileCount The total number of source files. Used to create deltas against multiple source files (maximum 255).
     * @param {Pointer<PATCH_OLD_FILE_INFO_A>} OldFileInfoArray Pointer to source file information array.
     * @param {Pointer<PSTR>} NewFileName The name of the target file.
     * @param {Pointer<PSTR>} PatchFileName The name of the delta that is created.
     * @param {Integer} OptionFlags Creation flags.
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback Pointer to application-defined progress callback.
     * @param {Pointer<Void>} CallbackContext Pointer to application-defined context.
     * @returns {Integer} This function returns **TRUE** if it succeeds; otherwise, it returns **FALSE**.
     * @see https://learn.microsoft.com/windows/win32/DevNotes/patchapi-createpatchfileex
     */
    static CreatePatchFileExA(OldFileCount, OldFileInfoArray, NewFileName, PatchFileName, OptionFlags, OptionData, ProgressCallback, CallbackContext) {
        result := DllCall("mspatchc.dll\CreatePatchFileExA", "uint", OldFileCount, "ptr", OldFileInfoArray, "ptr", NewFileName, "ptr", PatchFileName, "uint", OptionFlags, "ptr", OptionData, "ptr", ProgressCallback, "ptr", CallbackContext, "int")
        return result
    }

    /**
     * Creates a delta between the specified source file and the specified target file.
     * @param {Integer} OldFileCount The total number of source files. Used to create deltas against multiple source files (maximum 255).
     * @param {Pointer<PATCH_OLD_FILE_INFO_W>} OldFileInfoArray Pointer to source file information array.
     * @param {Pointer<PWSTR>} NewFileName The name of the target file.
     * @param {Pointer<PWSTR>} PatchFileName The name of the delta that is created.
     * @param {Integer} OptionFlags Creation flags.
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback Pointer to application-defined progress callback.
     * @param {Pointer<Void>} CallbackContext Pointer to application-defined context.
     * @returns {Integer} This function returns **TRUE** if it succeeds; otherwise, it returns **FALSE**.
     * @see https://learn.microsoft.com/windows/win32/DevNotes/patchapi-createpatchfileex
     */
    static CreatePatchFileExW(OldFileCount, OldFileInfoArray, NewFileName, PatchFileName, OptionFlags, OptionData, ProgressCallback, CallbackContext) {
        result := DllCall("mspatchc.dll\CreatePatchFileExW", "uint", OldFileCount, "ptr", OldFileInfoArray, "ptr", NewFileName, "ptr", PatchFileName, "uint", OptionFlags, "ptr", OptionData, "ptr", ProgressCallback, "ptr", CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {Integer} OldFileCount 
     * @param {Pointer<PATCH_OLD_FILE_INFO_H>} OldFileInfoArray 
     * @param {Pointer<HANDLE>} NewFileHandle 
     * @param {Pointer<HANDLE>} PatchFileHandle 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {Integer} 
     */
    static CreatePatchFileByHandlesEx(OldFileCount, OldFileInfoArray, NewFileHandle, PatchFileHandle, OptionFlags, OptionData, ProgressCallback, CallbackContext) {
        result := DllCall("mspatchc.dll\CreatePatchFileByHandlesEx", "uint", OldFileCount, "ptr", OldFileInfoArray, "ptr", NewFileHandle, "ptr", PatchFileHandle, "uint", OptionFlags, "ptr", OptionData, "ptr", ProgressCallback, "ptr", CallbackContext, "int")
        return result
    }

    /**
     * Extracts the header information from a delta.
     * @param {Pointer<PSTR>} PatchFileName The name of the delta containing the header.
     * @param {Pointer<PSTR>} PatchHeaderFileName The name of the header file that is to be created.
     * @returns {Integer} This function returns **TRUE** if it succeeds; otherwise, it returns **FALSE**.
     * @see https://learn.microsoft.com/windows/win32/DevNotes/patchapi-extractpatchheadertofile
     */
    static ExtractPatchHeaderToFileA(PatchFileName, PatchHeaderFileName) {
        result := DllCall("mspatchc.dll\ExtractPatchHeaderToFileA", "ptr", PatchFileName, "ptr", PatchHeaderFileName, "int")
        return result
    }

    /**
     * Extracts the header information from a delta.
     * @param {Pointer<PWSTR>} PatchFileName The name of the delta containing the header.
     * @param {Pointer<PWSTR>} PatchHeaderFileName The name of the header file that is to be created.
     * @returns {Integer} This function returns **TRUE** if it succeeds; otherwise, it returns **FALSE**.
     * @see https://learn.microsoft.com/windows/win32/DevNotes/patchapi-extractpatchheadertofile
     */
    static ExtractPatchHeaderToFileW(PatchFileName, PatchHeaderFileName) {
        result := DllCall("mspatchc.dll\ExtractPatchHeaderToFileW", "ptr", PatchFileName, "ptr", PatchHeaderFileName, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<HANDLE>} PatchFileHandle 
     * @param {Pointer<HANDLE>} PatchHeaderFileHandle 
     * @returns {Integer} 
     */
    static ExtractPatchHeaderToFileByHandles(PatchFileHandle, PatchHeaderFileHandle) {
        result := DllCall("mspatchc.dll\ExtractPatchHeaderToFileByHandles", "ptr", PatchFileHandle, "ptr", PatchHeaderFileHandle, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PSTR>} PatchFileName 
     * @param {Pointer<PSTR>} OldFileName 
     * @param {Integer} ApplyOptionFlags 
     * @returns {Integer} 
     */
    static TestApplyPatchToFileA(PatchFileName, OldFileName, ApplyOptionFlags) {
        result := DllCall("mspatcha.dll\TestApplyPatchToFileA", "ptr", PatchFileName, "ptr", OldFileName, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PWSTR>} PatchFileName 
     * @param {Pointer<PWSTR>} OldFileName 
     * @param {Integer} ApplyOptionFlags 
     * @returns {Integer} 
     */
    static TestApplyPatchToFileW(PatchFileName, OldFileName, ApplyOptionFlags) {
        result := DllCall("mspatcha.dll\TestApplyPatchToFileW", "ptr", PatchFileName, "ptr", OldFileName, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<HANDLE>} PatchFileHandle 
     * @param {Pointer<HANDLE>} OldFileHandle 
     * @param {Integer} ApplyOptionFlags 
     * @returns {Integer} 
     */
    static TestApplyPatchToFileByHandles(PatchFileHandle, OldFileHandle, ApplyOptionFlags) {
        result := DllCall("mspatcha.dll\TestApplyPatchToFileByHandles", "ptr", PatchFileHandle, "ptr", OldFileHandle, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<Byte>} PatchFileBuffer 
     * @param {Integer} PatchFileSize 
     * @param {Pointer<Byte>} OldFileBuffer 
     * @param {Integer} OldFileSize 
     * @param {Pointer<UInt32>} NewFileSize 
     * @param {Integer} ApplyOptionFlags 
     * @returns {Integer} 
     */
    static TestApplyPatchToFileByBuffers(PatchFileBuffer, PatchFileSize, OldFileBuffer, OldFileSize, NewFileSize, ApplyOptionFlags) {
        result := DllCall("mspatcha.dll\TestApplyPatchToFileByBuffers", "ptr", PatchFileBuffer, "uint", PatchFileSize, "ptr", OldFileBuffer, "uint", OldFileSize, "ptr", NewFileSize, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PSTR>} PatchFileName 
     * @param {Pointer<PSTR>} OldFileName 
     * @param {Pointer<PSTR>} NewFileName 
     * @param {Integer} ApplyOptionFlags 
     * @returns {Integer} 
     */
    static ApplyPatchToFileA(PatchFileName, OldFileName, NewFileName, ApplyOptionFlags) {
        result := DllCall("mspatcha.dll\ApplyPatchToFileA", "ptr", PatchFileName, "ptr", OldFileName, "ptr", NewFileName, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PWSTR>} PatchFileName 
     * @param {Pointer<PWSTR>} OldFileName 
     * @param {Pointer<PWSTR>} NewFileName 
     * @param {Integer} ApplyOptionFlags 
     * @returns {Integer} 
     */
    static ApplyPatchToFileW(PatchFileName, OldFileName, NewFileName, ApplyOptionFlags) {
        result := DllCall("mspatcha.dll\ApplyPatchToFileW", "ptr", PatchFileName, "ptr", OldFileName, "ptr", NewFileName, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<HANDLE>} PatchFileHandle 
     * @param {Pointer<HANDLE>} OldFileHandle 
     * @param {Pointer<HANDLE>} NewFileHandle 
     * @param {Integer} ApplyOptionFlags 
     * @returns {Integer} 
     */
    static ApplyPatchToFileByHandles(PatchFileHandle, OldFileHandle, NewFileHandle, ApplyOptionFlags) {
        result := DllCall("mspatcha.dll\ApplyPatchToFileByHandles", "ptr", PatchFileHandle, "ptr", OldFileHandle, "ptr", NewFileHandle, "uint", ApplyOptionFlags, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PSTR>} PatchFileName 
     * @param {Pointer<PSTR>} OldFileName 
     * @param {Pointer<PSTR>} NewFileName 
     * @param {Integer} ApplyOptionFlags 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {Integer} 
     */
    static ApplyPatchToFileExA(PatchFileName, OldFileName, NewFileName, ApplyOptionFlags, ProgressCallback, CallbackContext) {
        result := DllCall("mspatcha.dll\ApplyPatchToFileExA", "ptr", PatchFileName, "ptr", OldFileName, "ptr", NewFileName, "uint", ApplyOptionFlags, "ptr", ProgressCallback, "ptr", CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PWSTR>} PatchFileName 
     * @param {Pointer<PWSTR>} OldFileName 
     * @param {Pointer<PWSTR>} NewFileName 
     * @param {Integer} ApplyOptionFlags 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {Integer} 
     */
    static ApplyPatchToFileExW(PatchFileName, OldFileName, NewFileName, ApplyOptionFlags, ProgressCallback, CallbackContext) {
        result := DllCall("mspatcha.dll\ApplyPatchToFileExW", "ptr", PatchFileName, "ptr", OldFileName, "ptr", NewFileName, "uint", ApplyOptionFlags, "ptr", ProgressCallback, "ptr", CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<HANDLE>} PatchFileHandle 
     * @param {Pointer<HANDLE>} OldFileHandle 
     * @param {Pointer<HANDLE>} NewFileHandle 
     * @param {Integer} ApplyOptionFlags 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {Integer} 
     */
    static ApplyPatchToFileByHandlesEx(PatchFileHandle, OldFileHandle, NewFileHandle, ApplyOptionFlags, ProgressCallback, CallbackContext) {
        result := DllCall("mspatcha.dll\ApplyPatchToFileByHandlesEx", "ptr", PatchFileHandle, "ptr", OldFileHandle, "ptr", NewFileHandle, "uint", ApplyOptionFlags, "ptr", ProgressCallback, "ptr", CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<Byte>} PatchFileMapped 
     * @param {Integer} PatchFileSize 
     * @param {Pointer<Byte>} OldFileMapped 
     * @param {Integer} OldFileSize 
     * @param {Pointer<Byte>} NewFileBuffer 
     * @param {Integer} NewFileBufferSize 
     * @param {Pointer<UInt32>} NewFileActualSize 
     * @param {Pointer<FILETIME>} NewFileTime 
     * @param {Integer} ApplyOptionFlags 
     * @param {Pointer<PPATCH_PROGRESS_CALLBACK>} ProgressCallback 
     * @param {Pointer<Void>} CallbackContext 
     * @returns {Integer} 
     */
    static ApplyPatchToFileByBuffers(PatchFileMapped, PatchFileSize, OldFileMapped, OldFileSize, NewFileBuffer, NewFileBufferSize, NewFileActualSize, NewFileTime, ApplyOptionFlags, ProgressCallback, CallbackContext) {
        result := DllCall("mspatcha.dll\ApplyPatchToFileByBuffers", "ptr", PatchFileMapped, "uint", PatchFileSize, "ptr", OldFileMapped, "uint", OldFileSize, "ptr", NewFileBuffer, "uint", NewFileBufferSize, "ptr", NewFileActualSize, "ptr", NewFileTime, "uint", ApplyOptionFlags, "ptr", ProgressCallback, "ptr", CallbackContext, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PSTR>} FileName 
     * @param {Integer} OptionFlags 
     * @param {Pointer<Void>} OptionData 
     * @param {Integer} IgnoreRangeCount 
     * @param {Pointer<PATCH_IGNORE_RANGE>} IgnoreRangeArray 
     * @param {Integer} RetainRangeCount 
     * @param {Pointer<PATCH_RETAIN_RANGE>} RetainRangeArray 
     * @param {Integer} SignatureBufferSize 
     * @param {Pointer<PSTR>} SignatureBuffer 
     * @returns {Integer} 
     */
    static GetFilePatchSignatureA(FileName, OptionFlags, OptionData, IgnoreRangeCount, IgnoreRangeArray, RetainRangeCount, RetainRangeArray, SignatureBufferSize, SignatureBuffer) {
        result := DllCall("mspatcha.dll\GetFilePatchSignatureA", "ptr", FileName, "uint", OptionFlags, "ptr", OptionData, "uint", IgnoreRangeCount, "ptr", IgnoreRangeArray, "uint", RetainRangeCount, "ptr", RetainRangeArray, "uint", SignatureBufferSize, "ptr", SignatureBuffer, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PWSTR>} FileName 
     * @param {Integer} OptionFlags 
     * @param {Pointer<Void>} OptionData 
     * @param {Integer} IgnoreRangeCount 
     * @param {Pointer<PATCH_IGNORE_RANGE>} IgnoreRangeArray 
     * @param {Integer} RetainRangeCount 
     * @param {Pointer<PATCH_RETAIN_RANGE>} RetainRangeArray 
     * @param {Integer} SignatureBufferSize 
     * @param {Pointer<PWSTR>} SignatureBuffer 
     * @returns {Integer} 
     */
    static GetFilePatchSignatureW(FileName, OptionFlags, OptionData, IgnoreRangeCount, IgnoreRangeArray, RetainRangeCount, RetainRangeArray, SignatureBufferSize, SignatureBuffer) {
        result := DllCall("mspatcha.dll\GetFilePatchSignatureW", "ptr", FileName, "uint", OptionFlags, "ptr", OptionData, "uint", IgnoreRangeCount, "ptr", IgnoreRangeArray, "uint", RetainRangeCount, "ptr", RetainRangeArray, "uint", SignatureBufferSize, "ptr", SignatureBuffer, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<HANDLE>} FileHandle 
     * @param {Integer} OptionFlags 
     * @param {Pointer<Void>} OptionData 
     * @param {Integer} IgnoreRangeCount 
     * @param {Pointer<PATCH_IGNORE_RANGE>} IgnoreRangeArray 
     * @param {Integer} RetainRangeCount 
     * @param {Pointer<PATCH_RETAIN_RANGE>} RetainRangeArray 
     * @param {Integer} SignatureBufferSize 
     * @param {Pointer<PSTR>} SignatureBuffer 
     * @returns {Integer} 
     */
    static GetFilePatchSignatureByHandle(FileHandle, OptionFlags, OptionData, IgnoreRangeCount, IgnoreRangeArray, RetainRangeCount, RetainRangeArray, SignatureBufferSize, SignatureBuffer) {
        result := DllCall("mspatcha.dll\GetFilePatchSignatureByHandle", "ptr", FileHandle, "uint", OptionFlags, "ptr", OptionData, "uint", IgnoreRangeCount, "ptr", IgnoreRangeArray, "uint", RetainRangeCount, "ptr", RetainRangeArray, "uint", SignatureBufferSize, "ptr", SignatureBuffer, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<Byte>} FileBufferWritable 
     * @param {Integer} FileSize 
     * @param {Integer} OptionFlags 
     * @param {Pointer<Void>} OptionData 
     * @param {Integer} IgnoreRangeCount 
     * @param {Pointer<PATCH_IGNORE_RANGE>} IgnoreRangeArray 
     * @param {Integer} RetainRangeCount 
     * @param {Pointer<PATCH_RETAIN_RANGE>} RetainRangeArray 
     * @param {Integer} SignatureBufferSize 
     * @param {Pointer<PSTR>} SignatureBuffer 
     * @returns {Integer} 
     */
    static GetFilePatchSignatureByBuffer(FileBufferWritable, FileSize, OptionFlags, OptionData, IgnoreRangeCount, IgnoreRangeArray, RetainRangeCount, RetainRangeArray, SignatureBufferSize, SignatureBuffer) {
        result := DllCall("mspatcha.dll\GetFilePatchSignatureByBuffer", "ptr", FileBufferWritable, "uint", FileSize, "uint", OptionFlags, "ptr", OptionData, "uint", IgnoreRangeCount, "ptr", IgnoreRangeArray, "uint", RetainRangeCount, "ptr", RetainRangeArray, "uint", SignatureBufferSize, "ptr", SignatureBuffer, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<Void>} FileBuffer 
     * @param {Integer} FileSize 
     * @param {Integer} OptionFlags 
     * @param {Pointer<PATCH_OPTION_DATA>} OptionData 
     * @param {Integer} NewFileCoffBase 
     * @param {Integer} NewFileCoffTime 
     * @param {Integer} IgnoreRangeCount 
     * @param {Pointer<PATCH_IGNORE_RANGE>} IgnoreRangeArray 
     * @param {Integer} RetainRangeCount 
     * @param {Pointer<PATCH_RETAIN_RANGE>} RetainRangeArray 
     * @returns {String} Nothing - always returns an empty string
     */
    static NormalizeFileForPatchSignature(FileBuffer, FileSize, OptionFlags, OptionData, NewFileCoffBase, NewFileCoffTime, IgnoreRangeCount, IgnoreRangeArray, RetainRangeCount, RetainRangeArray) {
        DllCall("mspatcha.dll\NormalizeFileForPatchSignature", "ptr", FileBuffer, "uint", FileSize, "uint", OptionFlags, "ptr", OptionData, "uint", NewFileCoffBase, "uint", NewFileCoffTime, "uint", IgnoreRangeCount, "ptr", IgnoreRangeArray, "uint", RetainRangeCount, "ptr", RetainRangeArray)
    }

    /**
     * 
     * @param {Pointer} Delta 
     * @param {Pointer<DELTA_HEADER_INFO>} lpHeaderInfo 
     * @returns {Integer} 
     */
    static GetDeltaInfoB(Delta, lpHeaderInfo) {
        result := DllCall("msdelta.dll\GetDeltaInfoB", "ptr", Delta, "ptr", lpHeaderInfo, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PSTR>} lpDeltaName 
     * @param {Pointer<DELTA_HEADER_INFO>} lpHeaderInfo 
     * @returns {Integer} 
     */
    static GetDeltaInfoA(lpDeltaName, lpHeaderInfo) {
        result := DllCall("msdelta.dll\GetDeltaInfoA", "ptr", lpDeltaName, "ptr", lpHeaderInfo, "int")
        return result
    }

    /**
     * 
     * @param {Pointer<PWSTR>} lpDeltaName 
     * @param {Pointer<DELTA_HEADER_INFO>} lpHeaderInfo 
     * @returns {Integer} 
     */
    static GetDeltaInfoW(lpDeltaName, lpHeaderInfo) {
        result := DllCall("msdelta.dll\GetDeltaInfoW", "ptr", lpDeltaName, "ptr", lpHeaderInfo, "int")
        return result
    }

    /**
     * 
     * @param {Integer} ApplyFlags 
     * @param {Pointer} Source 
     * @param {Pointer} Delta 
     * @param {Pointer<FILETIME>} lpReverseFileTime 
     * @param {Pointer<DELTA_OUTPUT>} lpTarget 
     * @param {Pointer<DELTA_OUTPUT>} lpTargetReverse 
     * @returns {Integer} 
     */
    static ApplyDeltaGetReverseB(ApplyFlags, Source, Delta, lpReverseFileTime, lpTarget, lpTargetReverse) {
        result := DllCall("msdelta.dll\ApplyDeltaGetReverseB", "int64", ApplyFlags, "ptr", Source, "ptr", Delta, "ptr", lpReverseFileTime, "ptr", lpTarget, "ptr", lpTargetReverse, "int")
        return result
    }

    /**
     * Uses the delta and source (provided as buffers) to create a new copy of the target data. The output data is returned in an MSDelta-allocated buffer.
     * @param {Integer} ApplyFlags [in] Either [DELTA_FLAG_NONE](/previous-versions/bb417345(v=msdn.10)#delta_flag_type-flags) or [DELTA_APPLY_FLAG_ALLOW_PA19](/previous-versions/bb417345(v=msdn.10)#delta_flag_type-flags).
     * @param {Pointer} Source [in] A [DELTA_INPUT](/previous-versions/bb417345(v=msdn.10)#delta-input-structure) structure containing a pointer to the buffer containing the source data.
     * @param {Pointer} Delta [in] A [DELTA_INPUT](/previous-versions/bb417345(v=msdn.10)#delta-input-structure) structure containing a pointer to the buffer containing the delta data.
     * @param {Pointer<DELTA_OUTPUT>} lpTarget [out] Pointer to the [DELTA_OUTPUT](/previous-versions/bb417345(v=msdn.10)#delta-output-structure) structure where the target is to be written.
     * @returns {Integer} This function returns **TRUE** if it succeeds; otherwise, it returns **FALSE**. When the function returns **FALSE**, you can call [GetLastError](/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror) to get the corresponding Win32 system error code.
     * @see https://learn.microsoft.com/windows/win32/DevNotes/msdelta-applydeltab
     */
    static ApplyDeltaB(ApplyFlags, Source, Delta, lpTarget) {
        result := DllCall("msdelta.dll\ApplyDeltaB", "int64", ApplyFlags, "ptr", Source, "ptr", Delta, "ptr", lpTarget, "int")
        return result
    }

    /**
     * 
     * @param {Integer} ApplyFlags 
     * @param {Pointer} Source 
     * @param {Pointer} Delta 
     * @param {Pointer<Void>} lpTarget 
     * @param {Pointer} uTargetSize 
     * @returns {Integer} 
     */
    static ApplyDeltaProvidedB(ApplyFlags, Source, Delta, lpTarget, uTargetSize) {
        result := DllCall("msdelta.dll\ApplyDeltaProvidedB", "int64", ApplyFlags, "ptr", Source, "ptr", Delta, "ptr", lpTarget, "ptr", uTargetSize, "int")
        return result
    }

    /**
     * 
     * @param {Integer} ApplyFlags 
     * @param {Pointer<PSTR>} lpSourceName 
     * @param {Pointer<PSTR>} lpDeltaName 
     * @param {Pointer<PSTR>} lpTargetName 
     * @returns {Integer} 
     */
    static ApplyDeltaA(ApplyFlags, lpSourceName, lpDeltaName, lpTargetName) {
        result := DllCall("msdelta.dll\ApplyDeltaA", "int64", ApplyFlags, "ptr", lpSourceName, "ptr", lpDeltaName, "ptr", lpTargetName, "int")
        return result
    }

    /**
     * Uses the delta and source (provided as buffers) to create a new copy of the target data. The output data is returned in an MSDelta-allocated buffer. (ApplyDeltaW)
     * @param {Integer} ApplyFlags [in] Either [DELTA_FLAG_NONE](/previous-versions/bb417345(v=msdn.10)#delta_flag_type-flags) or [DELTA_APPLY_FLAG_ALLOW_PA19](/previous-versions/bb417345(v=msdn.10)#delta_flag_type-flags).
     * @param {Pointer<PWSTR>} lpSourceName 
     * @param {Pointer<PWSTR>} lpDeltaName 
     * @param {Pointer<PWSTR>} lpTargetName 
     * @returns {Integer} This function returns **TRUE** if it succeeds; otherwise, it returns **FALSE**. When the function returns **FALSE**, you can call [GetLastError](/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror) to get the corresponding Win32 system error code.
     * @see https://learn.microsoft.com/windows/win32/DevNotes/msdelta-applydeltaw
     */
    static ApplyDeltaW(ApplyFlags, lpSourceName, lpDeltaName, lpTargetName) {
        result := DllCall("msdelta.dll\ApplyDeltaW", "int64", ApplyFlags, "ptr", lpSourceName, "ptr", lpDeltaName, "ptr", lpTargetName, "int")
        return result
    }

    /**
     * Creates a delta between the source and target (provided as buffers) and returns the output delta as an MSDelta-allocated buffer.
     * @param {Integer} FileTypeSet [in] The [DELTA_FILE_TYPE](/previous-versions/bb417345(v=msdn.10)#file-type-sets) value that indicates the file type set to be used for the create process.
     * @param {Integer} SetFlags [in] One or more [DELTA_FLAG_TYPE](/previous-versions/bb417345(v=msdn.10)#delta_flag_type-flags) values that specify the flags to be used during the create process, in addition to the default flags.
     * @param {Integer} ResetFlags [in] One or more [DELTA_FLAG_TYPE](/previous-versions/bb417345(v=msdn.10)#delta_flag_type-flags) values that specify the default flags to be reset during the create process.
     * @param {Pointer} Source [in] A [DELTA_INPUT](/previous-versions/bb417345(v=msdn.10)#delta-input-structure) structure containing a pointer to the buffer containing the source data.
     * @param {Pointer} Target [in] A [DELTA_INPUT](/previous-versions/bb417345(v=msdn.10)#delta-input-structure) structure containing a pointer to the buffer containing the target data.
     * @param {Pointer} SourceOptions [in] Reserved. Pass a [DELTA_INPUT](/previous-versions/bb417345(v=msdn.10)#delta-input-structure) structure with *Editable* set to **FALSE**, *lpStart* set to **NULL** and *uSize* set to 0.
     * @param {Pointer} TargetOptions [in] Reserved. Pass a [DELTA_INPUT](/previous-versions/bb417345(v=msdn.10)#delta-input-structure) structure with *Editable* set to **FALSE**, *lpStart* set to **NULL** and *uSize* set to 0.
     * @param {Pointer} GlobalOptions [in] Reserved. Pass a [DELTA_INPUT](/previous-versions/bb417345(v=msdn.10)#delta-input-structure) structure with *lpStart* set to **NULL** and *uSize* set to 0.
     * @param {Pointer<FILETIME>} lpTargetFileTime [in] The time stamp set on the target file after delta apply. If **NULL**, the target timestamp will be the current time during the create process.
     * @param {Integer} HashAlgId [in] ALG_ID of the algorithm to be used to generate the target signature. Some special values are:
     * 
     * - 0 = No signature
     * - 32 = 32-bit CRC defined in msdelta.dll
     * @param {Pointer<DELTA_OUTPUT>} lpDelta [out] Pointer to the [DELTA_OUTPUT](/previous-versions/bb417345(v=msdn.10)#delta-output-structure) structure where the delta is to be written.
     * @returns {Integer} This function returns **TRUE** if it succeeds; otherwise, it returns **FALSE**. When the function returns **FALSE**, you can call [GetLastError](/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror) to get the corresponding Win32 system error code.
     * @see https://learn.microsoft.com/windows/win32/DevNotes/msdelta-createdeltab
     */
    static CreateDeltaB(FileTypeSet, SetFlags, ResetFlags, Source, Target, SourceOptions, TargetOptions, GlobalOptions, lpTargetFileTime, HashAlgId, lpDelta) {
        result := DllCall("msdelta.dll\CreateDeltaB", "int64", FileTypeSet, "int64", SetFlags, "int64", ResetFlags, "ptr", Source, "ptr", Target, "ptr", SourceOptions, "ptr", TargetOptions, "ptr", GlobalOptions, "ptr", lpTargetFileTime, "uint", HashAlgId, "ptr", lpDelta, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} SetFlags 
     * @param {Integer} ResetFlags 
     * @param {Pointer<PSTR>} lpSourceName 
     * @param {Pointer<PSTR>} lpTargetName 
     * @param {Pointer<PSTR>} lpSourceOptionsName 
     * @param {Pointer<PSTR>} lpTargetOptionsName 
     * @param {Pointer} GlobalOptions 
     * @param {Pointer<FILETIME>} lpTargetFileTime 
     * @param {Integer} HashAlgId 
     * @param {Pointer<PSTR>} lpDeltaName 
     * @returns {Integer} 
     */
    static CreateDeltaA(FileTypeSet, SetFlags, ResetFlags, lpSourceName, lpTargetName, lpSourceOptionsName, lpTargetOptionsName, GlobalOptions, lpTargetFileTime, HashAlgId, lpDeltaName) {
        result := DllCall("msdelta.dll\CreateDeltaA", "int64", FileTypeSet, "int64", SetFlags, "int64", ResetFlags, "ptr", lpSourceName, "ptr", lpTargetName, "ptr", lpSourceOptionsName, "ptr", lpTargetOptionsName, "ptr", GlobalOptions, "ptr", lpTargetFileTime, "uint", HashAlgId, "ptr", lpDeltaName, "int")
        return result
    }

    /**
     * Creates a delta between the source and target (provided as buffers) and returns the output delta as an MSDelta-allocated buffer. (CreateDeltaW)
     * @param {Integer} FileTypeSet [in] The [DELTA_FILE_TYPE](/previous-versions/bb417345(v=msdn.10)#file-type-sets) value that indicates the file type set to be used for the create process.
     * @param {Integer} SetFlags [in] One or more [DELTA_FLAG_TYPE](/previous-versions/bb417345(v=msdn.10)#delta_flag_type-flags) values that specify the flags to be used during the create process, in addition to the default flags.
     * @param {Integer} ResetFlags [in] One or more [DELTA_FLAG_TYPE](/previous-versions/bb417345(v=msdn.10)#delta_flag_type-flags) values that specify the default flags to be reset during the create process.
     * @param {Pointer<PWSTR>} lpSourceName 
     * @param {Pointer<PWSTR>} lpTargetName 
     * @param {Pointer<PWSTR>} lpSourceOptionsName 
     * @param {Pointer<PWSTR>} lpTargetOptionsName 
     * @param {Pointer} GlobalOptions [in] Reserved. Pass a [DELTA_INPUT](/previous-versions/bb417345(v=msdn.10)#delta-input-structure) structure with *lpStart* set to **NULL** and *uSize* set to 0.
     * @param {Pointer<FILETIME>} lpTargetFileTime [in] The time stamp set on the target file after delta apply. If **NULL**, the target timestamp will be the current time during the create process.
     * @param {Integer} HashAlgId [in] ALG_ID of the algorithm to be used to generate the target signature. Some special values are:
     * 
     * - 0 = No signature
     * - 32 = 32-bit CRC defined in msdelta.dll
     * @param {Pointer<PWSTR>} lpDeltaName 
     * @returns {Integer} This function returns **TRUE** if it succeeds; otherwise, it returns **FALSE**. When the function returns **FALSE**, you can call [GetLastError](/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror) to get the corresponding Win32 system error code.
     * @see https://learn.microsoft.com/windows/win32/DevNotes/msdelta-createdeltaw
     */
    static CreateDeltaW(FileTypeSet, SetFlags, ResetFlags, lpSourceName, lpTargetName, lpSourceOptionsName, lpTargetOptionsName, GlobalOptions, lpTargetFileTime, HashAlgId, lpDeltaName) {
        result := DllCall("msdelta.dll\CreateDeltaW", "int64", FileTypeSet, "int64", SetFlags, "int64", ResetFlags, "ptr", lpSourceName, "ptr", lpTargetName, "ptr", lpSourceOptionsName, "ptr", lpTargetOptionsName, "ptr", GlobalOptions, "ptr", lpTargetFileTime, "uint", HashAlgId, "ptr", lpDeltaName, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} HashAlgId 
     * @param {Pointer} Source 
     * @param {Pointer<DELTA_HASH>} lpHash 
     * @returns {Integer} 
     */
    static GetDeltaSignatureB(FileTypeSet, HashAlgId, Source, lpHash) {
        result := DllCall("msdelta.dll\GetDeltaSignatureB", "int64", FileTypeSet, "uint", HashAlgId, "ptr", Source, "ptr", lpHash, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} HashAlgId 
     * @param {Pointer<PSTR>} lpSourceName 
     * @param {Pointer<DELTA_HASH>} lpHash 
     * @returns {Integer} 
     */
    static GetDeltaSignatureA(FileTypeSet, HashAlgId, lpSourceName, lpHash) {
        result := DllCall("msdelta.dll\GetDeltaSignatureA", "int64", FileTypeSet, "uint", HashAlgId, "ptr", lpSourceName, "ptr", lpHash, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} HashAlgId 
     * @param {Pointer<PWSTR>} lpSourceName 
     * @param {Pointer<DELTA_HASH>} lpHash 
     * @returns {Integer} 
     */
    static GetDeltaSignatureW(FileTypeSet, HashAlgId, lpSourceName, lpHash) {
        result := DllCall("msdelta.dll\GetDeltaSignatureW", "int64", FileTypeSet, "uint", HashAlgId, "ptr", lpSourceName, "ptr", lpHash, "int")
        return result
    }

    /**
     * 
     * @param {Integer} FileTypeSet 
     * @param {Integer} NormalizeFlags 
     * @param {Pointer} NormalizeOptions 
     * @param {Pointer<Void>} lpSource 
     * @param {Pointer} uSourceSize 
     * @returns {Integer} 
     */
    static DeltaNormalizeProvidedB(FileTypeSet, NormalizeFlags, NormalizeOptions, lpSource, uSourceSize) {
        result := DllCall("msdelta.dll\DeltaNormalizeProvidedB", "int64", FileTypeSet, "int64", NormalizeFlags, "ptr", NormalizeOptions, "ptr", lpSource, "ptr", uSourceSize, "int")
        return result
    }

    /**
     * Frees the specified memory block.
     * @param {Pointer<Void>} lpMemory [in] Memory block to be freed.
     * @returns {Integer} This function returns **TRUE** if it succeeds; otherwise, it returns **FALSE**. When the function returns **FALSE**, you can call [GetLastError](/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror) to get the corresponding Win32 system error code.
     * @see https://learn.microsoft.com/windows/win32/DevNotes/msdelta-deltafree
     */
    static DeltaFree(lpMemory) {
        result := DllCall("msdelta.dll\DeltaFree", "ptr", lpMemory, "int")
        return result
    }

    /**
     * The CreateActCtx function creates an activation context. (ANSI)
     * @remarks
     * Set any undefined bits in <b>dwFlags</b> of 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> to 0. If any undefined bits are not set to 0, the call to 
     * <b>CreateActCtx</b> that creates the activation context fails and returns an invalid parameter error code. The handle returned from 
     * <b>CreateActCtx</b> is passed in a call to 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-activateactctx">ActivateActCtx</a> to activate the context for the current thread.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The winbase.h header defines CreateActCtx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<ACTCTXA>} pActCtx Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information about the activation context to be created.
     * @returns {Pointer<HANDLE>} If the function succeeds, it returns a handle to the returned activation context. Otherwise, it returns INVALID_HANDLE_VALUE.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-createactctxa
     * @since windows5.1.2600
     */
    static CreateActCtxA(pActCtx) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\CreateActCtxA", "ptr", pActCtx, "ptr")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The CreateActCtx function creates an activation context. (Unicode)
     * @remarks
     * Set any undefined bits in <b>dwFlags</b> of 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> to 0. If any undefined bits are not set to 0, the call to 
     * <b>CreateActCtx</b> that creates the activation context fails and returns an invalid parameter error code. The handle returned from 
     * <b>CreateActCtx</b> is passed in a call to 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-activateactctx">ActivateActCtx</a> to activate the context for the current thread.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The winbase.h header defines CreateActCtx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Pointer<ACTCTXW>} pActCtx Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information about the activation context to be created.
     * @returns {Pointer<HANDLE>} If the function succeeds, it returns a handle to the returned activation context. Otherwise, it returns INVALID_HANDLE_VALUE.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-createactctxw
     * @since windows5.1.2600
     */
    static CreateActCtxW(pActCtx) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\CreateActCtxW", "ptr", pActCtx, "ptr")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The AddRefActCtx function increments the reference count of the specified activation context.
     * @remarks
     * This function is provided so that multiple clients can access a single activation context.
     * @param {Pointer<HANDLE>} hActCtx Handle to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information on the activation context for which the reference count is to be incremented.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-addrefactctx
     * @since windows5.1.2600
     */
    static AddRefActCtx(hActCtx) {
        DllCall("KERNEL32.dll\AddRefActCtx", "ptr", hActCtx)
    }

    /**
     * The ReleaseActCtx function decrements the reference count of the specified activation context.
     * @remarks
     * When the reference count of an activation context becomes zero, the activation context structure is deallocated. Activation contexts have not been implemented as kernel objects, therefore, kernel handler functions cannot be used for activation contexts.
     * 
     * If the value of the <i>hActCtx</i> parameter is a null handle, this function does nothing and no error condition occurs.
     * @param {Pointer<HANDLE>} hActCtx Handle to the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information on the activation context for which the reference count is to be decremented.
     * @returns {String} Nothing - always returns an empty string
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-releaseactctx
     * @since windows5.1.2600
     */
    static ReleaseActCtx(hActCtx) {
        DllCall("KERNEL32.dll\ReleaseActCtx", "ptr", hActCtx)
    }

    /**
     * The ZombifyActCtx function deactivates the specified activation context, but does not deallocate it.
     * @remarks
     * This function is intended for use in debugging threads using activation contexts. If the activation context deactivated by this function is subsequently accessed, the access  fails and an assertion failure is shown in the debugger.
     * @param {Pointer<HANDLE>} hActCtx Handle to the activation context that is to be deactivated.
     * @returns {Integer} If the function succeeds, it returns <b>TRUE</b>. If a <b>null</b> handle is passed in the <i>hActCtx</i> parameter, NULL_INVALID_PARAMETER will be returned. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-zombifyactctx
     * @since windows5.1.2600
     */
    static ZombifyActCtx(hActCtx) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\ZombifyActCtx", "ptr", hActCtx, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The ActivateActCtx function activates the specified activation context.
     * @remarks
     * The <i>lpCookie</i> parameter is later passed to 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-deactivateactctx">DeactivateActCtx</a>, which verifies the pairing of calls to 
     * <b>ActivateActCtx</b> and 
     * <b>DeactivateActCtx</b> and ensures that the appropriate activation context is being deactivated. This is done because the deactivation of activation contexts must occur in the reverse order of activation.
     * 
     * The activation of activation contexts can be understood as pushing an activation context onto a stack of activation contexts. The activation context you activate through this function  redirects any binding to DLLs, window classes, COM servers, type libraries, and mutexes for any side-by-side APIs you call.
     * 
     * The top item of an activation context stack is the active, default-activation context of the current thread. If a null activation context handle is pushed onto the stack, thereby activating it, the default settings in the original manifest override all activation contexts that are lower on the stack.
     * @param {Pointer<HANDLE>} hActCtx Handle to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information on the activation context that is to be made active.
     * @param {Pointer<UIntPtr>} lpCookie Pointer to a <b>ULONG_PTR</b> that functions as a cookie, uniquely identifying a specific, activated activation context.
     * @returns {Integer} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-activateactctx
     * @since windows5.1.2600
     */
    static ActivateActCtx(hActCtx, lpCookie) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\ActivateActCtx", "ptr", hActCtx, "ptr", lpCookie, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The DeactivateActCtx function deactivates the activation context corresponding to the specified cookie.
     * @remarks
     * The deactivation of activation contexts must occur in the reverse order of activation. It can be understood as popping an activation context from a stack.
     * @param {Integer} dwFlags Flags that indicate how the deactivation is to occur. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="0"></a><dl>
     * <dt><b>0</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this value is set and the cookie specified in the <i>ulCookie</i> parameter is in the top frame of the activation stack, the activation context is popped from the stack and thereby deactivated. 
     * 
     * 
     * 
     * 
     * If this value is set and the cookie specified in the <i>ulCookie</i> parameter is not in the top frame of the activation stack, this function  searches down the stack for the cookie.
     * 
     * If the cookie is found, a STATUS_SXS_EARLY_DEACTIVATION exception is thrown.
     * 
     * If the cookie is not found, a STATUS_SXS_INVALID_DEACTIVATION exception is thrown.
     * 
     * This value should be specified in most cases.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION"></a><a id="deactivate_actctx_flag_force_early_deactivation"></a><dl>
     * <dt><b>DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If this value is set and the cookie specified in the <i>ulCookie</i> parameter is in the top frame of the activation stack, the function  returns an ERROR_INVALID_PARAMETER error code. Call 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> to obtain this code. 
     * 
     * 
     * 
     * 
     * If this value is set and the cookie is not on the activation stack, a STATUS_SXS_INVALID_DEACTIVATION exception will be thrown.
     * 
     * If this value is set and the cookie is in a lower frame of the activation stack, all of the frames down to and including the frame the cookie is in is popped from the stack.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer} ulCookie The ULONG_PTR that was passed into the call to 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-activateactctx">ActivateActCtx</a>. This value is used as a cookie to identify a specific activated activation context.
     * @returns {Integer} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-deactivateactctx
     * @since windows5.1.2600
     */
    static DeactivateActCtx(dwFlags, ulCookie) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\DeactivateActCtx", "uint", dwFlags, "ptr", ulCookie, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The GetCurrentActCtx function returns the handle to the active activation context of the calling thread.
     * @remarks
     * The calling thread is responsible for releasing the handle of the returned activation context. This function can return a null handle if no activation contexts have been activated by this thread. This is not an error.
     * @param {Pointer<HANDLE>} lphActCtx Pointer to the returned 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctxa">ACTCTX</a> structure that contains information on the active activation context.
     * @returns {Integer} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-getcurrentactctx
     * @since windows5.1.2600
     */
    static GetCurrentActCtx(lphActCtx) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\GetCurrentActCtx", "ptr", lphActCtx, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The FindActCtxSectionString function retrieves information on a specific string in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure. (ANSI)
     * @remarks
     * This function should only be called by the Side-by-side API functions or COM methods. Applications should not directly call this function.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The winbase.h header defines FindActCtxSectionString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} dwFlags Flags that determine how this function is to operate. Only the following flag is currently defined. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX"></a><a id="find_actctx_section_key_return_hactctx"></a><dl>
     * <dt><b>FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function returns the activation context handle where the redirection data was found in the <b>hActCtx</b> member of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure. The caller must use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-releaseactctx">ReleaseActCtx</a> to release this activation context.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} ulSectionId Identifier of the string section of the activation context in which to search for the specific string. 
     * 
     * 
     * 
     * 
     * The following are valid string section identifiers:
     * 
     * <ul>
     * <li>ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION</li>
     * </ul>
     * @param {Pointer<PSTR>} lpStringToFind Pointer to a null-terminated string to be used as the search criteria.
     * @param {Pointer<ACTCTX_SECTION_KEYED_DATA>} ReturnedData Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure to be filled out with the requested string information.
     * @returns {Integer} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-findactctxsectionstringa
     * @since windows5.1.2600
     */
    static FindActCtxSectionStringA(dwFlags, ulSectionId, lpStringToFind, ReturnedData) {
        static lpExtensionGuid := 0 ;Reserved parameters must always be NULL

        A_LastError := 0

        result := DllCall("KERNEL32.dll\FindActCtxSectionStringA", "uint", dwFlags, "ptr", lpExtensionGuid, "uint", ulSectionId, "ptr", lpStringToFind, "ptr", ReturnedData, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The FindActCtxSectionString function retrieves information on a specific string in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure. (Unicode)
     * @remarks
     * This function should only be called by the Side-by-side API functions or COM methods. Applications should not directly call this function.
     * 
     * 
     * 
     * 
     * 
     * > [!NOTE]
     * > The winbase.h header defines FindActCtxSectionString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
     * @param {Integer} dwFlags Flags that determine how this function is to operate. Only the following flag is currently defined. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX"></a><a id="find_actctx_section_key_return_hactctx"></a><dl>
     * <dt><b>FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function returns the activation context handle where the redirection data was found in the <b>hActCtx</b> member of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure. The caller must use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-releaseactctx">ReleaseActCtx</a> to release this activation context.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} ulSectionId Identifier of the string section of the activation context in which to search for the specific string. 
     * 
     * 
     * 
     * 
     * The following are valid string section identifiers:
     * 
     * <ul>
     * <li>ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION</li>
     * </ul>
     * @param {Pointer<PWSTR>} lpStringToFind Pointer to a null-terminated string to be used as the search criteria.
     * @param {Pointer<ACTCTX_SECTION_KEYED_DATA>} ReturnedData Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure to be filled out with the requested string information.
     * @returns {Integer} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-findactctxsectionstringw
     * @since windows5.1.2600
     */
    static FindActCtxSectionStringW(dwFlags, ulSectionId, lpStringToFind, ReturnedData) {
        static lpExtensionGuid := 0 ;Reserved parameters must always be NULL

        A_LastError := 0

        result := DllCall("KERNEL32.dll\FindActCtxSectionStringW", "uint", dwFlags, "ptr", lpExtensionGuid, "uint", ulSectionId, "ptr", lpStringToFind, "ptr", ReturnedData, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The FindActCtxSectionGuid function retrieves information on a specific GUID in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.
     * @remarks
     * This function should only be called by the Side-by-side API functions or COM methods. Applications should not directly call this function.
     * @param {Integer} dwFlags Flags that determine how this function is to operate. Only the following flag is currently defined. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX"></a><a id="find_actctx_section_key_return_hactctx"></a><dl>
     * <dt><b>FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * This function returns the activation context handle where the redirection data was found in the <b>hActCtx</b> member of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure. The caller must use 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-releaseactctx">ReleaseActCtx</a> to release this activation context.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} ulSectionId Identifier of the section of the activation context in which to search for the specified GUID. 
     * 
     * 
     * 
     * 
     * The following are valid GUID section identifiers:
     * 
     * <ul>
     * <li>ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION</li>
     * <li>ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION</li>
     * </ul>
     * The following is a valid GUID section identifier beginning with Windows Server 2003 and Windows XP with SP1:
     * 
     * <ul>
     * <li>ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES</li>
     * </ul>
     * @param {Pointer<Guid>} lpGuidToFind Pointer to a GUID to be used as the search criteria.
     * @param {Pointer<ACTCTX_SECTION_KEYED_DATA>} ReturnedData Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-actctx_section_keyed_data">ACTCTX_SECTION_KEYED_DATA</a> structure to be filled out with the requested GUID information.
     * @returns {Integer} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-findactctxsectionguid
     * @since windows5.1.2600
     */
    static FindActCtxSectionGuid(dwFlags, ulSectionId, lpGuidToFind, ReturnedData) {
        static lpExtensionGuid := 0 ;Reserved parameters must always be NULL

        A_LastError := 0

        result := DllCall("KERNEL32.dll\FindActCtxSectionGuid", "uint", dwFlags, "ptr", lpExtensionGuid, "uint", ulSectionId, "ptr", lpGuidToFind, "ptr", ReturnedData, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The QueryActCtxW function queries the activation context.
     * @remarks
     * The parameter <i>cbBuffer</i> specifies the size in bytes of the buffer pointed to by <i>pvBuffer</i>. If <i>pvBuffer</i> is <b>NULL</b>, then <i>cbBuffer</i> must be 0. The parameter <i>pcbWrittenOrRequired</i> can only be <b>NULL</b> if <i>pvBuffer</i> is <b>NULL</b>. If <i>pcbWrittenOrRequired</i> is non-<b>NULL</b> on return, it is filled with the number of bytes required to store the returned information. When the information data returned is larger than the provided buffer, 
     * <b>QueryActCtxW</b> returns ERROR_INSUFFICIENT_BUFFER and no data is written to the buffer pointed to by <i>pvBuffer</i>.
     * 
     * The following example shows the method of calling first with a small buffer and then recalling if the buffer is too small.
     * 
     * 
     * ``` syntax
     * SIZE_T cbRequired;
     * PVOID pvData = NULL;
     * SIZE_T cbAvailable = 0;
     * 
     * if (!QueryActCtxW(..., pvData, cbAvailable, &amp;cbRequired) &amp;&amp; (GetLastError()== ERROR_INSUFFICIENT_BUFFER))
     * {
     *     // Allocate enough space to store the returned buffer, fail if too small
     *     if (NULL == (pvData = HeapAlloc(GetProcessHeap(), 0, cbRequired)))
     *     {
     *         SetLastError(ERROR_NOT_ENOUGH_MEMORY);
     *         return FALSE;
     *     }
     *     cbAvailable = cbRequired;
     *     // Try again, this should succeed.
     *     if (QueryActCtxW(..., pvData, cbAvailable, &amp;cbRequired))
     *     {
     *         // Use the returned data in pvData
     *     }
     *     HeapFree(GetProcessHeap(), 0, pvData);
     *     pvData = NULL;
     * }
     * ```
     * @param {Integer} dwFlags This parameter should be set to one of the following flag bits. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Flag</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX"></a><a id="query_actctx_flag_use_active_actctx"></a><dl>
     * <dt><b>QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>QueryActCtxW</b> queries the activation context active on the thread instead of the context specified by <i>hActCtx</i>. This is usually the last activation context passed to 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-activateactctx">ActivateActCtx</a>. If 
     * <b>ActivateActCtx</b> has not been called, the active activation context can be the activation context used by the executable of the current process. In other cases, the operating system  determines the active activation context. For example, when the callback function to a new thread is called, the active activation context may be the context that was active when you created the thread by calling <a href="https://docs.microsoft.com/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createthread">CreateThread</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE"></a><a id="query_actctx_flag_actctx_is_hmodule"></a><dl>
     * <dt><b>QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>QueryActCtxW</b> interprets <i>hActCtx</i> as an <b>HMODULE</b> data type and queries an activation context that is associated with a DLL or EXE. 
     * 
     * 
     * 
     * 
     * When a DLL or EXE is loaded, the loader checks for a manifest stored in a resource. If the loader finds an RT_MANIFEST resource with a resource identifier set to ISOLATIONAWARE_MANIFEST_ RESOURCE_ID, the loader associates the resulting activation context with the DLL or EXE. This is the activation context that 
     * <b>QueryActCtxW</b> queries when the QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE flag has been set.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS"></a><a id="query_actctx_flag_actctx_is_address"></a><dl>
     * <dt><b>QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * <b>QueryActCtxW</b> interprets <i>hActCtx</i> as an address within a DLL or EXE and queries an activation context that has been associated with the DLL or EXE. This can be any address within the DLL or EXE. For example, the address of any function within a DLL or EXE or the address of any static data, such as a constant string. 
     * 
     * 
     * 
     * 
     * When a DLL or EXE is loaded, the loader checks for a manifest stored in a resource in the same way as QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<HANDLE>} hActCtx Handle to the activation context that is being queried.
     * @param {Pointer<Void>} pvSubInstance Index of the assembly, or assembly and file combination, in the activation context. The meaning of the <i>pvSubInstance</i> depends on the option specified by the value of the <i>ulInfoClass</i> parameter. 
     * 
     *  This parameter may be null.
     * 
     * <table>
     * <tr>
     * <th>ulInfoClass Option</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="AssemblyDetailedInformationInActivationContext"></a><a id="assemblydetailedinformationinactivationcontext"></a><a id="ASSEMBLYDETAILEDINFORMATIONINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>AssemblyDetailedInformationInActivationContext</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Pointer to a <b>DWORD</b> that specifies the index of the assembly within the activation context. This is the activation context that 
     * <b>QueryActCtxW</b> queries.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="FileInformationInAssemblyOfAssemblyInActivationContext"></a><a id="fileinformationinassemblyofassemblyinactivationcontext"></a><a id="FILEINFORMATIONINASSEMBLYOFASSEMBLYINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>FileInformationInAssemblyOfAssemblyInActivationContext</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Pointer to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-activation_context_query_index">ACTIVATION_CONTEXT_QUERY_INDEX</a> structure. If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the returned buffer contains information for a file in the assembly. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-assembly_file_detailed_information">ASSEMBLY_FILE_DETAILED_INFORMATION</a> structure.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Integer} ulInfoClass This parameter can have only the values shown in the following table. 
     * 
     * 
     * 
     * <table>
     * <tr>
     * <th>Option</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ActivationContextBasicInformation"></a><a id="activationcontextbasicinformation"></a><a id="ACTIVATIONCONTEXTBASICINFORMATION"></a><dl>
     * <dt><b>ActivationContextBasicInformation</b></dt>
     * <dt>1</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Not available.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="ActivationContextDetailedInformation"></a><a id="activationcontextdetailedinformation"></a><a id="ACTIVATIONCONTEXTDETAILEDINFORMATION"></a><dl>
     * <dt><b>ActivationContextDetailedInformation</b></dt>
     * <dt>2</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the returned buffer contains detailed information about the activation context. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-activation_context_detailed_information">ACTIVATION_CONTEXT_DETAILED_INFORMATION</a> structure.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="AssemblyDetailedInformationInActivationContext"></a><a id="assemblydetailedinformationinactivationcontext"></a><a id="ASSEMBLYDETAILEDINFORMATIONINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>AssemblyDetailedInformationInActivationContext</b></dt>
     * <dt>3</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the buffer contains information about the assembly that has the index specified in <i>pvSubInstance</i>. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-activation_context_assembly_detailed_information">ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION</a> structure.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="FileInformationInAssemblyOfAssemblyInActivationContext"></a><a id="fileinformationinassemblyofassemblyinactivationcontext"></a><a id="FILEINFORMATIONINASSEMBLYOFASSEMBLYINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>FileInformationInAssemblyOfAssemblyInActivationContext</b></dt>
     * <dt>4</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Information about a file in one of the assemblies in Activation Context. The <i>pvSubInstance</i> parameter must point to an 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-activation_context_query_index">ACTIVATION_CONTEXT_QUERY_INDEX</a> structure. If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the returned buffer contains information for a file in the assembly. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-assembly_file_detailed_information">ASSEMBLY_FILE_DETAILED_INFORMATION</a> structure.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="RunlevelInformationInActivationContext"></a><a id="runlevelinformationinactivationcontext"></a><a id="RUNLEVELINFORMATIONINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>RunlevelInformationInActivationContext</b></dt>
     * <dt>5</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the buffer contains information about requested run level of the activation context. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-activation_context_run_level_information">ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION</a> structure.
     * 
     * <b>Windows Server 2003 and Windows XP:  </b>This value is not available.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="CompatibilityInformationInActivationContext"></a><a id="compatibilityinformationinactivationcontext"></a><a id="COMPATIBILITYINFORMATIONINACTIVATIONCONTEXT"></a><dl>
     * <dt><b>CompatibilityInformationInActivationContext</b></dt>
     * <dt>6</dt>
     * </dl>
     * </td>
     * <td width="60%">
     * If 
     * <b>QueryActCtxW</b> is called with this option and the function succeeds, the buffer contains information about requested compatibility context. This information is in the form of the 
     * <a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-activation_context_compatibility_information">ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION</a> structure.
     * 
     * <b>Windows Server 2008 and earlier, and Windows Vista and earlier:  </b>This value is not available. This option is available beginning with Windows Server 2008 R2 and Windows 7.
     * 
     * </td>
     * </tr>
     * </table>
     * @param {Pointer<Void>} pvBuffer Pointer to a buffer that holds the returned information. This parameter is optional. If <i>pvBuffer</i> is <b>null</b>, then <i>cbBuffer</i> must be zero. If the size of the buffer pointed to by <i>pvBuffer</i> is too small, 
     * <b>QueryActCtxW</b> returns ERROR_INSUFFICIENT_BUFFER and no data is written into the buffer. See the Remarks section for the method you can use to determine the required size of the buffer.
     * @param {Pointer} cbBuffer Size of the buffer in bytes pointed to by <i>pvBuffer</i>. This parameter is optional.
     * @param {Pointer<UIntPtr>} pcbWrittenOrRequired Number of bytes written or required. The parameter <i>pcbWrittenOrRequired</i> can only be <b>NULL</b> when <i>pvBuffer</i> is <b>NULL</b>. If <i>pcbWrittenOrRequired</i> is non-<b>NULL</b>, it is filled with the number of bytes required to store the returned buffer.
     * @returns {Integer} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-queryactctxw
     * @since windows5.1.2600
     */
    static QueryActCtxW(dwFlags, hActCtx, pvSubInstance, ulInfoClass, pvBuffer, cbBuffer, pcbWrittenOrRequired) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\QueryActCtxW", "uint", dwFlags, "ptr", hActCtx, "ptr", pvSubInstance, "uint", ulInfoClass, "ptr", pvBuffer, "ptr", cbBuffer, "ptr", pcbWrittenOrRequired, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

    /**
     * The QueryActCtxSettingsW function specifies the activation context, and the namespace and name of the attribute that is to be queried.
     * @param {Integer} dwFlags This value must be 0.
     * @param {Pointer<HANDLE>} hActCtx A handle to the activation context that is being queried.
     * @param {Pointer<PWSTR>} settingsNameSpace A pointer to a string that contains the value <b>"http://schemas.microsoft.com/SMI/2005/WindowsSettings"</b> or <b>NULL</b>. These values are equivalent.
     * 
     * 
     * <b>Windows 8 and Windows Server 2012:  </b>A pointer to a string that contains the value <b>"http://schemas.microsoft.com/SMI/2011/WindowsSettings"</b> is also a valid parameter.  A <b>NULL</b> is still equivalent to the previous value.
     * @param {Pointer<PWSTR>} settingName The name of the attribute to be queried.
     * @param {Pointer<PWSTR>} pvBuffer A pointer to the buffer that receives the query result.
     * @param {Pointer} dwBuffer The size of the buffer  in characters that receives the query result.
     * @param {Pointer<UIntPtr>} pdwWrittenOrRequired A pointer to a value which is the number of characters written to the buffer specified by <i>pvBuffer</i> or that is required to hold the query result.
     * @returns {Integer} If the function succeeds, it returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>.
     * 
     * This function sets errors that can be retrieved by calling 
     * <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. For an example, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/retrieving-the-last-error-code">Retrieving the Last-Error Code</a>. For a complete list of error codes, see 
     * <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System Error Codes</a>.
     * @see https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-queryactctxsettingsw
     * @since windows6.0.6000
     */
    static QueryActCtxSettingsW(dwFlags, hActCtx, settingsNameSpace, settingName, pvBuffer, dwBuffer, pdwWrittenOrRequired) {
        A_LastError := 0

        result := DllCall("KERNEL32.dll\QueryActCtxSettingsW", "uint", dwFlags, "ptr", hActCtx, "ptr", settingsNameSpace, "ptr", settingName, "ptr", pvBuffer, "ptr", dwBuffer, "ptr", pdwWrittenOrRequired, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

;@endregion Methods
}
