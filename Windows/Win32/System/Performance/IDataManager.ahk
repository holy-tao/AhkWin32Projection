#Requires AutoHotkey v2.0.0 64-bit
#Include ..\..\..\..\Win32ComInterface.ahk
#Include ..\..\..\..\Guid.ahk
#Include ..\..\Foundation\BSTR.ahk
#Include ..\Com\IDispatch.ahk

/**
 * Manages data generated by the data collectors, including report generation, data retention policy, and data transfer.To get this interface, access the IDataCollectorSet::DataManager property.
 * @remarks
 * 
  * For an example that shows the XML that you can use to initialize this object if you call the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/pla/nf-pla-idatacollectorset-setxml">IDataCollectorSet::SetXml</a> method, see the Remarks section of <a href="https://docs.microsoft.com/previous-versions/windows/desktop/api/pla/nn-pla-idatacollectorset">IDataCollectorSet</a>.  When you specify the XML to create the object, you can specify only the elements for the properties that you want to set. If you do not specify a property, PLA provides a default value. When you retrieve the XML for the set, the XML includes all elements.
  * 
 * @see https://docs.microsoft.com/windows/win32/api//pla/nn-pla-idatamanager
 * @namespace Windows.Win32.System.Performance
 * @version v4.0.30319
 */
class IDataManager extends IDispatch{

    static sizeof => A_PtrSize
    /**
     * The interface identifier for IDataManager
     * @type {Guid}
     */
    static IID => Guid("{03837541-098b-11d8-9414-505054503030}")

    /**
     * The offset into the COM object's virtual function table at which this interface's methods begin.
     * @type {Integer}
     */
    static vTableOffset => 7

    /**
     * @readonly used when implementing interfaces to order function pointers
     * @type {Array<String>}
     */
    static VTableNames => ["get_Enabled", "put_Enabled", "get_CheckBeforeRunning", "put_CheckBeforeRunning", "get_MinFreeDisk", "put_MinFreeDisk", "get_MaxSize", "put_MaxSize", "get_MaxFolderCount", "put_MaxFolderCount", "get_ResourcePolicy", "put_ResourcePolicy", "get_FolderActions", "get_ReportSchema", "put_ReportSchema", "get_ReportFileName", "put_ReportFileName", "get_RuleTargetFileName", "put_RuleTargetFileName", "get_EventsFileName", "put_EventsFileName", "get_Rules", "put_Rules", "Run", "Extract"]

    /**
     * 
     * @param {Pointer<VARIANT_BOOL>} pfEnabled 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_enabled
     */
    get_Enabled(pfEnabled) {
        result := ComCall(7, this, "ptr", pfEnabled, "HRESULT")
        return result
    }

    /**
     * 
     * @param {VARIANT_BOOL} fEnabled 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-put_enabled
     */
    put_Enabled(fEnabled) {
        result := ComCall(8, this, "short", fEnabled, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<VARIANT_BOOL>} pfCheck 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_checkbeforerunning
     */
    get_CheckBeforeRunning(pfCheck) {
        result := ComCall(9, this, "ptr", pfCheck, "HRESULT")
        return result
    }

    /**
     * 
     * @param {VARIANT_BOOL} fCheck 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-put_checkbeforerunning
     */
    put_CheckBeforeRunning(fCheck) {
        result := ComCall(10, this, "short", fCheck, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<Integer>} MinFreeDisk 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_minfreedisk
     */
    get_MinFreeDisk(MinFreeDisk) {
        MinFreeDiskMarshal := MinFreeDisk is VarRef ? "uint*" : "ptr"

        result := ComCall(11, this, MinFreeDiskMarshal, MinFreeDisk, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Integer} MinFreeDisk 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-put_minfreedisk
     */
    put_MinFreeDisk(MinFreeDisk) {
        result := ComCall(12, this, "uint", MinFreeDisk, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<Integer>} pulMaxSize 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_maxsize
     */
    get_MaxSize(pulMaxSize) {
        pulMaxSizeMarshal := pulMaxSize is VarRef ? "uint*" : "ptr"

        result := ComCall(13, this, pulMaxSizeMarshal, pulMaxSize, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Integer} ulMaxSize 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-put_maxsize
     */
    put_MaxSize(ulMaxSize) {
        result := ComCall(14, this, "uint", ulMaxSize, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<Integer>} pulMaxFolderCount 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_maxfoldercount
     */
    get_MaxFolderCount(pulMaxFolderCount) {
        pulMaxFolderCountMarshal := pulMaxFolderCount is VarRef ? "uint*" : "ptr"

        result := ComCall(15, this, pulMaxFolderCountMarshal, pulMaxFolderCount, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Integer} ulMaxFolderCount 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-put_maxfoldercount
     */
    put_MaxFolderCount(ulMaxFolderCount) {
        result := ComCall(16, this, "uint", ulMaxFolderCount, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<Integer>} pPolicy 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_resourcepolicy
     */
    get_ResourcePolicy(pPolicy) {
        pPolicyMarshal := pPolicy is VarRef ? "int*" : "ptr"

        result := ComCall(17, this, pPolicyMarshal, pPolicy, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Integer} Policy 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-put_resourcepolicy
     */
    put_ResourcePolicy(Policy) {
        result := ComCall(18, this, "int", Policy, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<IFolderActionCollection>} Actions 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_folderactions
     */
    get_FolderActions(Actions) {
        result := ComCall(19, this, "ptr*", Actions, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<BSTR>} ReportSchema 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_reportschema
     */
    get_ReportSchema(ReportSchema) {
        result := ComCall(20, this, "ptr", ReportSchema, "HRESULT")
        return result
    }

    /**
     * 
     * @param {BSTR} ReportSchema 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-put_reportschema
     */
    put_ReportSchema(ReportSchema) {
        ReportSchema := ReportSchema is String ? BSTR.Alloc(ReportSchema).Value : ReportSchema

        result := ComCall(21, this, "ptr", ReportSchema, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<BSTR>} pbstrFilename 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_reportfilename
     */
    get_ReportFileName(pbstrFilename) {
        result := ComCall(22, this, "ptr", pbstrFilename, "HRESULT")
        return result
    }

    /**
     * 
     * @param {BSTR} pbstrFilename 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-put_reportfilename
     */
    put_ReportFileName(pbstrFilename) {
        pbstrFilename := pbstrFilename is String ? BSTR.Alloc(pbstrFilename).Value : pbstrFilename

        result := ComCall(23, this, "ptr", pbstrFilename, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<BSTR>} Filename 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_ruletargetfilename
     */
    get_RuleTargetFileName(Filename) {
        result := ComCall(24, this, "ptr", Filename, "HRESULT")
        return result
    }

    /**
     * 
     * @param {BSTR} Filename 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-put_ruletargetfilename
     */
    put_RuleTargetFileName(Filename) {
        Filename := Filename is String ? BSTR.Alloc(Filename).Value : Filename

        result := ComCall(25, this, "ptr", Filename, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<BSTR>} pbstrFilename 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_eventsfilename
     */
    get_EventsFileName(pbstrFilename) {
        result := ComCall(26, this, "ptr", pbstrFilename, "HRESULT")
        return result
    }

    /**
     * 
     * @param {BSTR} pbstrFilename 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-put_eventsfilename
     */
    put_EventsFileName(pbstrFilename) {
        pbstrFilename := pbstrFilename is String ? BSTR.Alloc(pbstrFilename).Value : pbstrFilename

        result := ComCall(27, this, "ptr", pbstrFilename, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Pointer<BSTR>} pbstrXml 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-get_rules
     */
    get_Rules(pbstrXml) {
        result := ComCall(28, this, "ptr", pbstrXml, "HRESULT")
        return result
    }

    /**
     * 
     * @param {BSTR} bstrXml 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-put_rules
     */
    put_Rules(bstrXml) {
        bstrXml := bstrXml is String ? BSTR.Alloc(bstrXml).Value : bstrXml

        result := ComCall(29, this, "ptr", bstrXml, "HRESULT")
        return result
    }

    /**
     * 
     * @param {Integer} Steps 
     * @param {BSTR} bstrFolder 
     * @param {Pointer<IValueMap>} Errors 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-run
     */
    Run(Steps, bstrFolder, Errors) {
        bstrFolder := bstrFolder is String ? BSTR.Alloc(bstrFolder).Value : bstrFolder

        result := ComCall(30, this, "int", Steps, "ptr", bstrFolder, "ptr*", Errors, "HRESULT")
        return result
    }

    /**
     * 
     * @param {BSTR} CabFilename 
     * @param {BSTR} DestinationPath 
     * @returns {HRESULT} 
     * @see https://learn.microsoft.com/windows/win32/api/pla/nf-pla-idatamanager-extract
     */
    Extract(CabFilename, DestinationPath) {
        CabFilename := CabFilename is String ? BSTR.Alloc(CabFilename).Value : CabFilename
        DestinationPath := DestinationPath is String ? BSTR.Alloc(DestinationPath).Value : DestinationPath

        result := ComCall(31, this, "ptr", CabFilename, "ptr", DestinationPath, "HRESULT")
        return result
    }
}
