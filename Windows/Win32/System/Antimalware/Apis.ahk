#Requires AutoHotkey v2.0.0 64-bit
#Include ..\..\..\..\Win32Handle.ahk
/**
 * @namespace Windows.Win32.System.Antimalware
 * @version v4.0.30319
 */
class Antimalware {

;@region Constants
;@endregion Constants

;@region Methods
    /**
     * Initialize the AMSI API.
     * @param {PWSTR} appName The name, version, or GUID string of the app calling the AMSI API.
     * @param {Pointer<HAMSICONTEXT>} amsiContext A handle of type HAMSICONTEXT that must be passed to all subsequent calls to the AMSI API.
     * @returns {HRESULT} If this function succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns:loc="http://microsoft.com/wdcml/l10n">HRESULT</b> error code.
     * @see https://docs.microsoft.com/windows/win32/api//amsi/nf-amsi-amsiinitialize
     * @since windows10.0.10240
     */
    static AmsiInitialize(appName, amsiContext) {
        appName := appName is String ? StrPtr(appName) : appName

        result := DllCall("Amsi.dll\AmsiInitialize", "ptr", appName, "ptr", amsiContext, "int")
        if(result != 0)
            throw OSError(result)

        return result
    }

    /**
     * Remove the instance of the AMSI API that was originally opened by AmsiInitialize.
     * @param {HAMSICONTEXT} amsiContext The handle of type HAMSICONTEXT that was initially received from <a href="https://docs.microsoft.com/windows/desktop/api/amsi/nf-amsi-amsiinitialize">AmsiInitialize</a>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://docs.microsoft.com/windows/win32/api//amsi/nf-amsi-amsiuninitialize
     * @since windows10.0.10240
     */
    static AmsiUninitialize(amsiContext) {
        amsiContext := amsiContext is Win32Handle ? NumGet(amsiContext, "ptr") : amsiContext

        DllCall("Amsi.dll\AmsiUninitialize", "ptr", amsiContext)
    }

    /**
     * Opens a session within which multiple scan requests can be correlated.
     * @param {HAMSICONTEXT} amsiContext The handle of type HAMSICONTEXT that was initially received from <a href="https://docs.microsoft.com/windows/desktop/api/amsi/nf-amsi-amsiinitialize">AmsiInitialize</a>.
     * @param {Pointer<HAMSISESSION>} amsiSession A handle of type HAMSISESSION that must be passed to all subsequent calls to the AMSI API within the session.
     * @returns {HRESULT} If this function succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns:loc="http://microsoft.com/wdcml/l10n">HRESULT</b> error code.
     * @see https://docs.microsoft.com/windows/win32/api//amsi/nf-amsi-amsiopensession
     * @since windows10.0.10240
     */
    static AmsiOpenSession(amsiContext, amsiSession) {
        amsiContext := amsiContext is Win32Handle ? NumGet(amsiContext, "ptr") : amsiContext

        result := DllCall("Amsi.dll\AmsiOpenSession", "ptr", amsiContext, "ptr", amsiSession, "int")
        if(result != 0)
            throw OSError(result)

        return result
    }

    /**
     * Close a session that was opened by AmsiOpenSession.
     * @param {HAMSICONTEXT} amsiContext The handle of type HAMSICONTEXT that was initially received from <a href="https://docs.microsoft.com/windows/desktop/api/amsi/nf-amsi-amsiinitialize">AmsiInitialize</a>.
     * @param {HAMSISESSION} amsiSession The handle of type HAMSISESSION that was initially received from <a href="https://docs.microsoft.com/windows/desktop/api/amsi/nf-amsi-amsiopensession">AmsiOpenSession</a>.
     * @returns {String} Nothing - always returns an empty string
     * @see https://docs.microsoft.com/windows/win32/api//amsi/nf-amsi-amsiclosesession
     * @since windows10.0.10240
     */
    static AmsiCloseSession(amsiContext, amsiSession) {
        amsiContext := amsiContext is Win32Handle ? NumGet(amsiContext, "ptr") : amsiContext
        amsiSession := amsiSession is Win32Handle ? NumGet(amsiSession, "ptr") : amsiSession

        DllCall("Amsi.dll\AmsiCloseSession", "ptr", amsiContext, "ptr", amsiSession)
    }

    /**
     * Scans a buffer-full of content for malware.
     * @param {HAMSICONTEXT} amsiContext The handle of type HAMSICONTEXT that was initially received from <a href="https://docs.microsoft.com/windows/desktop/api/amsi/nf-amsi-amsiinitialize">AmsiInitialize</a>.
     * @param {Pointer} buffer The buffer from which to read the data to be scanned.
     * @param {Integer} length The length, in bytes, of the data to be read from <i>buffer</i>.
     * @param {PWSTR} contentName The filename, URL, unique script ID, or similar of the content being scanned.
     * @param {HAMSISESSION} amsiSession If multiple scan requests are to be correlated within a session, set <i>session</i> to the handle of type HAMSISESSION that was initially received from <a href="https://docs.microsoft.com/windows/desktop/api/amsi/nf-amsi-amsiopensession">AmsiOpenSession</a>. Otherwise, set <i>session</i> to <b>nullptr</b>.
     * @param {Pointer<Int32>} result The result of the scan. See <a href="https://docs.microsoft.com/windows/desktop/api/amsi/ne-amsi-amsi_result">AMSI_RESULT</a>.
     * 
     * An app should use <a href="https://docs.microsoft.com/windows/desktop/api/amsi/nf-amsi-amsiresultismalware">AmsiResultIsMalware</a> to determine whether the content should be blocked.
     * @returns {HRESULT} If this function succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns:loc="http://microsoft.com/wdcml/l10n">HRESULT</b> error code.
     * @see https://docs.microsoft.com/windows/win32/api//amsi/nf-amsi-amsiscanbuffer
     * @since windows10.0.10240
     */
    static AmsiScanBuffer(amsiContext, buffer, length, contentName, amsiSession, result) {
        contentName := contentName is String ? StrPtr(contentName) : contentName
        amsiContext := amsiContext is Win32Handle ? NumGet(amsiContext, "ptr") : amsiContext
        amsiSession := amsiSession is Win32Handle ? NumGet(amsiSession, "ptr") : amsiSession

        result := DllCall("Amsi.dll\AmsiScanBuffer", "ptr", amsiContext, "ptr", buffer, "uint", length, "ptr", contentName, "ptr", amsiSession, "int*", result, "int")
        if(result != 0)
            throw OSError(result)

        return result
    }

    /**
     * Sends to the antimalware provider a notification of an arbitrary operation.
     * @param {HAMSICONTEXT} amsiContext Type: \_In\_ **HAMSICONTEXT**
     * 
     * The handle (of type **HAMSICONTEXT**) that was initially received from [AmsiInitialize](./nf-amsi-amsiinitialize.md).
     * @param {Pointer} buffer Type: \_In\_reads\_bytes\_(length) **[PVOID](/windows/win32/winprog/windows-data-types)**
     * 
     * The buffer that contains the notification data.
     * @param {Integer} length Type: \_In\_ **[ULONG](/windows/win32/winprog/windows-data-types)**
     * 
     * The length, in bytes, of the data to be read from *buffer*.
     * @param {PWSTR} contentName Type: \_In\_opt\_ **[LPCWSTR](/windows/win32/winprog/windows-data-types)**
     * 
     * The filename, URL, unique script ID, or similar of the content being scanned.
     * @param {Pointer<Int32>} result Type: \_Out\_ **[AMSI_RESULT](/windows/win32/api/amsi/ne-amsi-amsi_result)\***
     * 
     * The result of the scan.
     * 
     * You should use [AmsiResultIsMalware](/windows/win32/api/amsi/nf-amsi-amsiresultismalware) to determine whether the content should be blocked.
     * @returns {HRESULT} If this function succeeds, it returns **S_OK**. Otherwise, it returns an **HRESULT** error code.
     * @see https://docs.microsoft.com/windows/win32/api//amsi/nf-amsi-amsinotifyoperation
     */
    static AmsiNotifyOperation(amsiContext, buffer, length, contentName, result) {
        contentName := contentName is String ? StrPtr(contentName) : contentName
        amsiContext := amsiContext is Win32Handle ? NumGet(amsiContext, "ptr") : amsiContext

        result := DllCall("Amsi.dll\AmsiNotifyOperation", "ptr", amsiContext, "ptr", buffer, "uint", length, "ptr", contentName, "int*", result, "int")
        if(result != 0)
            throw OSError(result)

        return result
    }

    /**
     * Scans a string for malware.
     * @param {HAMSICONTEXT} amsiContext The handle of type HAMSICONTEXT that was initially received from <a href="https://docs.microsoft.com/windows/desktop/api/amsi/nf-amsi-amsiinitialize">AmsiInitialize</a>.
     * @param {PWSTR} string The string to be scanned.
     * @param {PWSTR} contentName The filename, URL, unique script ID, or similar of the content being scanned.
     * @param {HAMSISESSION} amsiSession If multiple scan requests are to be correlated within a session, set <i>session</i> to the handle of type HAMSISESSION that was initially received from <a href="https://docs.microsoft.com/windows/desktop/api/amsi/nf-amsi-amsiopensession">AmsiOpenSession</a>. Otherwise, set <i>session</i> to <b>nullptr</b>.
     * @param {Pointer<Int32>} result The result of the scan. See <a href="https://docs.microsoft.com/windows/desktop/api/amsi/ne-amsi-amsi_result">AMSI_RESULT</a>.
     * 
     * An app should use <a href="https://docs.microsoft.com/windows/desktop/api/amsi/nf-amsi-amsiresultismalware">AmsiResultIsMalware</a> to determine whether the content should be blocked.
     * @returns {HRESULT} If this function succeeds, it returns <b xmlns:loc="http://microsoft.com/wdcml/l10n">S_OK</b>. Otherwise, it returns an <b xmlns:loc="http://microsoft.com/wdcml/l10n">HRESULT</b> error code.
     * @see https://docs.microsoft.com/windows/win32/api//amsi/nf-amsi-amsiscanstring
     * @since windows10.0.10240
     */
    static AmsiScanString(amsiContext, string, contentName, amsiSession, result) {
        string := string is String ? StrPtr(string) : string
        contentName := contentName is String ? StrPtr(contentName) : contentName
        amsiContext := amsiContext is Win32Handle ? NumGet(amsiContext, "ptr") : amsiContext
        amsiSession := amsiSession is Win32Handle ? NumGet(amsiSession, "ptr") : amsiSession

        result := DllCall("Amsi.dll\AmsiScanString", "ptr", amsiContext, "ptr", string, "ptr", contentName, "ptr", amsiSession, "int*", result, "int")
        if(result != 0)
            throw OSError(result)

        return result
    }

    /**
     * Installs the certificate information specified in the resource file, which is linked into the ELAM driver at build time.
     * @param {HANDLE} ELAMFile A handle to an ELAM driver file which contains the resource file with the certificate information. The handle 
     *        to the ELAM driver file must be opened for read access only and must not be shared for write access.
     * @returns {BOOL} If the function succeeds, the return value is TRUE.
     * 
     * If the function fails, the return value is FALSE. To get extended error information, call 
     *        <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.
     * @see https://docs.microsoft.com/windows/win32/api//sysinfoapi/nf-sysinfoapi-installelamcertificateinfo
     * @since windows8.1
     */
    static InstallELAMCertificateInfo(ELAMFile) {
        ELAMFile := ELAMFile is Win32Handle ? NumGet(ELAMFile, "ptr") : ELAMFile

        A_LastError := 0

        result := DllCall("KERNEL32.dll\InstallELAMCertificateInfo", "ptr", ELAMFile, "int")
        if(A_LastError)
            throw OSError()

        return result
    }

;@endregion Methods
}
