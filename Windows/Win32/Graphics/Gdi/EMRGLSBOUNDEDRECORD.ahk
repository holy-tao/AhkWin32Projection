#Requires AutoHotkey v2.0.0 64-bit
#Include ..\..\..\..\Win32Struct.ahk
#Include .\EMR.ahk
#Include ..\..\Foundation\RECTL.ahk

/**
 * The EMRGLSBOUNDEDRECORD structure contains members for an enhanced metafile record generated by OpenGL functions. It contains data for OpenGL functions with information in pixel units that must be scaled when playing the metafile.
 * @remarks
 * 
  * The coordinates in <b>rclBounds</b> are in OpenGL pixel coordinates, which generally equate to window coordinates. 
  * 		For example, if the <a href="https://docs.microsoft.com/windows/desktop/OpenGL/glbitmap">glBitmap</a> function has width1 and height1, the bounds will be 0, 0, width1, height1.
  * 
  * 
 * @see https://docs.microsoft.com/windows/win32/api//wingdi/ns-wingdi-emrglsboundedrecord
 * @namespace Windows.Win32.Graphics.Gdi
 * @version v4.0.30319
 */
class EMRGLSBOUNDEDRECORD extends Win32Struct
{
    static sizeof => 32

    static packingSize => 8

    /**
     * The base structure for all record types.
     * @type {EMR}
     */
    emr{
        get {
            if(!this.HasProp("__emr"))
                this.__emr := EMR(0, this)
            return this.__emr
        }
    }

    /**
     * Bounds of the rectangle, in device coordinates, within which to perform the OpenGL function. For more information, see Remarks.
     * @type {RECTL}
     */
    rclBounds{
        get {
            if(!this.HasProp("__rclBounds"))
                this.__rclBounds := RECTL(8, this)
            return this.__rclBounds
        }
    }

    /**
     * Size of <i>Data</i>, in bytes.
     * @type {Integer}
     */
    cbData {
        get => NumGet(this, 24, "uint")
        set => NumPut("uint", value, this, 24)
    }

    /**
     * Array of data representing the OpenGL function to be performed.
     * @type {Array<Byte>}
     */
    Data{
        get {
            if(!this.HasProp("__DataProxyArray"))
                this.__DataProxyArray := Win32FixedArray(this.ptr + 28, 1, Primitive, "char")
            return this.__DataProxyArray
        }
    }
}
