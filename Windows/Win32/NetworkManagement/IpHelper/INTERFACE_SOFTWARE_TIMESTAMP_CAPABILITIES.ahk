#Requires AutoHotkey v2.0.0 64-bit
#Include ..\..\..\..\Win32Struct.ahk

/**
 * Describes the software timestamping capabilities of a NIC's miniport driver.
 * @remarks
 * 
  * All of the **INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES** structure's members represent software timestamp capabilities. The software timestamp generated by the NIC driver corresponds to a counter value obtained by calling [**QueryPerformanceCounter**](/windows/win32/api/profileapi/nf-profileapi-queryperformancecounter).
  * 
  * Having both hardware and software timestamps enabled together isn't supported.
  * 
  * 
 * @see https://docs.microsoft.com/windows/win32/api//iphlpapi/ns-iphlpapi-interface_software_timestamp_capabilities
 * @namespace Windows.Win32.NetworkManagement.IpHelper
 * @version v4.0.30319
 */
class INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES extends Win32Struct
{
    static sizeof => 3

    static packingSize => 1

    /**
     * Type: **[BOOLEAN](/windows/win32/winprog/windows-data-types)**
     * 
     * Also contains members that describe the software timestamping capabilities of a NIC's miniport driver.
     * Not a hardware capability. **TRUE** indicates that the NIC's miniport driver can generate a software timestamp for all received packets. A value of **FALSE** indicates that the software is not capable of this.
     * @type {BOOLEAN}
     */
    AllReceive {
        get => NumGet(this, 0, "char")
        set => NumPut("char", value, this, 0)
    }

    /**
     * Type: **[BOOLEAN](/windows/win32/winprog/windows-data-types)**
     * 
     * Not a hardware capability. Analogous to *AllReceiveSw*, except it applies to the transmit direction. **TRUE** indicates that the NIC's miniport driver can generate a software timestamp for all transmitted packets. A value of **FALSE** indicates that the software is not capable of this.
     * @type {BOOLEAN}
     */
    AllTransmit {
        get => NumGet(this, 1, "char")
        set => NumPut("char", value, this, 1)
    }

    /**
     * Type: **[BOOLEAN](/windows/win32/winprog/windows-data-types)**
     * 
     * Not a hardware capability. **TRUE** indicates that the NIC's miniport driver can generate a software timestamp for any specific transmitted packet when indicated to do so by the application. A value of **FALSE** indicates that the software is not capable of this.
     * See [**TIMESTAMPING_CONFIG**](/windows/win32/api/mstcpip/ns-mstcpip-timestamping_config) (and **TIMESTAMPING_FLAG_TX**) to determine how to request a timestamp when sending UDP packets through [Windows Sockets](/windows/win32/winsock/windows-sockets-start-page-2).
     * @type {BOOLEAN}
     */
    TaggedTransmit {
        get => NumGet(this, 2, "char")
        set => NumPut("char", value, this, 2)
    }
}
