#Requires AutoHotkey v2.0.0 64-bit
#Include ..\..\..\..\Win32Struct.ahk

/**
 * The DNS_TSIG_DATA structure represents a secret key transaction authentication (TSIG) resource record (RR) as specified in RFC 2845 and RFC 3645. (Unicode)
 * @remarks
 * The 
  * <b>DNS_TSIG_DATA</b> structure is used in conjunction with the 
  * <a href="https://docs.microsoft.com/windows/win32/api/windns/ns-windns-dns_recorda">DNS_RECORD</a> structure to programmatically manage DNS entries.
  * 
  * 
  * 
  * 
  * 
  * > [!NOTE]
  * > The windns.h header defines DNS_TSIG_DATA as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).
 * @see https://learn.microsoft.com/windows/win32/api/windns/ns-windns-dns_tsig_dataw
 * @namespace Windows.Win32.NetworkManagement.Dns
 * @version v4.0.30319
 * @charset Unicode
 */
class DNS_TSIG_DATAW extends Win32Struct
{
    static sizeof => 56

    static packingSize => 8

    /**
     * A pointer to a string that represents the name of the key used to generate <b>pSignature</b> as defined in section 2.3 of <a href="https://www.ietf.org/rfc/rfc2845.txt">RFC 2845</a>.
     * @type {Pointer<PWSTR>}
     */
    pNameAlgorithm {
        get => NumGet(this, 0, "ptr")
        set => NumPut("ptr", value, this, 0)
    }

    /**
     * A pointer to a string that represents the name of the   algorithm used to generate <b>pSignature</b> as defined in section 2.3 of <a href="https://www.ietf.org/rfc/rfc2845.txt">RFC 2845</a>.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="gss.microsoft.com"></a><a id="GSS.MICROSOFT.COM"></a><dl>
     * <dt><b>"gss.microsoft.com"</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * WindowsÂ 2000 Server only: Generic Security Service Algorithm for
     *         Secret Key Transaction Authentication for DNS (GSS-API) as defined in <a href="https://www.ietf.org/rfc/rfc3645.txt">RFC 3645</a>.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="gss-tsig"></a><a id="GSS-TSIG"></a><dl>
     * <dt><b>"gss-tsig"</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * Generic Security Service Algorithm for
     *         Secret Key Transaction Authentication for DNS (GSS-API) as defined in <a href="https://www.ietf.org/rfc/rfc3645.txt">RFC 3645</a>.
     * 
     * </td>
     * </tr>
     * </table>
     * @type {Pointer<Byte>}
     */
    pAlgorithmPacket {
        get => NumGet(this, 8, "ptr")
        set => NumPut("ptr", value, this, 8)
    }

    /**
     * A pointer to the Message
     *    Authentication Code (MAC) generated by the algorithm in <b>pAlgorithmPacket</b>. The length, in bytes, and composition of <b>pSignature</b> are determined by <b>pAlgorithmPacket</b>.
     * @type {Pointer<Byte>}
     */
    pSignature {
        get => NumGet(this, 16, "ptr")
        set => NumPut("ptr", value, this, 16)
    }

    /**
     * If <b>wError</b> contains the RCODE, <b>BADTIME</b>, <b>pOtherData</b> is a  BYTE array that contains the server's current time, otherwise it is <b>NULL</b>. Time is expressed in seconds since the beginning of January 1, 1970, Greenwich Mean Time (GMT), excluding leap seconds.
     * @type {Pointer<Byte>}
     */
    pOtherData {
        get => NumGet(this, 24, "ptr")
        set => NumPut("ptr", value, this, 24)
    }

    /**
     * The time <b>pSignature</b> was generated, expressed in seconds since the beginning of January 1, 1970, Greenwich Mean Time (GMT), excluding leap seconds.
     * @type {Integer}
     */
    i64CreateTime {
        get => NumGet(this, 32, "int64")
        set => NumPut("int64", value, this, 32)
    }

    /**
     * The time, in seconds, <b>i64CreateTime</b> may be in error.
     * @type {Integer}
     */
    wFudgeTime {
        get => NumGet(this, 40, "ushort")
        set => NumPut("ushort", value, this, 40)
    }

    /**
     * The <a href="https://docs.microsoft.com/windows/desktop/api/windns/ns-windns-dns_header">Xid</a>  identifier of the original message.
     * @type {Integer}
     */
    wOriginalXid {
        get => NumGet(this, 42, "ushort")
        set => NumPut("ushort", value, this, 42)
    }

    /**
     * An error, expressed in expanded RCODE format that covers TSIG and TKEY RR processing.
     * 
     * <table>
     * <tr>
     * <th>Value</th>
     * <th>Meaning</th>
     * </tr>
     * <tr>
     * <td width="40%"><a id="DNS_RCODE_BADSIG"></a><a id="dns_rcode_badsig"></a><dl>
     * <dt><b>DNS_RCODE_BADSIG</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The <b>pSignature</b> field is bad.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="DNS_RCODE_BADKEY"></a><a id="dns_rcode_badkey"></a><dl>
     * <dt><b>DNS_RCODE_BADKEY</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * The <b>pKey</b> field of the <a href="https://docs.microsoft.com/windows/win32/api/windns/ns-windns-dns_tkey_dataw">DNS_TKEY_DATA</a> RR is bad.
     * 
     * </td>
     * </tr>
     * <tr>
     * <td width="40%"><a id="DNS_RCODE_BADTIME"></a><a id="dns_rcode_badtime"></a><dl>
     * <dt><b>DNS_RCODE_BADTIME</b></dt>
     * </dl>
     * </td>
     * <td width="60%">
     * A timestamp is bad.
     * 
     * </td>
     * </tr>
     * </table>
     * @type {Integer}
     */
    wError {
        get => NumGet(this, 44, "ushort")
        set => NumPut("ushort", value, this, 44)
    }

    /**
     * The length, in bytes, of the <b>pSignature</b> member.
     * @type {Integer}
     */
    wSigLength {
        get => NumGet(this, 46, "ushort")
        set => NumPut("ushort", value, this, 46)
    }

    /**
     * The length, in bytes, of the <b>pOtherData</b> member.
     * @type {Integer}
     */
    wOtherLength {
        get => NumGet(this, 48, "ushort")
        set => NumPut("ushort", value, this, 48)
    }

    /**
     * The length, in bytes, of the <b>pAlgorithmPacket</b> member.
     * @type {Integer}
     */
    cAlgNameLength {
        get => NumGet(this, 50, "char")
        set => NumPut("char", value, this, 50)
    }

    /**
     * Reserved for future use. Do not use.
     * @type {Integer}
     */
    bPacketPointers {
        get => NumGet(this, 52, "int")
        set => NumPut("int", value, this, 52)
    }
}
