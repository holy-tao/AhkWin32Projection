#Requires AutoHotkey v2.0.0 64-bit
#Include ..\..\..\..\Win32Struct.ahk
#Include ..\..\Foundation\RECTL.ahk

/**
 * The STROBJ class, or text string object, contains an enumeration of glyph handles and positions for the device driver.
 * @remarks
 * A driver can call <a href="https://docs.microsoft.com/windows/desktop/api/winddi/nf-winddi-strobj_venumstart">STROBJ_vEnumStart</a> and <a href="https://docs.microsoft.com/windows/desktop/api/winddi/nf-winddi-strobj_benum">STROBJ_bEnum</a> to obtain identities and positions of glyphs in the string. If <i>pgp</i> is not <b>NULL</b>, it points to a GLYPHPOS array describing the whole string and only a single call to <b>STROBJ_bEnum</b> is required. If <i>pgp</i> is <b>NULL</b>, <b>STROBJ_bEnum</b> will have to be called repeatedly in a loop to obtain all the string's glyph positions.
 * @see https://learn.microsoft.com/windows/win32/api/winddi/ns-winddi-strobj
 * @namespace Windows.Win32.Devices.Display
 * @version v4.0.30319
 */
class STROBJ extends Win32Struct
{
    static sizeof => 48

    static packingSize => 8

    /**
     * Specifies the number of glyphs in the STROBJ.
     * @type {Integer}
     */
    cGlyphs {
        get => NumGet(this, 0, "uint")
        set => NumPut("uint", value, this, 0)
    }

    /**
     * 
     * @type {Integer}
     */
    flAccel {
        get => NumGet(this, 4, "uint")
        set => NumPut("uint", value, this, 4)
    }

    /**
     * Specifies whether the font is a fixed-pitch (monospace) font. If it is, this member is equal to the advance width of glyphs in pels; otherwise, it is zero. When this member is nonzero, GDI supplies a valid coordinate for only the first character in the string. All other character positions must be generated by the driver by successively adding the value of this member along the writing direction.
     * @type {Integer}
     */
    ulCharInc {
        get => NumGet(this, 8, "uint")
        set => NumPut("uint", value, this, 8)
    }

    /**
     * Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rectl">RECTL</a> structure that describes the bounding box for the string.
     * @type {RECTL}
     */
    rclBkGround{
        get {
            if(!this.HasProp("__rclBkGround"))
                this.__rclBkGround := RECTL(this.ptr + 16)
            return this.__rclBkGround
        }
    }

    /**
     * Pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/winddi/ns-winddi-glyphpos">GLYPHPOS</a> array for the whole string. Can be <b>NULL</b> (see the following <b>Remarks</b> section).
     * @type {Pointer<GLYPHPOS>}
     */
    pgp {
        get => NumGet(this, 32, "ptr")
        set => NumPut("ptr", value, this, 32)
    }

    /**
     * Pointer to the original Unicode string or <b>cGlyphs</b> characters. Contrary to its name, this string is not usually null-terminated. Also, this string is not always valid, such as in journaling with printer fonts, in which case this parameter will be <b>NULL</b>.
     * @type {Pointer<PWSTR>}
     */
    pwszOrg {
        get => NumGet(this, 40, "ptr")
        set => NumPut("ptr", value, this, 40)
    }
}
